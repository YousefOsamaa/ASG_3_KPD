
ASG_3_KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00005c3e  00005cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008001a8  008001a8  00005e1a  2**0
                  ALLOC
  3 .stab         00007b60  00000000  00000000  00005e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003404  00000000  00000000  0000d97c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  00013ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  00015462  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00016914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  00016b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  00016e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000178dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_1>
       8:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__vector_2>
       c:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_3>
      10:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_4>
      14:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__vector_10>
      2c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3d       	cpi	r26, 0xDC	; 220
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <main>
      8a:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 0b 2e 	jmp	0x5c16	; 0x5c16 <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	e8 59       	subi	r30, 0x98	; 152
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Timer_enu_Initialization+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Timer_enu_Initialization+0x8>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <Timer_enu_Initialization+0xa>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
     fb8:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
     fba:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
     fbc:	1b 82       	std	Y+3, r1	; 0x03
     fbe:	1c 82       	std	Y+4, r1	; 0x04
     fc0:	1d 82       	std	Y+5, r1	; 0x05
     fc2:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	b3 c0       	rjmp	.+358    	; 0x112e <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	e7 59       	subi	r30, 0x97	; 151
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	40 81       	ld	r20, Z
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	c9 01       	movw	r24, r18
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	fc 01       	movw	r30, r24
     ffa:	e6 59       	subi	r30, 0x96	; 150
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	90 81       	ld	r25, Z
    1000:	84 2f       	mov	r24, r20
    1002:	69 2f       	mov	r22, r25
    1004:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <enu_SetTimerMode>
    1008:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	c9 01       	movw	r24, r18
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	fc 01       	movw	r30, r24
    1020:	e7 59       	subi	r30, 0x97	; 151
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	40 81       	ld	r20, Z
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	c9 01       	movw	r24, r18
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	fc 01       	movw	r30, r24
    103c:	e5 59       	subi	r30, 0x95	; 149
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	90 81       	ld	r25, Z
    1042:	84 2f       	mov	r24, r20
    1044:	69 2f       	mov	r22, r25
    1046:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <enu_SetClockSelection>
    104a:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	c9 01       	movw	r24, r18
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	fc 01       	movw	r30, r24
    1062:	e7 59       	subi	r30, 0x97	; 151
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	50 81       	ld	r21, Z
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	c9 01       	movw	r24, r18
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	fc 01       	movw	r30, r24
    107e:	e6 59       	subi	r30, 0x96	; 150
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	40 81       	ld	r20, Z
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	c9 01       	movw	r24, r18
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	fc 01       	movw	r30, r24
    109a:	e4 59       	subi	r30, 0x94	; 148
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	90 81       	ld	r25, Z
    10a0:	85 2f       	mov	r24, r21
    10a2:	64 2f       	mov	r22, r20
    10a4:	49 2f       	mov	r20, r25
    10a6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <enu_SetInterruptMode>
    10aa:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	c9 01       	movw	r24, r18
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	82 0f       	add	r24, r18
    10be:	93 1f       	adc	r25, r19
    10c0:	fc 01       	movw	r30, r24
    10c2:	e7 59       	subi	r30, 0x97	; 151
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	50 81       	ld	r21, Z
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	c9 01       	movw	r24, r18
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	82 0f       	add	r24, r18
    10da:	93 1f       	adc	r25, r19
    10dc:	fc 01       	movw	r30, r24
    10de:	e6 59       	subi	r30, 0x96	; 150
    10e0:	fe 4f       	sbci	r31, 0xFE	; 254
    10e2:	40 81       	ld	r20, Z
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	fc 01       	movw	r30, r24
    10fa:	e3 59       	subi	r30, 0x93	; 147
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	90 81       	ld	r25, Z
    1100:	85 2f       	mov	r24, r21
    1102:	64 2f       	mov	r22, r20
    1104:	49 2f       	mov	r20, r25
    1106:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <enu_SetOCxBehavior>
    110a:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	49 f0       	breq	.+18     	; 0x1124 <Timer_enu_Initialization+0x17a>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	31 f0       	breq	.+12     	; 0x1124 <Timer_enu_Initialization+0x17a>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	19 f0       	breq	.+6      	; 0x1124 <Timer_enu_Initialization+0x17a>
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	11 f4       	brne	.+4      	; 0x1128 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	90 91 68 01 	lds	r25, 0x0168
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	89 17       	cp	r24, r25
    1136:	08 f4       	brcc	.+2      	; 0x113a <Timer_enu_Initialization+0x190>
    1138:	47 cf       	rjmp	.-370    	; 0xfc8 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    113c:	26 96       	adiw	r28, 0x06	; 6
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <Timer_enu_SetOCRxValue+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <Timer_enu_SetOCRxValue+0x8>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <Timer_enu_SetOCRxValue+0xa>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	7c 83       	std	Y+4, r23	; 0x04
    1160:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3e 83       	std	Y+6, r19	; 0x06
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	b9 f0       	breq	.+46     	; 0x11a8 <Timer_enu_SetOCRxValue+0x5a>
    117a:	2d 81       	ldd	r18, Y+5	; 0x05
    117c:	3e 81       	ldd	r19, Y+6	; 0x06
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	51 f0       	breq	.+20     	; 0x1198 <Timer_enu_SetOCRxValue+0x4a>
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f4       	brne	.+24     	; 0x11a4 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
    118c:	ec e5       	ldi	r30, 0x5C	; 92
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1194:	19 82       	std	Y+1, r1	; 0x01
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
    1198:	e3 e4       	ldi	r30, 0x43	; 67
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    11a0:	19 82       	std	Y+1, r1	; 0x01
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11aa:	26 96       	adiw	r28, 0x06	; 6
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <Timer_enu_SetTCNTxValue+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <Timer_enu_SetTCNTxValue+0x8>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <Timer_enu_SetTCNTxValue+0xa>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	7c 83       	std	Y+4, r23	; 0x04
    11ce:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3e 83       	std	Y+6, r19	; 0x06
    11dc:	2d 83       	std	Y+5, r18	; 0x05
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	b1 f0       	breq	.+44     	; 0x1214 <Timer_enu_SetTCNTxValue+0x58>
    11e8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ea:	3e 81       	ldd	r19, Y+6	; 0x06
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	51 f0       	breq	.+20     	; 0x1206 <Timer_enu_SetTCNTxValue+0x4a>
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	59 f4       	brne	.+22     	; 0x1210 <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = (u8)Copy_u16_Value;
    11fa:	e2 e5       	ldi	r30, 0x52	; 82
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
    1206:	e4 e4       	ldi	r30, 0x44	; 68
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	80 83       	st	Z, r24
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
}
    1216:	26 96       	adiw	r28, 0x06	; 6
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <Timer_enu_ReadTCNTxValue+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <Timer_enu_ReadTCNTxValue+0x8>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <Timer_enu_ReadTCNTxValue+0xa>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	7c 83       	std	Y+4, r23	; 0x04
    123a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f1       	breq	.+88     	; 0x12a0 <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3e 83       	std	Y+6, r19	; 0x06
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	21 f1       	breq	.+72     	; 0x12a4 <Timer_enu_ReadTCNTxValue+0x7c>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	79 f0       	breq	.+30     	; 0x1284 <Timer_enu_ReadTCNTxValue+0x5c>
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	b1 f4       	brne	.+44     	; 0x129a <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
    126e:	e2 e5       	ldi	r30, 0x52	; 82
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	eb 81       	ldd	r30, Y+3	; 0x03
    127a:	fc 81       	ldd	r31, Y+4	; 0x04
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
    1284:	e4 e4       	ldi	r30, 0x44	; 68
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	eb 81       	ldd	r30, Y+3	; 0x03
    1290:	fc 81       	ldd	r31, Y+4	; 0x04
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a6:	26 96       	adiw	r28, 0x06	; 6
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <Timer_enu_SetClock+0x6>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	6b 81       	ldd	r22, Y+3	; 0x03
    12d0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <enu_SetClockSelection>
    12d4:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <Timer_enu_SetDutyCycleForPWM>:

ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2c 97       	sbiw	r28, 0x0c	; 12
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	6b 83       	std	Y+3, r22	; 0x03
    1300:	4c 83       	std	Y+4, r20	; 0x04
    1302:	0d 83       	std	Y+5, r16	; 0x05
    1304:	1e 83       	std	Y+6, r17	; 0x06
    1306:	2f 83       	std	Y+7, r18	; 0x07
    1308:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
    130e:	1c 86       	std	Y+12, r1	; 0x0c
    1310:	6d 81       	ldd	r22, Y+5	; 0x05
    1312:	7e 81       	ldd	r23, Y+6	; 0x06
    1314:	8f 81       	ldd	r24, Y+7	; 0x07
    1316:	98 85       	ldd	r25, Y+8	; 0x08
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    1324:	88 23       	and	r24, r24
    1326:	14 f0       	brlt	.+4      	; 0x132c <Timer_enu_SetDutyCycleForPWM+0x48>
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	2c 87       	std	Y+12, r18	; 0x0c
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1330:	83 27       	eor	r24, r19
    1332:	88 23       	and	r24, r24
    1334:	09 f0       	breq	.+2      	; 0x1338 <Timer_enu_SetDutyCycleForPWM+0x54>
    1336:	65 c1       	rjmp	.+714    	; 0x1602 <Timer_enu_SetDutyCycleForPWM+0x31e>
    1338:	1b 86       	std	Y+11, r1	; 0x0b
    133a:	6d 81       	ldd	r22, Y+5	; 0x05
    133c:	7e 81       	ldd	r23, Y+6	; 0x06
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    134e:	18 16       	cp	r1, r24
    1350:	14 f0       	brlt	.+4      	; 0x1356 <Timer_enu_SetDutyCycleForPWM+0x72>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8b 87       	std	Y+11, r24	; 0x0b
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	9b 85       	ldd	r25, Y+11	; 0x0b
    135a:	89 27       	eor	r24, r25
    135c:	88 23       	and	r24, r24
    135e:	09 f0       	breq	.+2      	; 0x1362 <Timer_enu_SetDutyCycleForPWM+0x7e>
    1360:	50 c1       	rjmp	.+672    	; 0x1602 <Timer_enu_SetDutyCycleForPWM+0x31e>
    {
        switch (Copy_u8_TimerNumber)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	e8 2f       	mov	r30, r24
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	fa 87       	std	Y+10, r31	; 0x0a
    136a:	e9 87       	std	Y+9, r30	; 0x09
    136c:	29 85       	ldd	r18, Y+9	; 0x09
    136e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1370:	21 30       	cpi	r18, 0x01	; 1
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <Timer_enu_SetDutyCycleForPWM+0x94>
    1376:	47 c1       	rjmp	.+654    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <Timer_enu_SetDutyCycleForPWM+0xa0>
    1382:	a0 c0       	rjmp	.+320    	; 0x14c4 <Timer_enu_SetDutyCycleForPWM+0x1e0>
    1384:	e9 85       	ldd	r30, Y+9	; 0x09
    1386:	fa 85       	ldd	r31, Y+10	; 0x0a
    1388:	30 97       	sbiw	r30, 0x00	; 0
    138a:	09 f0       	breq	.+2      	; 0x138e <Timer_enu_SetDutyCycleForPWM+0xaa>
    138c:	37 c1       	rjmp	.+622    	; 0x15fc <Timer_enu_SetDutyCycleForPWM+0x318>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	09 f0       	breq	.+2      	; 0x1396 <Timer_enu_SetDutyCycleForPWM+0xb2>
    1394:	43 c0       	rjmp	.+134    	; 0x141c <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	c1 f4       	brne	.+48     	; 0x13cc <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
    139c:	0c e5       	ldi	r16, 0x5C	; 92
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	6d 81       	ldd	r22, Y+5	; 0x05
    13a2:	7e 81       	ldd	r23, Y+6	; 0x06
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	53 e4       	ldi	r21, 0x43	; 67
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	1d c1       	rjmp	.+570    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	87 30       	cpi	r24, 0x07	; 7
    13d0:	11 f5       	brne	.+68     	; 0x1416 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - (Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP) ;
    13d2:	0c e5       	ldi	r16, 0x5C	; 92
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	6d 81       	ldd	r22, Y+5	; 0x05
    13d8:	7e 81       	ldd	r23, Y+6	; 0x06
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	53 ec       	ldi	r21, 0xC3	; 195
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	53 e4       	ldi	r21, 0x43	; 67
    13fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1412:	19 82       	std	Y+1, r1	; 0x01
    1414:	f8 c0       	rjmp	.+496    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	f5 c0       	rjmp	.+490    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	09 f0       	breq	.+2      	; 0x1424 <Timer_enu_SetDutyCycleForPWM+0x140>
    1422:	4d c0       	rjmp	.+154    	; 0x14be <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	11 f5       	brne	.+68     	; 0x146e <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    142a:	0c e5       	ldi	r16, 0x5C	; 92
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	6d 81       	ldd	r22, Y+5	; 0x05
    1430:	7e 81       	ldd	r23, Y+6	; 0x06
    1432:	8f 81       	ldd	r24, Y+7	; 0x07
    1434:	98 85       	ldd	r25, Y+8	; 0x08
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e8       	ldi	r19, 0x80	; 128
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	53 e4       	ldi	r21, 0x43	; 67
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	cc c0       	rjmp	.+408    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	85 30       	cpi	r24, 0x05	; 5
    1472:	11 f5       	brne	.+68     	; 0x14b8 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) ;
    1474:	0c e5       	ldi	r16, 0x5C	; 92
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	6d 81       	ldd	r22, Y+5	; 0x05
    147a:	7e 81       	ldd	r23, Y+6	; 0x06
    147c:	8f 81       	ldd	r24, Y+7	; 0x07
    147e:	98 85       	ldd	r25, Y+8	; 0x08
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e8       	ldi	r19, 0x80	; 128
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	53 ec       	ldi	r21, 0xC3	; 195
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	f8 01       	movw	r30, r16
    14b2:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	a7 c0       	rjmp	.+334    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	a4 c0       	rjmp	.+328    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	a1 c0       	rjmp	.+322    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	09 f0       	breq	.+2      	; 0x14cc <Timer_enu_SetDutyCycleForPWM+0x1e8>
    14ca:	43 c0       	rjmp	.+134    	; 0x1552 <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	86 30       	cpi	r24, 0x06	; 6
    14d0:	c1 f4       	brne	.+48     	; 0x1502 <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    14d2:	03 e4       	ldi	r16, 0x43	; 67
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	6d 81       	ldd	r22, Y+5	; 0x05
    14d8:	7e 81       	ldd	r23, Y+6	; 0x06
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	98 85       	ldd	r25, Y+8	; 0x08
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	53 e4       	ldi	r21, 0x43	; 67
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	f8 01       	movw	r30, r16
    14fc:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    14fe:	19 82       	std	Y+1, r1	; 0x01
    1500:	82 c0       	rjmp	.+260    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	87 30       	cpi	r24, 0x07	; 7
    1506:	11 f5       	brne	.+68     	; 0x154c <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - (Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP) ;
    1508:	03 e4       	ldi	r16, 0x43	; 67
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	6d 81       	ldd	r22, Y+5	; 0x05
    150e:	7e 81       	ldd	r23, Y+6	; 0x06
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	53 ec       	ldi	r21, 0xC3	; 195
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	53 e4       	ldi	r21, 0x43	; 67
    1530:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1548:	19 82       	std	Y+1, r1	; 0x01
    154a:	5d c0       	rjmp	.+186    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	5a c0       	rjmp	.+180    	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	09 f0       	breq	.+2      	; 0x155a <Timer_enu_SetDutyCycleForPWM+0x276>
    1558:	4e c0       	rjmp	.+156    	; 0x15f6 <Timer_enu_SetDutyCycleForPWM+0x312>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	11 f5       	brne	.+68     	; 0x15a4 <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    1560:	03 e4       	ldi	r16, 0x43	; 67
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	6d 81       	ldd	r22, Y+5	; 0x05
    1566:	7e 81       	ldd	r23, Y+6	; 0x06
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	98 85       	ldd	r25, Y+8	; 0x08
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e8       	ldi	r19, 0x80	; 128
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	53 e4       	ldi	r21, 0x43	; 67
    1574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	f8 01       	movw	r30, r16
    159e:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <Timer_enu_SetDutyCycleForPWM+0x30e>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	85 30       	cpi	r24, 0x05	; 5
    15a8:	11 f5       	brne	.+68     	; 0x15ee <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    15aa:	03 e4       	ldi	r16, 0x43	; 67
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	6d 81       	ldd	r22, Y+5	; 0x05
    15b0:	7e 81       	ldd	r23, Y+6	; 0x06
    15b2:	8f 81       	ldd	r24, Y+7	; 0x07
    15b4:	98 85       	ldd	r25, Y+8	; 0x08
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e8       	ldi	r19, 0x80	; 128
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	53 ec       	ldi	r21, 0xC3	; 195
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	53 e4       	ldi	r21, 0x43	; 67
    15d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	f8 01       	movw	r30, r16
    15e8:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <Timer_enu_SetDutyCycleForPWM+0x30e>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	89 83       	std	Y+1, r24	; 0x01
                    }

                    Local_u8_ErrorFlag = ES_OK;
    15f2:	19 82       	std	Y+1, r1	; 0x01
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <Timer_enu_SetDutyCycleForPWM+0x322>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
}
    1608:	2c 96       	adiw	r28, 0x0c	; 12
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	29 97       	sbiw	r28, 0x09	; 9
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	6b 83       	std	Y+3, r22	; 0x03
    1636:	5d 83       	std	Y+5, r21	; 0x05
    1638:	4c 83       	std	Y+4, r20	; 0x04
    163a:	3f 83       	std	Y+7, r19	; 0x07
    163c:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	09 f4       	brne	.+2      	; 0x164c <Timer_enu_SetCallBack+0x2e>
    164a:	62 c0       	rjmp	.+196    	; 0x1710 <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	39 87       	std	Y+9, r19	; 0x09
    1654:	28 87       	std	Y+8, r18	; 0x08
    1656:	88 85       	ldd	r24, Y+8	; 0x08
    1658:	99 85       	ldd	r25, Y+9	; 0x09
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <Timer_enu_SetCallBack+0x44>
    1660:	59 c0       	rjmp	.+178    	; 0x1714 <Timer_enu_SetCallBack+0xf6>
    1662:	28 85       	ldd	r18, Y+8	; 0x08
    1664:	39 85       	ldd	r19, Y+9	; 0x09
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	51 f1       	breq	.+84     	; 0x16c0 <Timer_enu_SetCallBack+0xa2>
    166c:	88 85       	ldd	r24, Y+8	; 0x08
    166e:	99 85       	ldd	r25, Y+9	; 0x09
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	09 f0       	breq	.+2      	; 0x1676 <Timer_enu_SetCallBack+0x58>
    1674:	4a c0       	rjmp	.+148    	; 0x170a <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	88 23       	and	r24, r24
    167a:	71 f4       	brne	.+28     	; 0x1698 <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	90 93 b7 01 	sts	0x01B7, r25
    1684:	80 93 b6 01 	sts	0x01B6, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	9f 81       	ldd	r25, Y+7	; 0x07
    168c:	90 93 c7 01 	sts	0x01C7, r25
    1690:	80 93 c6 01 	sts	0x01C6, r24

                    Local_u8_ErrorFlag = ES_OK;
    1694:	19 82       	std	Y+1, r1	; 0x01
    1696:	3e c0       	rjmp	.+124    	; 0x1714 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	71 f4       	brne	.+28     	; 0x16ba <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	90 93 b5 01 	sts	0x01B5, r25
    16a6:	80 93 b4 01 	sts	0x01B4, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    16aa:	8e 81       	ldd	r24, Y+6	; 0x06
    16ac:	9f 81       	ldd	r25, Y+7	; 0x07
    16ae:	90 93 c5 01 	sts	0x01C5, r25
    16b2:	80 93 c4 01 	sts	0x01C4, r24

                    Local_u8_ErrorFlag = ES_OK;
    16b6:	19 82       	std	Y+1, r1	; 0x01
    16b8:	2d c0       	rjmp	.+90     	; 0x1714 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	2a c0       	rjmp	.+84     	; 0x1714 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 23       	and	r24, r24
    16c4:	71 f4       	brne	.+28     	; 0x16e2 <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	90 93 ab 01 	sts	0x01AB, r25
    16ce:	80 93 aa 01 	sts	0x01AA, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	9f 81       	ldd	r25, Y+7	; 0x07
    16d6:	90 93 bb 01 	sts	0x01BB, r25
    16da:	80 93 ba 01 	sts	0x01BA, r24

                    Local_u8_ErrorFlag = ES_OK;
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	19 c0       	rjmp	.+50     	; 0x1714 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	71 f4       	brne	.+28     	; 0x1704 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	90 93 a9 01 	sts	0x01A9, r25
    16f0:	80 93 a8 01 	sts	0x01A8, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    16f4:	8e 81       	ldd	r24, Y+6	; 0x06
    16f6:	9f 81       	ldd	r25, Y+7	; 0x07
    16f8:	90 93 b9 01 	sts	0x01B9, r25
    16fc:	80 93 b8 01 	sts	0x01B8, r24

                    Local_u8_ErrorFlag = ES_OK;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	08 c0       	rjmp	.+16     	; 0x1714 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	05 c0       	rjmp	.+10     	; 0x1714 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
}
    1716:	29 96       	adiw	r28, 0x09	; 9
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <__vector_4>:
void __vector_5 (void)__attribute__((signal));
void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));

void __vector_4 (void)
{
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	2f 93       	push	r18
    1734:	3f 93       	push	r19
    1736:	4f 93       	push	r20
    1738:	5f 93       	push	r21
    173a:	6f 93       	push	r22
    173c:	7f 93       	push	r23
    173e:	8f 93       	push	r24
    1740:	9f 93       	push	r25
    1742:	af 93       	push	r26
    1744:	bf 93       	push	r27
    1746:	ef 93       	push	r30
    1748:	ff 93       	push	r31
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    1752:	80 91 a8 01 	lds	r24, 0x01A8
    1756:	90 91 a9 01 	lds	r25, 0x01A9
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	49 f0       	breq	.+18     	; 0x1770 <__vector_4+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    175e:	e0 91 a8 01 	lds	r30, 0x01A8
    1762:	f0 91 a9 01 	lds	r31, 0x01A9
    1766:	80 91 b8 01 	lds	r24, 0x01B8
    176a:	90 91 b9 01 	lds	r25, 0x01B9
    176e:	09 95       	icall
    }
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_5>:

void __vector_5 (void)
{
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    17c0:	80 91 a8 01 	lds	r24, 0x01A8
    17c4:	90 91 a9 01 	lds	r25, 0x01A9
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	49 f0       	breq	.+18     	; 0x17de <__vector_5+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    17cc:	e0 91 a8 01 	lds	r30, 0x01A8
    17d0:	f0 91 a9 01 	lds	r31, 0x01A9
    17d4:	80 91 b8 01 	lds	r24, 0x01B8
    17d8:	90 91 b9 01 	lds	r25, 0x01B9
    17dc:	09 95       	icall
    }
}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	ff 91       	pop	r31
    17e4:	ef 91       	pop	r30
    17e6:	bf 91       	pop	r27
    17e8:	af 91       	pop	r26
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	7f 91       	pop	r23
    17f0:	6f 91       	pop	r22
    17f2:	5f 91       	pop	r21
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <__vector_10>:

void __vector_10 (void)
{
    1804:	1f 92       	push	r1
    1806:	0f 92       	push	r0
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	0f 92       	push	r0
    180c:	11 24       	eor	r1, r1
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    182e:	80 91 b4 01 	lds	r24, 0x01B4
    1832:	90 91 b5 01 	lds	r25, 0x01B5
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	49 f0       	breq	.+18     	; 0x184c <__vector_10+0x48>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    183a:	e0 91 b4 01 	lds	r30, 0x01B4
    183e:	f0 91 b5 01 	lds	r31, 0x01B5
    1842:	80 91 c4 01 	lds	r24, 0x01C4
    1846:	90 91 c5 01 	lds	r25, 0x01C5
    184a:	09 95       	icall
    }
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <__vector_11>:

void __vector_11 (void)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    189c:	80 91 b6 01 	lds	r24, 0x01B6
    18a0:	90 91 b7 01 	lds	r25, 0x01B7
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	49 f0       	breq	.+18     	; 0x18ba <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    18a8:	e0 91 b6 01 	lds	r30, 0x01B6
    18ac:	f0 91 b7 01 	lds	r31, 0x01B7
    18b0:	80 91 c6 01 	lds	r24, 0x01C6
    18b4:	90 91 c7 01 	lds	r25, 0x01C7
    18b8:	09 95       	icall
    }
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	0f 90       	pop	r0
    18dc:	1f 90       	pop	r1
    18de:	18 95       	reti

000018e0 <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <enu_SetTimerMode+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <enu_SetTimerMode+0x8>
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3d 83       	std	Y+5, r19	; 0x05
    18fe:	2c 83       	std	Y+4, r18	; 0x04
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <enu_SetTimerMode+0x2c>
    190a:	ab c0       	rjmp	.+342    	; 0x1a62 <enu_SetTimerMode+0x182>
    190c:	2c 81       	ldd	r18, Y+4	; 0x04
    190e:	3d 81       	ldd	r19, Y+5	; 0x05
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <enu_SetTimerMode+0x38>
    1916:	54 c0       	rjmp	.+168    	; 0x19c0 <enu_SetTimerMode+0xe0>
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	09 f0       	breq	.+2      	; 0x1922 <enu_SetTimerMode+0x42>
    1920:	9e c0       	rjmp	.+316    	; 0x1a5e <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 23       	and	r24, r24
    1926:	81 f4       	brne	.+32     	; 0x1948 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1928:	a3 e5       	ldi	r26, 0x53	; 83
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e3 e5       	ldi	r30, 0x53	; 83
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8f 7b       	andi	r24, 0xBF	; 191
    1934:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	87 7f       	andi	r24, 0xF7	; 247
    1942:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	8d c0       	rjmp	.+282    	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	81 f4       	brne	.+32     	; 0x196e <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    194e:	a3 e5       	ldi	r26, 0x53	; 83
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e3 e5       	ldi	r30, 0x53	; 83
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 64       	ori	r24, 0x40	; 64
    195a:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    195c:	a3 e5       	ldi	r26, 0x53	; 83
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e3 e5       	ldi	r30, 0x53	; 83
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	87 7f       	andi	r24, 0xF7	; 247
    1968:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	7a c0       	rjmp	.+244    	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	81 f4       	brne	.+32     	; 0x1994 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1974:	a3 e5       	ldi	r26, 0x53	; 83
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e3 e5       	ldi	r30, 0x53	; 83
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7b       	andi	r24, 0xBF	; 191
    1980:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1982:	a3 e5       	ldi	r26, 0x53	; 83
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e3 e5       	ldi	r30, 0x53	; 83
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	88 60       	ori	r24, 0x08	; 8
    198e:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1990:	19 82       	std	Y+1, r1	; 0x01
    1992:	67 c0       	rjmp	.+206    	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	81 f4       	brne	.+32     	; 0x19ba <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    199a:	a3 e5       	ldi	r26, 0x53	; 83
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 e5       	ldi	r30, 0x53	; 83
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 64       	ori	r24, 0x40	; 64
    19a6:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    19a8:	a3 e5       	ldi	r26, 0x53	; 83
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e3 e5       	ldi	r30, 0x53	; 83
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 60       	ori	r24, 0x08	; 8
    19b4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    19b6:	19 82       	std	Y+1, r1	; 0x01
    19b8:	54 c0       	rjmp	.+168    	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	51 c0       	rjmp	.+162    	; 0x1a62 <enu_SetTimerMode+0x182>
        }
        break;
     
        case TIMER_2:
        {
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 23       	and	r24, r24
    19c4:	81 f4       	brne	.+32     	; 0x19e6 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    19c6:	a5 e4       	ldi	r26, 0x45	; 69
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e4       	ldi	r30, 0x45	; 69
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7b       	andi	r24, 0xBF	; 191
    19d2:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    19d4:	a5 e4       	ldi	r26, 0x45	; 69
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e4       	ldi	r30, 0x45	; 69
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	3e c0       	rjmp	.+124    	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	81 f4       	brne	.+32     	; 0x1a0c <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    19ec:	a5 e4       	ldi	r26, 0x45	; 69
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e4       	ldi	r30, 0x45	; 69
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    19fa:	a5 e4       	ldi	r26, 0x45	; 69
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e5 e4       	ldi	r30, 0x45	; 69
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	87 7f       	andi	r24, 0xF7	; 247
    1a06:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1a08:	19 82       	std	Y+1, r1	; 0x01
    1a0a:	2b c0       	rjmp	.+86     	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	81 f4       	brne	.+32     	; 0x1a32 <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1a12:	a5 e4       	ldi	r26, 0x45	; 69
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e4       	ldi	r30, 0x45	; 69
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 7b       	andi	r24, 0xBF	; 191
    1a1e:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1a20:	a5 e4       	ldi	r26, 0x45	; 69
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e4       	ldi	r30, 0x45	; 69
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 60       	ori	r24, 0x08	; 8
    1a2c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1a2e:	19 82       	std	Y+1, r1	; 0x01
    1a30:	18 c0       	rjmp	.+48     	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	81 f4       	brne	.+32     	; 0x1a58 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    1a38:	a5 e4       	ldi	r26, 0x45	; 69
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e5 e4       	ldi	r30, 0x45	; 69
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    1a46:	a5 e4       	ldi	r26, 0x45	; 69
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e4       	ldi	r30, 0x45	; 69
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 60       	ori	r24, 0x08	; 8
    1a52:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <enu_SetTimerMode+0x182>

        }
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	29 97       	sbiw	r28, 0x09	; 9
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	39 87       	std	Y+9, r19	; 0x09
    1a98:	28 87       	std	Y+8, r18	; 0x08
    1a9a:	88 85       	ldd	r24, Y+8	; 0x08
    1a9c:	99 85       	ldd	r25, Y+9	; 0x09
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <enu_SetClockSelection+0x32>
    1aa4:	03 c2       	rjmp	.+1030   	; 0x1eac <enu_SetClockSelection+0x438>
    1aa6:	28 85       	ldd	r18, Y+8	; 0x08
    1aa8:	39 85       	ldd	r19, Y+9	; 0x09
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <enu_SetClockSelection+0x3e>
    1ab0:	00 c1       	rjmp	.+512    	; 0x1cb2 <enu_SetClockSelection+0x23e>
    1ab2:	88 85       	ldd	r24, Y+8	; 0x08
    1ab4:	99 85       	ldd	r25, Y+9	; 0x09
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <enu_SetClockSelection+0x48>
    1aba:	f6 c1       	rjmp	.+1004   	; 0x1ea8 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3f 83       	std	Y+7, r19	; 0x07
    1ac4:	2e 83       	std	Y+6, r18	; 0x06
    1ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <enu_SetClockSelection+0x5e>
    1ad0:	7a c0       	rjmp	.+244    	; 0x1bc6 <enu_SetClockSelection+0x152>
    1ad2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad6:	25 30       	cpi	r18, 0x05	; 5
    1ad8:	31 05       	cpc	r19, r1
    1ada:	8c f4       	brge	.+34     	; 0x1afe <enu_SetClockSelection+0x8a>
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <enu_SetClockSelection+0x74>
    1ae6:	41 c0       	rjmp	.+130    	; 0x1b6a <enu_SetClockSelection+0xf6>
    1ae8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aea:	3f 81       	ldd	r19, Y+7	; 0x07
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <enu_SetClockSelection+0x80>
    1af2:	52 c0       	rjmp	.+164    	; 0x1b98 <enu_SetClockSelection+0x124>
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	01 f1       	breq	.+64     	; 0x1b3c <enu_SetClockSelection+0xc8>
    1afc:	d7 c0       	rjmp	.+430    	; 0x1cac <enu_SetClockSelection+0x238>
    1afe:	2e 81       	ldd	r18, Y+6	; 0x06
    1b00:	3f 81       	ldd	r19, Y+7	; 0x07
    1b02:	27 30       	cpi	r18, 0x07	; 7
    1b04:	31 05       	cpc	r19, r1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <enu_SetClockSelection+0x96>
    1b08:	8c c0       	rjmp	.+280    	; 0x1c22 <enu_SetClockSelection+0x1ae>
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	88 30       	cpi	r24, 0x08	; 8
    1b10:	91 05       	cpc	r25, r1
    1b12:	3c f4       	brge	.+14     	; 0x1b22 <enu_SetClockSelection+0xae>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	26 30       	cpi	r18, 0x06	; 6
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <enu_SetClockSelection+0xac>
    1b1e:	6a c0       	rjmp	.+212    	; 0x1bf4 <enu_SetClockSelection+0x180>
    1b20:	c5 c0       	rjmp	.+394    	; 0x1cac <enu_SetClockSelection+0x238>
    1b22:	8e 81       	ldd	r24, Y+6	; 0x06
    1b24:	9f 81       	ldd	r25, Y+7	; 0x07
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <enu_SetClockSelection+0xba>
    1b2c:	91 c0       	rjmp	.+290    	; 0x1c50 <enu_SetClockSelection+0x1dc>
    1b2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b30:	3f 81       	ldd	r19, Y+7	; 0x07
    1b32:	29 30       	cpi	r18, 0x09	; 9
    1b34:	31 05       	cpc	r19, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <enu_SetClockSelection+0xc6>
    1b38:	a2 c0       	rjmp	.+324    	; 0x1c7e <enu_SetClockSelection+0x20a>
    1b3a:	b8 c0       	rjmp	.+368    	; 0x1cac <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    1b3c:	a3 e5       	ldi	r26, 0x53	; 83
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e3 e5       	ldi	r30, 0x53	; 83
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8e 7f       	andi	r24, 0xFE	; 254
    1b48:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1b4a:	a3 e5       	ldi	r26, 0x53	; 83
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e3 e5       	ldi	r30, 0x53	; 83
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8d 7f       	andi	r24, 0xFD	; 253
    1b56:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1b58:	a3 e5       	ldi	r26, 0x53	; 83
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e3 e5       	ldi	r30, 0x53	; 83
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8b 7f       	andi	r24, 0xFB	; 251
    1b64:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1b66:	19 82       	std	Y+1, r1	; 0x01
    1b68:	a1 c1       	rjmp	.+834    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    1b6a:	a3 e5       	ldi	r26, 0x53	; 83
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e3 e5       	ldi	r30, 0x53	; 83
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1b78:	a3 e5       	ldi	r26, 0x53	; 83
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e3 e5       	ldi	r30, 0x53	; 83
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	8d 7f       	andi	r24, 0xFD	; 253
    1b84:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1b86:	a3 e5       	ldi	r26, 0x53	; 83
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e3 e5       	ldi	r30, 0x53	; 83
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8b 7f       	andi	r24, 0xFB	; 251
    1b92:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	8a c1       	rjmp	.+788    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1b98:	a3 e5       	ldi	r26, 0x53	; 83
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e3 e5       	ldi	r30, 0x53	; 83
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1ba6:	a3 e5       	ldi	r26, 0x53	; 83
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e3 e5       	ldi	r30, 0x53	; 83
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	82 60       	ori	r24, 0x02	; 2
    1bb2:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8b 7f       	andi	r24, 0xFB	; 251
    1bc0:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	73 c1       	rjmp	.+742    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    1bc6:	a3 e5       	ldi	r26, 0x53	; 83
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e3 e5       	ldi	r30, 0x53	; 83
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1bd4:	a3 e5       	ldi	r26, 0x53	; 83
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e3 e5       	ldi	r30, 0x53	; 83
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1be2:	a3 e5       	ldi	r26, 0x53	; 83
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e3 e5       	ldi	r30, 0x53	; 83
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	5c c1       	rjmp	.+696    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    1c02:	a3 e5       	ldi	r26, 0x53	; 83
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e3 e5       	ldi	r30, 0x53	; 83
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8d 7f       	andi	r24, 0xFD	; 253
    1c0e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c10:	a3 e5       	ldi	r26, 0x53	; 83
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e3 e5       	ldi	r30, 0x53	; 83
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	84 60       	ori	r24, 0x04	; 4
    1c1c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	45 c1       	rjmp	.+650    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    1c22:	a3 e5       	ldi	r26, 0x53	; 83
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e3 e5       	ldi	r30, 0x53	; 83
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1c30:	a3 e5       	ldi	r26, 0x53	; 83
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e3 e5       	ldi	r30, 0x53	; 83
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8d 7f       	andi	r24, 0xFD	; 253
    1c3c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c3e:	a3 e5       	ldi	r26, 0x53	; 83
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e3 e5       	ldi	r30, 0x53	; 83
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	84 60       	ori	r24, 0x04	; 4
    1c4a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	2e c1       	rjmp	.+604    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8e 7f       	andi	r24, 0xFE	; 254
    1c5c:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	82 60       	ori	r24, 0x02	; 2
    1c6a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c6c:	a3 e5       	ldi	r26, 0x53	; 83
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e3 e5       	ldi	r30, 0x53	; 83
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	84 60       	ori	r24, 0x04	; 4
    1c78:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	17 c1       	rjmp	.+558    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    1c7e:	a3 e5       	ldi	r26, 0x53	; 83
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e3 e5       	ldi	r30, 0x53	; 83
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1c8c:	a3 e5       	ldi	r26, 0x53	; 83
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e3 e5       	ldi	r30, 0x53	; 83
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	82 60       	ori	r24, 0x02	; 2
    1c98:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1c9a:	a3 e5       	ldi	r26, 0x53	; 83
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	84 60       	ori	r24, 0x04	; 4
    1ca6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01
    1caa:	00 c1       	rjmp	.+512    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	fd c0       	rjmp	.+506    	; 0x1eac <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    1cb2:	a2 e4       	ldi	r26, 0x42	; 66
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e2 e4       	ldi	r30, 0x42	; 66
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	87 7f       	andi	r24, 0xF7	; 247
    1cbe:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3d 83       	std	Y+5, r19	; 0x05
    1cc8:	2c 83       	std	Y+4, r18	; 0x04
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <enu_SetClockSelection+0x262>
    1cd4:	73 c0       	rjmp	.+230    	; 0x1dbc <enu_SetClockSelection+0x348>
    1cd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cda:	24 30       	cpi	r18, 0x04	; 4
    1cdc:	31 05       	cpc	r19, r1
    1cde:	84 f4       	brge	.+32     	; 0x1d00 <enu_SetClockSelection+0x28c>
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	d9 f1       	breq	.+118    	; 0x1d60 <enu_SetClockSelection+0x2ec>
    1cea:	2c 81       	ldd	r18, Y+4	; 0x04
    1cec:	3d 81       	ldd	r19, Y+5	; 0x05
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <enu_SetClockSelection+0x282>
    1cf4:	4c c0       	rjmp	.+152    	; 0x1d8e <enu_SetClockSelection+0x31a>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	d1 f0       	breq	.+52     	; 0x1d32 <enu_SetClockSelection+0x2be>
    1cfe:	d1 c0       	rjmp	.+418    	; 0x1ea2 <enu_SetClockSelection+0x42e>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	25 30       	cpi	r18, 0x05	; 5
    1d06:	31 05       	cpc	r19, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <enu_SetClockSelection+0x298>
    1d0a:	86 c0       	rjmp	.+268    	; 0x1e18 <enu_SetClockSelection+0x3a4>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	85 30       	cpi	r24, 0x05	; 5
    1d12:	91 05       	cpc	r25, r1
    1d14:	0c f4       	brge	.+2      	; 0x1d18 <enu_SetClockSelection+0x2a4>
    1d16:	69 c0       	rjmp	.+210    	; 0x1dea <enu_SetClockSelection+0x376>
    1d18:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1c:	26 30       	cpi	r18, 0x06	; 6
    1d1e:	31 05       	cpc	r19, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <enu_SetClockSelection+0x2b0>
    1d22:	91 c0       	rjmp	.+290    	; 0x1e46 <enu_SetClockSelection+0x3d2>
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	87 30       	cpi	r24, 0x07	; 7
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <enu_SetClockSelection+0x2bc>
    1d2e:	a2 c0       	rjmp	.+324    	; 0x1e74 <enu_SetClockSelection+0x400>
    1d30:	b8 c0       	rjmp	.+368    	; 0x1ea2 <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    1d32:	a5 e4       	ldi	r26, 0x45	; 69
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e4       	ldi	r30, 0x45	; 69
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e 7f       	andi	r24, 0xFE	; 254
    1d3e:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1d40:	a5 e4       	ldi	r26, 0x45	; 69
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e5 e4       	ldi	r30, 0x45	; 69
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8d 7f       	andi	r24, 0xFD	; 253
    1d4c:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1d4e:	a5 e4       	ldi	r26, 0x45	; 69
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e4       	ldi	r30, 0x45	; 69
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8b 7f       	andi	r24, 0xFB	; 251
    1d5a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d5c:	19 82       	std	Y+1, r1	; 0x01
    1d5e:	a6 c0       	rjmp	.+332    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    1d60:	a5 e4       	ldi	r26, 0x45	; 69
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e4       	ldi	r30, 0x45	; 69
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1d6e:	a5 e4       	ldi	r26, 0x45	; 69
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e4       	ldi	r30, 0x45	; 69
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8d 7f       	andi	r24, 0xFD	; 253
    1d7a:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1d7c:	a5 e4       	ldi	r26, 0x45	; 69
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e5 e4       	ldi	r30, 0x45	; 69
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8b 7f       	andi	r24, 0xFB	; 251
    1d88:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d8a:	19 82       	std	Y+1, r1	; 0x01
    1d8c:	8f c0       	rjmp	.+286    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1d8e:	a5 e4       	ldi	r26, 0x45	; 69
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e4       	ldi	r30, 0x45	; 69
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    1d9c:	a5 e4       	ldi	r26, 0x45	; 69
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e4       	ldi	r30, 0x45	; 69
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	82 60       	ori	r24, 0x02	; 2
    1da8:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    1daa:	a5 e4       	ldi	r26, 0x45	; 69
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e5 e4       	ldi	r30, 0x45	; 69
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8b 7f       	andi	r24, 0xFB	; 251
    1db6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	78 c0       	rjmp	.+240    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    1dbc:	a5 e4       	ldi	r26, 0x45	; 69
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e4       	ldi	r30, 0x45	; 69
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	81 60       	ori	r24, 0x01	; 1
    1dc8:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1dca:	a5 e4       	ldi	r26, 0x45	; 69
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e4       	ldi	r30, 0x45	; 69
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	82 60       	ori	r24, 0x02	; 2
    1dd6:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1dd8:	a5 e4       	ldi	r26, 0x45	; 69
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e4       	ldi	r30, 0x45	; 69
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8b 7f       	andi	r24, 0xFB	; 251
    1de4:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1de6:	19 82       	std	Y+1, r1	; 0x01
    1de8:	61 c0       	rjmp	.+194    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1dea:	a5 e4       	ldi	r26, 0x45	; 69
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e4       	ldi	r30, 0x45	; 69
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8e 7f       	andi	r24, 0xFE	; 254
    1df6:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    1df8:	a5 e4       	ldi	r26, 0x45	; 69
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e4       	ldi	r30, 0x45	; 69
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8d 7f       	andi	r24, 0xFD	; 253
    1e04:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e06:	a5 e4       	ldi	r26, 0x45	; 69
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e4       	ldi	r30, 0x45	; 69
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	84 60       	ori	r24, 0x04	; 4
    1e12:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	4a c0       	rjmp	.+148    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    1e18:	a5 e4       	ldi	r26, 0x45	; 69
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e4       	ldi	r30, 0x45	; 69
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1e26:	a5 e4       	ldi	r26, 0x45	; 69
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e4       	ldi	r30, 0x45	; 69
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8d 7f       	andi	r24, 0xFD	; 253
    1e32:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e34:	a5 e4       	ldi	r26, 0x45	; 69
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e4       	ldi	r30, 0x45	; 69
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	84 60       	ori	r24, 0x04	; 4
    1e40:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	33 c0       	rjmp	.+102    	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1e46:	a5 e4       	ldi	r26, 0x45	; 69
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e4       	ldi	r30, 0x45	; 69
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1e54:	a5 e4       	ldi	r26, 0x45	; 69
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e4       	ldi	r30, 0x45	; 69
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	82 60       	ori	r24, 0x02	; 2
    1e60:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e62:	a5 e4       	ldi	r26, 0x45	; 69
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e4       	ldi	r30, 0x45	; 69
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e70:	19 82       	std	Y+1, r1	; 0x01
    1e72:	1c c0       	rjmp	.+56     	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    1e74:	a5 e4       	ldi	r26, 0x45	; 69
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e4       	ldi	r30, 0x45	; 69
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1e82:	a5 e4       	ldi	r26, 0x45	; 69
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e4       	ldi	r30, 0x45	; 69
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	82 60       	ori	r24, 0x02	; 2
    1e8e:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1e90:	a5 e4       	ldi	r26, 0x45	; 69
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e4       	ldi	r30, 0x45	; 69
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	84 60       	ori	r24, 0x04	; 4
    1e9c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	29 96       	adiw	r28, 0x09	; 9
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <enu_SetInterruptMode+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <enu_SetInterruptMode+0x8>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <enu_SetInterruptMode+0xa>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
    1ed2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3e 83       	std	Y+6, r19	; 0x06
    1ee0:	2d 83       	std	Y+5, r18	; 0x05
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	91 05       	cpc	r25, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <enu_SetInterruptMode+0x2e>
    1eec:	78 c0       	rjmp	.+240    	; 0x1fde <enu_SetInterruptMode+0x11e>
    1eee:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef2:	22 30       	cpi	r18, 0x02	; 2
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	a9 f1       	breq	.+106    	; 0x1f62 <enu_SetInterruptMode+0xa2>
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <enu_SetInterruptMode+0x42>
    1f00:	6e c0       	rjmp	.+220    	; 0x1fde <enu_SetInterruptMode+0x11e>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 23       	and	r24, r24
    1f06:	89 f4       	brne	.+34     	; 0x1f2a <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1f08:	a9 e5       	ldi	r26, 0x59	; 89
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e9 e5       	ldi	r30, 0x59	; 89
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8e 7f       	andi	r24, 0xFE	; 254
    1f14:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1f16:	a9 e5       	ldi	r26, 0x59	; 89
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e9 e5       	ldi	r30, 0x59	; 89
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	90 81       	ld	r25, Z
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	89 2b       	or	r24, r25
    1f24:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	5a c0       	rjmp	.+180    	; 0x1fde <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	b1 f4       	brne	.+44     	; 0x1f5c <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    1f30:	a9 e5       	ldi	r26, 0x59	; 89
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e9 e5       	ldi	r30, 0x59	; 89
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8d 7f       	andi	r24, 0xFD	; 253
    1f3c:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    1f3e:	a9 e5       	ldi	r26, 0x59	; 89
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e9 e5       	ldi	r30, 0x59	; 89
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	28 2f       	mov	r18, r24
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	82 2b       	or	r24, r18
    1f56:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	41 c0       	rjmp	.+130    	; 0x1fde <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	3e c0       	rjmp	.+124    	; 0x1fde <enu_SetInterruptMode+0x11e>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	88 23       	and	r24, r24
    1f66:	e9 f4       	brne	.+58     	; 0x1fa2 <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1f68:	a9 e5       	ldi	r26, 0x59	; 89
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e9 e5       	ldi	r30, 0x59	; 89
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8f 7b       	andi	r24, 0xBF	; 191
    1f74:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1f76:	a9 e5       	ldi	r26, 0x59	; 89
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e9 e5       	ldi	r30, 0x59	; 89
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	88 2f       	mov	r24, r24
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	00 24       	eor	r0, r0
    1f8a:	96 95       	lsr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	07 94       	ror	r0
    1f90:	96 95       	lsr	r25
    1f92:	87 95       	ror	r24
    1f94:	07 94       	ror	r0
    1f96:	98 2f       	mov	r25, r24
    1f98:	80 2d       	mov	r24, r0
    1f9a:	82 2b       	or	r24, r18
    1f9c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	1e c0       	rjmp	.+60     	; 0x1fde <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	c9 f4       	brne	.+50     	; 0x1fda <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    1fa8:	a9 e5       	ldi	r26, 0x59	; 89
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e9 e5       	ldi	r30, 0x59	; 89
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 77       	andi	r24, 0x7F	; 127
    1fb4:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    1fb6:	a9 e5       	ldi	r26, 0x59	; 89
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e9 e5       	ldi	r30, 0x59	; 89
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	96 95       	lsr	r25
    1fca:	98 2f       	mov	r25, r24
    1fcc:	88 27       	eor	r24, r24
    1fce:	97 95       	ror	r25
    1fd0:	87 95       	ror	r24
    1fd2:	82 2b       	or	r24, r18
    1fd4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1fd6:	19 82       	std	Y+1, r1	; 0x01
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	89 83       	std	Y+1, r24	; 0x01
        Local_u8_ErrorFlag - ES_OUT_OF_RANGE;
        break;
    }


    return Local_u8_ErrorFlag;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe0:	26 96       	adiw	r28, 0x06	; 6
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <enu_SetOCxBehavior+0x6>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <enu_SetOCxBehavior+0x8>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <enu_SetOCxBehavior+0xa>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	8a 83       	std	Y+2, r24	; 0x02
    2002:	6b 83       	std	Y+3, r22	; 0x03
    2004:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3e 83       	std	Y+6, r19	; 0x06
    2012:	2d 83       	std	Y+5, r18	; 0x05
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <enu_SetOCxBehavior+0x2e>
    201e:	cd c0       	rjmp	.+410    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	31 05       	cpc	r19, r1
    2028:	09 f4       	brne	.+2      	; 0x202c <enu_SetOCxBehavior+0x3a>
    202a:	68 c0       	rjmp	.+208    	; 0x20fc <enu_SetOCxBehavior+0x10a>
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	09 f0       	breq	.+2      	; 0x2036 <enu_SetOCxBehavior+0x44>
    2034:	c0 c0       	rjmp	.+384    	; 0x21b6 <enu_SetOCxBehavior+0x1c4>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    2036:	a3 e5       	ldi	r26, 0x53	; 83
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e3 e5       	ldi	r30, 0x53	; 83
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 7c       	andi	r24, 0xCF	; 207
    2042:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	88 23       	and	r24, r24
    2048:	11 f4       	brne	.+4      	; 0x204e <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    204a:	19 82       	std	Y+1, r1	; 0x01
    204c:	b6 c0       	rjmp	.+364    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	88 23       	and	r24, r24
    2052:	19 f0       	breq	.+6      	; 0x205a <enu_SetOCxBehavior+0x68>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	39 f5       	brne	.+78     	; 0x20a8 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	49 f4       	brne	.+18     	; 0x2072 <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 61       	ori	r24, 0x10	; 16
    206c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    206e:	19 82       	std	Y+1, r1	; 0x01
    2070:	a4 c0       	rjmp	.+328    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	49 f4       	brne	.+18     	; 0x208a <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    2078:	a3 e5       	ldi	r26, 0x53	; 83
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e3 e5       	ldi	r30, 0x53	; 83
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	80 62       	ori	r24, 0x20	; 32
    2084:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2086:	19 82       	std	Y+1, r1	; 0x01
    2088:	98 c0       	rjmp	.+304    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	49 f4       	brne	.+18     	; 0x20a2 <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    2090:	a3 e5       	ldi	r26, 0x53	; 83
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e3 e5       	ldi	r30, 0x53	; 83
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	80 63       	ori	r24, 0x30	; 48
    209c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	8c c0       	rjmp	.+280    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 c0       	rjmp	.+274    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <enu_SetOCxBehavior+0xc2>
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	09 f5       	brne	.+66     	; 0x20f6 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	84 30       	cpi	r24, 0x04	; 4
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <enu_SetOCxBehavior+0xce>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	86 30       	cpi	r24, 0x06	; 6
    20be:	49 f4       	brne	.+18     	; 0x20d2 <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    20c0:	a3 e5       	ldi	r26, 0x53	; 83
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e3 e5       	ldi	r30, 0x53	; 83
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 62       	ori	r24, 0x20	; 32
    20cc:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	74 c0       	rjmp	.+232    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	85 30       	cpi	r24, 0x05	; 5
    20d6:	19 f0       	breq	.+6      	; 0x20de <enu_SetOCxBehavior+0xec>
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	87 30       	cpi	r24, 0x07	; 7
    20dc:	49 f4       	brne	.+18     	; 0x20f0 <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    20de:	a3 e5       	ldi	r26, 0x53	; 83
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e3 e5       	ldi	r30, 0x53	; 83
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 63       	ori	r24, 0x30	; 48
    20ea:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    20ec:	19 82       	std	Y+1, r1	; 0x01
    20ee:	65 c0       	rjmp	.+202    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	62 c0       	rjmp	.+196    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	5f c0       	rjmp	.+190    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    20fc:	a5 e4       	ldi	r26, 0x45	; 69
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e4       	ldi	r30, 0x45	; 69
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 7c       	andi	r24, 0xCF	; 207
    2108:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    210a:	8c 81       	ldd	r24, Y+4	; 0x04
    210c:	88 23       	and	r24, r24
    210e:	11 f4       	brne	.+4      	; 0x2114 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	53 c0       	rjmp	.+166    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	88 23       	and	r24, r24
    2118:	19 f0       	breq	.+6      	; 0x2120 <enu_SetOCxBehavior+0x12e>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	39 f5       	brne	.+78     	; 0x216e <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	49 f4       	brne	.+18     	; 0x2138 <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    2126:	a5 e4       	ldi	r26, 0x45	; 69
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e5 e4       	ldi	r30, 0x45	; 69
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 61       	ori	r24, 0x10	; 16
    2132:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    2134:	19 82       	std	Y+1, r1	; 0x01
    2136:	41 c0       	rjmp	.+130    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	82 30       	cpi	r24, 0x02	; 2
    213c:	49 f4       	brne	.+18     	; 0x2150 <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    213e:	a5 e4       	ldi	r26, 0x45	; 69
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 e4       	ldi	r30, 0x45	; 69
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 62       	ori	r24, 0x20	; 32
    214a:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	35 c0       	rjmp	.+106    	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	49 f4       	brne	.+18     	; 0x2168 <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2156:	a5 e4       	ldi	r26, 0x45	; 69
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e4       	ldi	r30, 0x45	; 69
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 63       	ori	r24, 0x30	; 48
    2162:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    2164:	19 82       	std	Y+1, r1	; 0x01
    2166:	29 c0       	rjmp	.+82     	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	26 c0       	rjmp	.+76     	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	19 f0       	breq	.+6      	; 0x217a <enu_SetOCxBehavior+0x188>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	83 30       	cpi	r24, 0x03	; 3
    2178:	d9 f4       	brne	.+54     	; 0x21b0 <enu_SetOCxBehavior+0x1be>
            {
                //PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING)
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	49 f4       	brne	.+18     	; 0x2192 <enu_SetOCxBehavior+0x1a0>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    2180:	a5 e4       	ldi	r26, 0x45	; 69
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e4       	ldi	r30, 0x45	; 69
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	80 62       	ori	r24, 0x20	; 32
    218c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    218e:	19 82       	std	Y+1, r1	; 0x01
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING)
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	85 30       	cpi	r24, 0x05	; 5
    2196:	49 f4       	brne	.+18     	; 0x21aa <enu_SetOCxBehavior+0x1b8>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    2198:	a5 e4       	ldi	r26, 0x45	; 69
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e4       	ldi	r30, 0x45	; 69
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 63       	ori	r24, 0x30	; 48
    21a4:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    21a6:	19 82       	std	Y+1, r1	; 0x01
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <enu_SetOCxBehavior+0x1c8>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <enu_SetOCxBehavior+0x1c8>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	26 96       	adiw	r28, 0x06	; 6
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    21d6:	78 94       	sei
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    21e6:	f8 94       	cli

    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <EXTI_enu_Initialization+0x6>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    21fe:	19 82       	std	Y+1, r1	; 0x01
    2200:	3b c0       	rjmp	.+118    	; 0x2278 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	c9 01       	movw	r24, r18
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	fc 01       	movw	r30, r24
    2214:	ec 58       	subi	r30, 0x8C	; 140
    2216:	fe 4f       	sbci	r31, 0xFE	; 254
    2218:	40 81       	ld	r20, Z
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	c9 01       	movw	r24, r18
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	fc 01       	movw	r30, r24
    222c:	eb 58       	subi	r30, 0x8B	; 139
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	90 81       	ld	r25, Z
    2232:	84 2f       	mov	r24, r20
    2234:	69 2f       	mov	r22, r25
    2236:	0e 94 bc 12 	call	0x2578	; 0x2578 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	c9 01       	movw	r24, r18
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	82 0f       	add	r24, r18
    2248:	93 1f       	adc	r25, r19
    224a:	fc 01       	movw	r30, r24
    224c:	ec 58       	subi	r30, 0x8C	; 140
    224e:	fe 4f       	sbci	r31, 0xFE	; 254
    2250:	40 81       	ld	r20, Z
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	c9 01       	movw	r24, r18
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	82 0f       	add	r24, r18
    2260:	93 1f       	adc	r25, r19
    2262:	fc 01       	movw	r30, r24
    2264:	ea 58       	subi	r30, 0x8A	; 138
    2266:	fe 4f       	sbci	r31, 0xFE	; 254
    2268:	90 81       	ld	r25, Z
    226a:	84 2f       	mov	r24, r20
    226c:	69 2f       	mov	r22, r25
    226e:	0e 94 37 13 	call	0x266e	; 0x266e <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	90 91 73 01 	lds	r25, 0x0173
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	89 17       	cp	r24, r25
    2280:	08 f4       	brcc	.+2      	; 0x2284 <EXTI_enu_Initialization+0x96>
    2282:	bf cf       	rjmp	.-130    	; 0x2202 <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    2284:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <EXTI_enu_ISC+0x6>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	6b 81       	ldd	r22, Y+3	; 0x03
    22aa:	0e 94 37 13 	call	0x266e	; 0x266e <enu_SetSenseLevel>
    22ae:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <EXTI_enu_INTMode+0x6>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	6b 81       	ldd	r22, Y+3	; 0x03
    22d6:	0e 94 bc 12 	call	0x2578	; 0x2578 <enu_SetMode>
    22da:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <EXTI_enu_GetPIF+0x6>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <EXTI_enu_GetPIF+0x8>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <EXTI_enu_GetPIF+0xa>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	7c 83       	std	Y+4, r23	; 0x04
    22fc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	d1 f1       	breq	.+116    	; 0x237e <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3e 83       	std	Y+6, r19	; 0x06
    2312:	2d 83       	std	Y+5, r18	; 0x05
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	b1 f0       	breq	.+44     	; 0x234a <EXTI_enu_GetPIF+0x60>
    231e:	2d 81       	ldd	r18, Y+5	; 0x05
    2320:	3e 81       	ldd	r19, Y+6	; 0x06
    2322:	22 30       	cpi	r18, 0x02	; 2
    2324:	31 05       	cpc	r19, r1
    2326:	e1 f0       	breq	.+56     	; 0x2360 <EXTI_enu_GetPIF+0x76>
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	21 f5       	brne	.+72     	; 0x2378 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    2330:	ea e5       	ldi	r30, 0x5A	; 90
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	82 95       	swap	r24
    2338:	86 95       	lsr	r24
    233a:	86 95       	lsr	r24
    233c:	83 70       	andi	r24, 0x03	; 3
    233e:	81 70       	andi	r24, 0x01	; 1
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2346:	19 82       	std	Y+1, r1	; 0x01
    2348:	1c c0       	rjmp	.+56     	; 0x2382 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    234a:	ea e5       	ldi	r30, 0x5A	; 90
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	88 1f       	adc	r24, r24
    2352:	88 27       	eor	r24, r24
    2354:	88 1f       	adc	r24, r24
    2356:	eb 81       	ldd	r30, Y+3	; 0x03
    2358:	fc 81       	ldd	r31, Y+4	; 0x04
    235a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	11 c0       	rjmp	.+34     	; 0x2382 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    2360:	ea e5       	ldi	r30, 0x5A	; 90
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	82 95       	swap	r24
    2368:	86 95       	lsr	r24
    236a:	87 70       	andi	r24, 0x07	; 7
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	eb 81       	ldd	r30, Y+3	; 0x03
    2370:	fc 81       	ldd	r31, Y+4	; 0x04
    2372:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2374:	19 82       	std	Y+1, r1	; 0x01
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
}
    2384:	26 96       	adiw	r28, 0x06	; 6
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <EXTI_enu_SeTPIF>:

extern ErrorState_t EXTI_enu_SeTPIF (u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <EXTI_enu_SeTPIF+0x6>
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, Copy_u8_Value);
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	6b 81       	ldd	r22, Y+3	; 0x03
    23ae:	0e 94 de 13 	call	0x27bc	; 0x27bc <enu_SetFlagValue>
    23b2:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <EXTI_enu_SetCallBack+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <EXTI_enu_SetCallBack+0x8>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <EXTI_enu_SetCallBack+0xa>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	7c 83       	std	Y+4, r23	; 0x04
    23d4:	6b 83       	std	Y+3, r22	; 0x03
    23d6:	5e 83       	std	Y+6, r21	; 0x06
    23d8:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	d1 f0       	breq	.+52     	; 0x241a <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	2b 81       	ldd	r18, Y+3	; 0x03
    23ee:	3c 81       	ldd	r19, Y+4	; 0x04
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	e8 53       	subi	r30, 0x38	; 56
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	31 83       	std	Z+1, r19	; 0x01
    23fc:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	fc 01       	movw	r30, r24
    240a:	e2 53       	subi	r30, 0x32	; 50
    240c:	fe 4f       	sbci	r31, 0xFE	; 254
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    2416:	19 82       	std	Y+1, r1	; 0x01
    2418:	02 c0       	rjmp	.+4      	; 0x241e <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    241e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2420:	26 96       	adiw	r28, 0x06	; 6
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	0f 92       	push	r0
    243a:	11 24       	eor	r1, r1
    243c:	2f 93       	push	r18
    243e:	3f 93       	push	r19
    2440:	4f 93       	push	r20
    2442:	5f 93       	push	r21
    2444:	6f 93       	push	r22
    2446:	7f 93       	push	r23
    2448:	8f 93       	push	r24
    244a:	9f 93       	push	r25
    244c:	af 93       	push	r26
    244e:	bf 93       	push	r27
    2450:	ef 93       	push	r30
    2452:	ff 93       	push	r31
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    245c:	80 91 c8 01 	lds	r24, 0x01C8
    2460:	90 91 c9 01 	lds	r25, 0x01C9
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	49 f0       	breq	.+18     	; 0x247a <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    2468:	e0 91 c8 01 	lds	r30, 0x01C8
    246c:	f0 91 c9 01 	lds	r31, 0x01C9
    2470:	80 91 ce 01 	lds	r24, 0x01CE
    2474:	90 91 cf 01 	lds	r25, 0x01CF
    2478:	09 95       	icall
    }
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	ff 91       	pop	r31
    2480:	ef 91       	pop	r30
    2482:	bf 91       	pop	r27
    2484:	af 91       	pop	r26
    2486:	9f 91       	pop	r25
    2488:	8f 91       	pop	r24
    248a:	7f 91       	pop	r23
    248c:	6f 91       	pop	r22
    248e:	5f 91       	pop	r21
    2490:	4f 91       	pop	r20
    2492:	3f 91       	pop	r19
    2494:	2f 91       	pop	r18
    2496:	0f 90       	pop	r0
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	0f 90       	pop	r0
    249c:	1f 90       	pop	r1
    249e:	18 95       	reti

000024a0 <__vector_2>:
//INT1
void __vector_2 (void)
{
    24a0:	1f 92       	push	r1
    24a2:	0f 92       	push	r0
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    24ca:	80 91 ca 01 	lds	r24, 0x01CA
    24ce:	90 91 cb 01 	lds	r25, 0x01CB
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	49 f0       	breq	.+18     	; 0x24e8 <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    24d6:	e0 91 ca 01 	lds	r30, 0x01CA
    24da:	f0 91 cb 01 	lds	r31, 0x01CB
    24de:	80 91 d0 01 	lds	r24, 0x01D0
    24e2:	90 91 d1 01 	lds	r25, 0x01D1
    24e6:	09 95       	icall
    }
}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	7f 91       	pop	r23
    24fa:	6f 91       	pop	r22
    24fc:	5f 91       	pop	r21
    24fe:	4f 91       	pop	r20
    2500:	3f 91       	pop	r19
    2502:	2f 91       	pop	r18
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	1f 90       	pop	r1
    250c:	18 95       	reti

0000250e <__vector_3>:
//INT2
void __vector_3 (void)
{
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    2538:	80 91 cc 01 	lds	r24, 0x01CC
    253c:	90 91 cd 01 	lds	r25, 0x01CD
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	39 f0       	breq	.+14     	; 0x2552 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    2544:	e0 91 cc 01 	lds	r30, 0x01CC
    2548:	f0 91 cd 01 	lds	r31, 0x01CD
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	09 95       	icall
    }
    
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	ff 91       	pop	r31
    2558:	ef 91       	pop	r30
    255a:	bf 91       	pop	r27
    255c:	af 91       	pop	r26
    255e:	9f 91       	pop	r25
    2560:	8f 91       	pop	r24
    2562:	7f 91       	pop	r23
    2564:	6f 91       	pop	r22
    2566:	5f 91       	pop	r21
    2568:	4f 91       	pop	r20
    256a:	3f 91       	pop	r19
    256c:	2f 91       	pop	r18
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <enu_SetMode+0x6>
    257e:	00 d0       	rcall	.+0      	; 0x2580 <enu_SetMode+0x8>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	8a 83       	std	Y+2, r24	; 0x02
    2588:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	3d 83       	std	Y+5, r19	; 0x05
    2596:	2c 83       	std	Y+4, r18	; 0x04
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	9d 81       	ldd	r25, Y+5	; 0x05
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	91 05       	cpc	r25, r1
    25a0:	29 f1       	breq	.+74     	; 0x25ec <enu_SetMode+0x74>
    25a2:	2c 81       	ldd	r18, Y+4	; 0x04
    25a4:	3d 81       	ldd	r19, Y+5	; 0x05
    25a6:	22 30       	cpi	r18, 0x02	; 2
    25a8:	31 05       	cpc	r19, r1
    25aa:	d9 f1       	breq	.+118    	; 0x2622 <enu_SetMode+0xaa>
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	9d 81       	ldd	r25, Y+5	; 0x05
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <enu_SetMode+0x3e>
    25b4:	51 c0       	rjmp	.+162    	; 0x2658 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	49 f4       	brne	.+18     	; 0x25ce <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    25bc:	ab e5       	ldi	r26, 0x5B	; 91
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	eb e5       	ldi	r30, 0x5B	; 91
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 64       	ori	r24, 0x40	; 64
    25c8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    25ca:	19 82       	std	Y+1, r1	; 0x01
    25cc:	47 c0       	rjmp	.+142    	; 0x265c <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	88 23       	and	r24, r24
    25d2:	49 f4       	brne	.+18     	; 0x25e6 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    25d4:	ab e5       	ldi	r26, 0x5B	; 91
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	eb e5       	ldi	r30, 0x5B	; 91
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8f 7b       	andi	r24, 0xBF	; 191
    25e0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	3b c0       	rjmp	.+118    	; 0x265c <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    25e6:	82 e0       	ldi	r24, 0x02	; 2
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	38 c0       	rjmp	.+112    	; 0x265c <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	49 f4       	brne	.+18     	; 0x2604 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    25f2:	ab e5       	ldi	r26, 0x5B	; 91
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	eb e5       	ldi	r30, 0x5B	; 91
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 68       	ori	r24, 0x80	; 128
    25fe:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2600:	19 82       	std	Y+1, r1	; 0x01
    2602:	2c c0       	rjmp	.+88     	; 0x265c <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	88 23       	and	r24, r24
    2608:	49 f4       	brne	.+18     	; 0x261c <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    260a:	ab e5       	ldi	r26, 0x5B	; 91
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	eb e5       	ldi	r30, 0x5B	; 91
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8f 77       	andi	r24, 0x7F	; 127
    2616:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2618:	19 82       	std	Y+1, r1	; 0x01
    261a:	20 c0       	rjmp	.+64     	; 0x265c <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	1d c0       	rjmp	.+58     	; 0x265c <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	49 f4       	brne	.+18     	; 0x263a <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    2628:	ab e5       	ldi	r26, 0x5B	; 91
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	eb e5       	ldi	r30, 0x5B	; 91
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 62       	ori	r24, 0x20	; 32
    2634:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	11 c0       	rjmp	.+34     	; 0x265c <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	88 23       	and	r24, r24
    263e:	49 f4       	brne	.+18     	; 0x2652 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    2640:	ab e5       	ldi	r26, 0x5B	; 91
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	eb e5       	ldi	r30, 0x5B	; 91
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 7d       	andi	r24, 0xDF	; 223
    264c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    264e:	19 82       	std	Y+1, r1	; 0x01
    2650:	05 c0       	rjmp	.+10     	; 0x265c <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	02 c0       	rjmp	.+4      	; 0x265c <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    265c:	89 81       	ldd	r24, Y+1	; 0x01
}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <enu_SetSenseLevel+0x6>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <enu_SetSenseLevel+0x8>
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	3d 83       	std	Y+5, r19	; 0x05
    268c:	2c 83       	std	Y+4, r18	; 0x04
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	91 05       	cpc	r25, r1
    2696:	e9 f1       	breq	.+122    	; 0x2712 <enu_SetSenseLevel+0xa4>
    2698:	2c 81       	ldd	r18, Y+4	; 0x04
    269a:	3d 81       	ldd	r19, Y+5	; 0x05
    269c:	22 30       	cpi	r18, 0x02	; 2
    269e:	31 05       	cpc	r19, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <enu_SetSenseLevel+0x36>
    26a2:	69 c0       	rjmp	.+210    	; 0x2776 <enu_SetSenseLevel+0x108>
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	09 f0       	breq	.+2      	; 0x26ae <enu_SetSenseLevel+0x40>
    26ac:	7c c0       	rjmp	.+248    	; 0x27a6 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    26ae:	a5 e5       	ldi	r26, 0x55	; 85
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e5 e5       	ldi	r30, 0x55	; 85
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8c 7f       	andi	r24, 0xFC	; 252
    26ba:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	88 23       	and	r24, r24
    26c0:	11 f4       	brne	.+4      	; 0x26c6 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	72 c0       	rjmp	.+228    	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	49 f4       	brne	.+18     	; 0x26de <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    26cc:	a5 e5       	ldi	r26, 0x55	; 85
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e5 e5       	ldi	r30, 0x55	; 85
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	81 60       	ori	r24, 0x01	; 1
    26d8:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	66 c0       	rjmp	.+204    	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	41 f4       	brne	.+16     	; 0x26f4 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    26e4:	a5 e5       	ldi	r26, 0x55	; 85
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e5 e5       	ldi	r30, 0x55	; 85
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	82 60       	ori	r24, 0x02	; 2
    26f0:	8c 93       	st	X, r24
    26f2:	5b c0       	rjmp	.+182    	; 0x27aa <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	49 f4       	brne	.+18     	; 0x270c <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    26fa:	a5 e5       	ldi	r26, 0x55	; 85
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e5 e5       	ldi	r30, 0x55	; 85
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	83 60       	ori	r24, 0x03	; 3
    2706:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2708:	19 82       	std	Y+1, r1	; 0x01
    270a:	4f c0       	rjmp	.+158    	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	4c c0       	rjmp	.+152    	; 0x27aa <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    2712:	a5 e5       	ldi	r26, 0x55	; 85
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e5 e5       	ldi	r30, 0x55	; 85
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	83 7f       	andi	r24, 0xF3	; 243
    271e:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	88 23       	and	r24, r24
    2724:	11 f4       	brne	.+4      	; 0x272a <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	40 c0       	rjmp	.+128    	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	49 f4       	brne	.+18     	; 0x2742 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    2730:	a5 e5       	ldi	r26, 0x55	; 85
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e5 e5       	ldi	r30, 0x55	; 85
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	84 60       	ori	r24, 0x04	; 4
    273c:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    273e:	19 82       	std	Y+1, r1	; 0x01
    2740:	34 c0       	rjmp	.+104    	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	41 f4       	brne	.+16     	; 0x2758 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    2748:	a5 e5       	ldi	r26, 0x55	; 85
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e5 e5       	ldi	r30, 0x55	; 85
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	88 60       	ori	r24, 0x08	; 8
    2754:	8c 93       	st	X, r24
    2756:	29 c0       	rjmp	.+82     	; 0x27aa <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	83 30       	cpi	r24, 0x03	; 3
    275c:	49 f4       	brne	.+18     	; 0x2770 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    275e:	a5 e5       	ldi	r26, 0x55	; 85
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e5 e5       	ldi	r30, 0x55	; 85
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	8c 60       	ori	r24, 0x0C	; 12
    276a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    276c:	19 82       	std	Y+1, r1	; 0x01
    276e:	1d c0       	rjmp	.+58     	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	1a c0       	rjmp	.+52     	; 0x27aa <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	82 30       	cpi	r24, 0x02	; 2
    277a:	49 f4       	brne	.+18     	; 0x278e <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    277c:	a4 e5       	ldi	r26, 0x54	; 84
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e4 e5       	ldi	r30, 0x54	; 84
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8f 7b       	andi	r24, 0xBF	; 191
    2788:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	0e c0       	rjmp	.+28     	; 0x27aa <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	83 30       	cpi	r24, 0x03	; 3
    2792:	59 f4       	brne	.+22     	; 0x27aa <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    2794:	a4 e5       	ldi	r26, 0x54	; 84
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e4 e5       	ldi	r30, 0x54	; 84
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	80 64       	ori	r24, 0x40	; 64
    27a0:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <enu_SetFlagValue+0x6>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <enu_SetFlagValue+0x8>
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	3d 83       	std	Y+5, r19	; 0x05
    27da:	2c 83       	std	Y+4, r18	; 0x04
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	9d 81       	ldd	r25, Y+5	; 0x05
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	91 05       	cpc	r25, r1
    27e4:	29 f1       	breq	.+74     	; 0x2830 <enu_SetFlagValue+0x74>
    27e6:	2c 81       	ldd	r18, Y+4	; 0x04
    27e8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	d9 f1       	breq	.+118    	; 0x2866 <enu_SetFlagValue+0xaa>
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	09 f0       	breq	.+2      	; 0x27fa <enu_SetFlagValue+0x3e>
    27f8:	51 c0       	rjmp	.+162    	; 0x289c <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	49 f4       	brne	.+18     	; 0x2812 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    2800:	aa e5       	ldi	r26, 0x5A	; 90
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	ea e5       	ldi	r30, 0x5A	; 90
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	80 64       	ori	r24, 0x40	; 64
    280c:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    280e:	19 82       	std	Y+1, r1	; 0x01
    2810:	47 c0       	rjmp	.+142    	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	88 23       	and	r24, r24
    2816:	49 f4       	brne	.+18     	; 0x282a <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    2818:	aa e5       	ldi	r26, 0x5A	; 90
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ea e5       	ldi	r30, 0x5A	; 90
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8f 7b       	andi	r24, 0xBF	; 191
    2824:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2826:	19 82       	std	Y+1, r1	; 0x01
    2828:	3b c0       	rjmp	.+118    	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	38 c0       	rjmp	.+112    	; 0x28a0 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	49 f4       	brne	.+18     	; 0x2848 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    2836:	aa e5       	ldi	r26, 0x5A	; 90
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ea e5       	ldi	r30, 0x5A	; 90
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 68       	ori	r24, 0x80	; 128
    2842:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2844:	19 82       	std	Y+1, r1	; 0x01
    2846:	2c c0       	rjmp	.+88     	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	88 23       	and	r24, r24
    284c:	49 f4       	brne	.+18     	; 0x2860 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    284e:	aa e5       	ldi	r26, 0x5A	; 90
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	ea e5       	ldi	r30, 0x5A	; 90
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	8f 77       	andi	r24, 0x7F	; 127
    285a:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    285c:	19 82       	std	Y+1, r1	; 0x01
    285e:	20 c0       	rjmp	.+64     	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	1d c0       	rjmp	.+58     	; 0x28a0 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	49 f4       	brne	.+18     	; 0x287e <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    286c:	aa e5       	ldi	r26, 0x5A	; 90
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ea e5       	ldi	r30, 0x5A	; 90
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	80 62       	ori	r24, 0x20	; 32
    2878:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    287a:	19 82       	std	Y+1, r1	; 0x01
    287c:	11 c0       	rjmp	.+34     	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	88 23       	and	r24, r24
    2882:	49 f4       	brne	.+18     	; 0x2896 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    2884:	aa e5       	ldi	r26, 0x5A	; 90
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	ea e5       	ldi	r30, 0x5A	; 90
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8f 7d       	andi	r24, 0xDF	; 223
    2890:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2892:	19 82       	std	Y+1, r1	; 0x01
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	0f 92       	push	r0
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    28c0:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <DIO_enu_SetPinDiretion+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <DIO_enu_SetPinDiretion+0x8>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <DIO_enu_SetPinDiretion+0xa>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	8a 83       	std	Y+2, r24	; 0x02
    28dc:	6b 83       	std	Y+3, r22	; 0x03
    28de:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	84 30       	cpi	r24, 0x04	; 4
    28e8:	08 f0       	brcs	.+2      	; 0x28ec <DIO_enu_SetPinDiretion+0x20>
    28ea:	d0 c0       	rjmp	.+416    	; 0x2a8c <DIO_enu_SetPinDiretion+0x1c0>
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	88 30       	cpi	r24, 0x08	; 8
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <DIO_enu_SetPinDiretion+0x28>
    28f2:	cc c0       	rjmp	.+408    	; 0x2a8c <DIO_enu_SetPinDiretion+0x1c0>
    28f4:	8c 81       	ldd	r24, Y+4	; 0x04
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	08 f0       	brcs	.+2      	; 0x28fc <DIO_enu_SetPinDiretion+0x30>
    28fa:	c8 c0       	rjmp	.+400    	; 0x2a8c <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	3e 83       	std	Y+6, r19	; 0x06
    2904:	2d 83       	std	Y+5, r18	; 0x05
    2906:	6d 81       	ldd	r22, Y+5	; 0x05
    2908:	7e 81       	ldd	r23, Y+6	; 0x06
    290a:	61 30       	cpi	r22, 0x01	; 1
    290c:	71 05       	cpc	r23, r1
    290e:	09 f4       	brne	.+2      	; 0x2912 <DIO_enu_SetPinDiretion+0x46>
    2910:	41 c0       	rjmp	.+130    	; 0x2994 <DIO_enu_SetPinDiretion+0xc8>
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	91 05       	cpc	r25, r1
    291a:	34 f4       	brge	.+12     	; 0x2928 <DIO_enu_SetPinDiretion+0x5c>
    291c:	2d 81       	ldd	r18, Y+5	; 0x05
    291e:	3e 81       	ldd	r19, Y+6	; 0x06
    2920:	21 15       	cp	r18, r1
    2922:	31 05       	cpc	r19, r1
    2924:	71 f0       	breq	.+28     	; 0x2942 <DIO_enu_SetPinDiretion+0x76>
    2926:	b0 c0       	rjmp	.+352    	; 0x2a88 <DIO_enu_SetPinDiretion+0x1bc>
    2928:	6d 81       	ldd	r22, Y+5	; 0x05
    292a:	7e 81       	ldd	r23, Y+6	; 0x06
    292c:	62 30       	cpi	r22, 0x02	; 2
    292e:	71 05       	cpc	r23, r1
    2930:	09 f4       	brne	.+2      	; 0x2934 <DIO_enu_SetPinDiretion+0x68>
    2932:	59 c0       	rjmp	.+178    	; 0x29e6 <DIO_enu_SetPinDiretion+0x11a>
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	83 30       	cpi	r24, 0x03	; 3
    293a:	91 05       	cpc	r25, r1
    293c:	09 f4       	brne	.+2      	; 0x2940 <DIO_enu_SetPinDiretion+0x74>
    293e:	7c c0       	rjmp	.+248    	; 0x2a38 <DIO_enu_SetPinDiretion+0x16c>
    2940:	a3 c0       	rjmp	.+326    	; 0x2a88 <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    2942:	aa e3       	ldi	r26, 0x3A	; 58
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ea e3       	ldi	r30, 0x3A	; 58
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	48 2f       	mov	r20, r24
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	02 c0       	rjmp	.+4      	; 0x295e <DIO_enu_SetPinDiretion+0x92>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	2a 95       	dec	r18
    2960:	e2 f7       	brpl	.-8      	; 0x295a <DIO_enu_SetPinDiretion+0x8e>
    2962:	80 95       	com	r24
    2964:	84 23       	and	r24, r20
    2966:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    2968:	aa e3       	ldi	r26, 0x3A	; 58
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	ea e3       	ldi	r30, 0x3A	; 58
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	b9 01       	movw	r22, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <DIO_enu_SetPinDiretion+0xbc>
    2984:	66 0f       	add	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	8a 95       	dec	r24
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <DIO_enu_SetPinDiretion+0xb8>
    298c:	cb 01       	movw	r24, r22
    298e:	84 2b       	or	r24, r20
    2990:	8c 93       	st	X, r24
    2992:	7a c0       	rjmp	.+244    	; 0x2a88 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    2994:	a7 e3       	ldi	r26, 0x37	; 55
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e7 e3       	ldi	r30, 0x37	; 55
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	48 2f       	mov	r20, r24
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <DIO_enu_SetPinDiretion+0xe4>
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	2a 95       	dec	r18
    29b2:	e2 f7       	brpl	.-8      	; 0x29ac <DIO_enu_SetPinDiretion+0xe0>
    29b4:	80 95       	com	r24
    29b6:	84 23       	and	r24, r20
    29b8:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    29ba:	a7 e3       	ldi	r26, 0x37	; 55
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e7 e3       	ldi	r30, 0x37	; 55
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	48 2f       	mov	r20, r24
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	b9 01       	movw	r22, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <DIO_enu_SetPinDiretion+0x10e>
    29d6:	66 0f       	add	r22, r22
    29d8:	77 1f       	adc	r23, r23
    29da:	8a 95       	dec	r24
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <DIO_enu_SetPinDiretion+0x10a>
    29de:	cb 01       	movw	r24, r22
    29e0:	84 2b       	or	r24, r20
    29e2:	8c 93       	st	X, r24
    29e4:	51 c0       	rjmp	.+162    	; 0x2a88 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    29e6:	a4 e3       	ldi	r26, 0x34	; 52
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e4 e3       	ldi	r30, 0x34	; 52
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	48 2f       	mov	r20, r24
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_enu_SetPinDiretion+0x136>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	2a 95       	dec	r18
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <DIO_enu_SetPinDiretion+0x132>
    2a06:	80 95       	com	r24
    2a08:	84 23       	and	r24, r20
    2a0a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2a0c:	a4 e3       	ldi	r26, 0x34	; 52
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e4 e3       	ldi	r30, 0x34	; 52
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	48 2f       	mov	r20, r24
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	b9 01       	movw	r22, r18
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <DIO_enu_SetPinDiretion+0x160>
    2a28:	66 0f       	add	r22, r22
    2a2a:	77 1f       	adc	r23, r23
    2a2c:	8a 95       	dec	r24
    2a2e:	e2 f7       	brpl	.-8      	; 0x2a28 <DIO_enu_SetPinDiretion+0x15c>
    2a30:	cb 01       	movw	r24, r22
    2a32:	84 2b       	or	r24, r20
    2a34:	8c 93       	st	X, r24
    2a36:	28 c0       	rjmp	.+80     	; 0x2a88 <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    2a38:	a1 e3       	ldi	r26, 0x31	; 49
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e1 e3       	ldi	r30, 0x31	; 49
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	48 2f       	mov	r20, r24
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <DIO_enu_SetPinDiretion+0x188>
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	2a 95       	dec	r18
    2a56:	e2 f7       	brpl	.-8      	; 0x2a50 <DIO_enu_SetPinDiretion+0x184>
    2a58:	80 95       	com	r24
    2a5a:	84 23       	and	r24, r20
    2a5c:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2a5e:	a1 e3       	ldi	r26, 0x31	; 49
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e1 e3       	ldi	r30, 0x31	; 49
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	48 2f       	mov	r20, r24
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	b9 01       	movw	r22, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <DIO_enu_SetPinDiretion+0x1b2>
    2a7a:	66 0f       	add	r22, r22
    2a7c:	77 1f       	adc	r23, r23
    2a7e:	8a 95       	dec	r24
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <DIO_enu_SetPinDiretion+0x1ae>
    2a82:	cb 01       	movw	r24, r22
    2a84:	84 2b       	or	r24, r20
    2a86:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2a88:	19 82       	std	Y+1, r1	; 0x01
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a92:	26 96       	adiw	r28, 0x06	; 6
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <DIO_enu_SetPinState+0x6>
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <DIO_enu_SetPinState+0x8>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <DIO_enu_SetPinState+0xa>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	8a 83       	std	Y+2, r24	; 0x02
    2ab4:	6b 83       	std	Y+3, r22	; 0x03
    2ab6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	84 30       	cpi	r24, 0x04	; 4
    2ac0:	08 f0       	brcs	.+2      	; 0x2ac4 <DIO_enu_SetPinState+0x20>
    2ac2:	d0 c0       	rjmp	.+416    	; 0x2c64 <DIO_enu_SetPinState+0x1c0>
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	88 30       	cpi	r24, 0x08	; 8
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <DIO_enu_SetPinState+0x28>
    2aca:	cc c0       	rjmp	.+408    	; 0x2c64 <DIO_enu_SetPinState+0x1c0>
    2acc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <DIO_enu_SetPinState+0x30>
    2ad2:	c8 c0       	rjmp	.+400    	; 0x2c64 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3e 83       	std	Y+6, r19	; 0x06
    2adc:	2d 83       	std	Y+5, r18	; 0x05
    2ade:	6d 81       	ldd	r22, Y+5	; 0x05
    2ae0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ae2:	61 30       	cpi	r22, 0x01	; 1
    2ae4:	71 05       	cpc	r23, r1
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <DIO_enu_SetPinState+0x46>
    2ae8:	41 c0       	rjmp	.+130    	; 0x2b6c <DIO_enu_SetPinState+0xc8>
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	82 30       	cpi	r24, 0x02	; 2
    2af0:	91 05       	cpc	r25, r1
    2af2:	34 f4       	brge	.+12     	; 0x2b00 <DIO_enu_SetPinState+0x5c>
    2af4:	2d 81       	ldd	r18, Y+5	; 0x05
    2af6:	3e 81       	ldd	r19, Y+6	; 0x06
    2af8:	21 15       	cp	r18, r1
    2afa:	31 05       	cpc	r19, r1
    2afc:	71 f0       	breq	.+28     	; 0x2b1a <DIO_enu_SetPinState+0x76>
    2afe:	b0 c0       	rjmp	.+352    	; 0x2c60 <DIO_enu_SetPinState+0x1bc>
    2b00:	6d 81       	ldd	r22, Y+5	; 0x05
    2b02:	7e 81       	ldd	r23, Y+6	; 0x06
    2b04:	62 30       	cpi	r22, 0x02	; 2
    2b06:	71 05       	cpc	r23, r1
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <DIO_enu_SetPinState+0x68>
    2b0a:	59 c0       	rjmp	.+178    	; 0x2bbe <DIO_enu_SetPinState+0x11a>
    2b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	91 05       	cpc	r25, r1
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <DIO_enu_SetPinState+0x74>
    2b16:	7c c0       	rjmp	.+248    	; 0x2c10 <DIO_enu_SetPinState+0x16c>
    2b18:	a3 c0       	rjmp	.+326    	; 0x2c60 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    2b1a:	ab e3       	ldi	r26, 0x3B	; 59
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	eb e3       	ldi	r30, 0x3B	; 59
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	48 2f       	mov	r20, r24
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <DIO_enu_SetPinState+0x92>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	2a 95       	dec	r18
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <DIO_enu_SetPinState+0x8e>
    2b3a:	80 95       	com	r24
    2b3c:	84 23       	and	r24, r20
    2b3e:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2b40:	ab e3       	ldi	r26, 0x3B	; 59
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	eb e3       	ldi	r30, 0x3B	; 59
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	48 2f       	mov	r20, r24
    2b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	b9 01       	movw	r22, r18
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <DIO_enu_SetPinState+0xbc>
    2b5c:	66 0f       	add	r22, r22
    2b5e:	77 1f       	adc	r23, r23
    2b60:	8a 95       	dec	r24
    2b62:	e2 f7       	brpl	.-8      	; 0x2b5c <DIO_enu_SetPinState+0xb8>
    2b64:	cb 01       	movw	r24, r22
    2b66:	84 2b       	or	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	7a c0       	rjmp	.+244    	; 0x2c60 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    2b6c:	a8 e3       	ldi	r26, 0x38	; 56
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e8 e3       	ldi	r30, 0x38	; 56
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	48 2f       	mov	r20, r24
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <DIO_enu_SetPinState+0xe4>
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	2a 95       	dec	r18
    2b8a:	e2 f7       	brpl	.-8      	; 0x2b84 <DIO_enu_SetPinState+0xe0>
    2b8c:	80 95       	com	r24
    2b8e:	84 23       	and	r24, r20
    2b90:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2b92:	a8 e3       	ldi	r26, 0x38	; 56
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e8 e3       	ldi	r30, 0x38	; 56
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	48 2f       	mov	r20, r24
    2b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	b9 01       	movw	r22, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enu_SetPinState+0x10e>
    2bae:	66 0f       	add	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	8a 95       	dec	r24
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enu_SetPinState+0x10a>
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	84 2b       	or	r24, r20
    2bba:	8c 93       	st	X, r24
    2bbc:	51 c0       	rjmp	.+162    	; 0x2c60 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2bbe:	a5 e3       	ldi	r26, 0x35	; 53
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 e3       	ldi	r30, 0x35	; 53
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	48 2f       	mov	r20, r24
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_enu_SetPinState+0x136>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	2a 95       	dec	r18
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <DIO_enu_SetPinState+0x132>
    2bde:	80 95       	com	r24
    2be0:	84 23       	and	r24, r20
    2be2:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2be4:	a5 e3       	ldi	r26, 0x35	; 53
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e5 e3       	ldi	r30, 0x35	; 53
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	48 2f       	mov	r20, r24
    2bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	b9 01       	movw	r22, r18
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <DIO_enu_SetPinState+0x160>
    2c00:	66 0f       	add	r22, r22
    2c02:	77 1f       	adc	r23, r23
    2c04:	8a 95       	dec	r24
    2c06:	e2 f7       	brpl	.-8      	; 0x2c00 <DIO_enu_SetPinState+0x15c>
    2c08:	cb 01       	movw	r24, r22
    2c0a:	84 2b       	or	r24, r20
    2c0c:	8c 93       	st	X, r24
    2c0e:	28 c0       	rjmp	.+80     	; 0x2c60 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    2c10:	a2 e3       	ldi	r26, 0x32	; 50
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e2 e3       	ldi	r30, 0x32	; 50
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	48 2f       	mov	r20, r24
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DIO_enu_SetPinState+0x188>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	2a 95       	dec	r18
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <DIO_enu_SetPinState+0x184>
    2c30:	80 95       	com	r24
    2c32:	84 23       	and	r24, r20
    2c34:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2c36:	a2 e3       	ldi	r26, 0x32	; 50
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e2 e3       	ldi	r30, 0x32	; 50
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	48 2f       	mov	r20, r24
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	b9 01       	movw	r22, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <DIO_enu_SetPinState+0x1b2>
    2c52:	66 0f       	add	r22, r22
    2c54:	77 1f       	adc	r23, r23
    2c56:	8a 95       	dec	r24
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <DIO_enu_SetPinState+0x1ae>
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	84 2b       	or	r24, r20
    2c5e:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6a:	26 96       	adiw	r28, 0x06	; 6
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <DIO_enu_SetPinValue+0x6>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <DIO_enu_SetPinValue+0x8>
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <DIO_enu_SetPinValue+0xa>
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	8a 83       	std	Y+2, r24	; 0x02
    2c8c:	6b 83       	std	Y+3, r22	; 0x03
    2c8e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	84 30       	cpi	r24, 0x04	; 4
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <DIO_enu_SetPinValue+0x20>
    2c9a:	db c0       	rjmp	.+438    	; 0x2e52 <DIO_enu_SetPinValue+0x1d6>
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	88 30       	cpi	r24, 0x08	; 8
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <DIO_enu_SetPinValue+0x28>
    2ca2:	d7 c0       	rjmp	.+430    	; 0x2e52 <DIO_enu_SetPinValue+0x1d6>
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	82 30       	cpi	r24, 0x02	; 2
    2ca8:	08 f0       	brcs	.+2      	; 0x2cac <DIO_enu_SetPinValue+0x30>
    2caa:	d3 c0       	rjmp	.+422    	; 0x2e52 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3e 83       	std	Y+6, r19	; 0x06
    2cb4:	2d 83       	std	Y+5, r18	; 0x05
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <DIO_enu_SetPinValue+0x46>
    2cc0:	43 c0       	rjmp	.+134    	; 0x2d48 <DIO_enu_SetPinValue+0xcc>
    2cc2:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc4:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	31 05       	cpc	r19, r1
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <DIO_enu_SetPinValue+0x5a>
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	71 f0       	breq	.+28     	; 0x2cf0 <DIO_enu_SetPinValue+0x74>
    2cd4:	bc c0       	rjmp	.+376    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
    2cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cda:	22 30       	cpi	r18, 0x02	; 2
    2cdc:	31 05       	cpc	r19, r1
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <DIO_enu_SetPinValue+0x66>
    2ce0:	5f c0       	rjmp	.+190    	; 0x2da0 <DIO_enu_SetPinValue+0x124>
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	83 30       	cpi	r24, 0x03	; 3
    2ce8:	91 05       	cpc	r25, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <DIO_enu_SetPinValue+0x72>
    2cec:	85 c0       	rjmp	.+266    	; 0x2df8 <DIO_enu_SetPinValue+0x17c>
    2cee:	af c0       	rjmp	.+350    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    2cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	a1 f4       	brne	.+40     	; 0x2d1e <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    2cf6:	ab e3       	ldi	r26, 0x3B	; 59
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	eb e3       	ldi	r30, 0x3B	; 59
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	48 2f       	mov	r20, r24
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	02 2e       	mov	r0, r18
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <DIO_enu_SetPinValue+0x98>
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	0a 94       	dec	r0
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <DIO_enu_SetPinValue+0x94>
    2d18:	84 2b       	or	r24, r20
    2d1a:	8c 93       	st	X, r24
    2d1c:	98 c0       	rjmp	.+304    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    2d1e:	ab e3       	ldi	r26, 0x3B	; 59
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	eb e3       	ldi	r30, 0x3B	; 59
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	48 2f       	mov	r20, r24
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	02 2e       	mov	r0, r18
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <DIO_enu_SetPinValue+0xc0>
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	0a 94       	dec	r0
    2d3e:	e2 f7       	brpl	.-8      	; 0x2d38 <DIO_enu_SetPinValue+0xbc>
    2d40:	80 95       	com	r24
    2d42:	84 23       	and	r24, r20
    2d44:	8c 93       	st	X, r24
    2d46:	83 c0       	rjmp	.+262    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    2d48:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	a1 f4       	brne	.+40     	; 0x2d76 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    2d4e:	a8 e3       	ldi	r26, 0x38	; 56
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e8 e3       	ldi	r30, 0x38	; 56
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	48 2f       	mov	r20, r24
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	02 2e       	mov	r0, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <DIO_enu_SetPinValue+0xf0>
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	0a 94       	dec	r0
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <DIO_enu_SetPinValue+0xec>
    2d70:	84 2b       	or	r24, r20
    2d72:	8c 93       	st	X, r24
    2d74:	6c c0       	rjmp	.+216    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2d76:	a8 e3       	ldi	r26, 0x38	; 56
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e8 e3       	ldi	r30, 0x38	; 56
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	48 2f       	mov	r20, r24
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 2e       	mov	r0, r18
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <DIO_enu_SetPinValue+0x118>
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	0a 94       	dec	r0
    2d96:	e2 f7       	brpl	.-8      	; 0x2d90 <DIO_enu_SetPinValue+0x114>
    2d98:	80 95       	com	r24
    2d9a:	84 23       	and	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	57 c0       	rjmp	.+174    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2da0:	8c 81       	ldd	r24, Y+4	; 0x04
    2da2:	81 30       	cpi	r24, 0x01	; 1
    2da4:	a1 f4       	brne	.+40     	; 0x2dce <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2da6:	a5 e3       	ldi	r26, 0x35	; 53
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e5 e3       	ldi	r30, 0x35	; 53
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	48 2f       	mov	r20, r24
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	02 2e       	mov	r0, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <DIO_enu_SetPinValue+0x148>
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	0a 94       	dec	r0
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <DIO_enu_SetPinValue+0x144>
    2dc8:	84 2b       	or	r24, r20
    2dca:	8c 93       	st	X, r24
    2dcc:	40 c0       	rjmp	.+128    	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2dce:	a5 e3       	ldi	r26, 0x35	; 53
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e5 e3       	ldi	r30, 0x35	; 53
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	48 2f       	mov	r20, r24
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	02 2e       	mov	r0, r18
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <DIO_enu_SetPinValue+0x170>
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	0a 94       	dec	r0
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <DIO_enu_SetPinValue+0x16c>
    2df0:	80 95       	com	r24
    2df2:	84 23       	and	r24, r20
    2df4:	8c 93       	st	X, r24
    2df6:	2b c0       	rjmp	.+86     	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    2df8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	a1 f4       	brne	.+40     	; 0x2e26 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    2dfe:	a2 e3       	ldi	r26, 0x32	; 50
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e2 e3       	ldi	r30, 0x32	; 50
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	48 2f       	mov	r20, r24
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	02 2e       	mov	r0, r18
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <DIO_enu_SetPinValue+0x1a0>
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	0a 94       	dec	r0
    2e1e:	e2 f7       	brpl	.-8      	; 0x2e18 <DIO_enu_SetPinValue+0x19c>
    2e20:	84 2b       	or	r24, r20
    2e22:	8c 93       	st	X, r24
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    2e26:	a2 e3       	ldi	r26, 0x32	; 50
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e2 e3       	ldi	r30, 0x32	; 50
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	48 2f       	mov	r20, r24
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	02 2e       	mov	r0, r18
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <DIO_enu_SetPinValue+0x1c8>
    2e40:	88 0f       	add	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	0a 94       	dec	r0
    2e46:	e2 f7       	brpl	.-8      	; 0x2e40 <DIO_enu_SetPinValue+0x1c4>
    2e48:	80 95       	com	r24
    2e4a:	84 23       	and	r24, r20
    2e4c:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2e4e:	19 82       	std	Y+1, r1	; 0x01
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e58:	26 96       	adiw	r28, 0x06	; 6
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <DIO_enu_TogglePinValue+0x6>
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <DIO_enu_TogglePinValue+0x8>
    2e72:	0f 92       	push	r0
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    2e7a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	84 30       	cpi	r24, 0x04	; 4
    2e84:	08 f0       	brcs	.+2      	; 0x2e88 <DIO_enu_TogglePinValue+0x1e>
    2e86:	73 c0       	rjmp	.+230    	; 0x2f6e <DIO_enu_TogglePinValue+0x104>
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	88 30       	cpi	r24, 0x08	; 8
    2e8c:	08 f0       	brcs	.+2      	; 0x2e90 <DIO_enu_TogglePinValue+0x26>
    2e8e:	6f c0       	rjmp	.+222    	; 0x2f6e <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	3d 83       	std	Y+5, r19	; 0x05
    2e98:	2c 83       	std	Y+4, r18	; 0x04
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	49 f1       	breq	.+82     	; 0x2ef6 <DIO_enu_TogglePinValue+0x8c>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <DIO_enu_TogglePinValue+0x4e>
    2eae:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	61 f0       	breq	.+24     	; 0x2ece <DIO_enu_TogglePinValue+0x64>
    2eb6:	5a c0       	rjmp	.+180    	; 0x2f6c <DIO_enu_TogglePinValue+0x102>
    2eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eba:	3d 81       	ldd	r19, Y+5	; 0x05
    2ebc:	22 30       	cpi	r18, 0x02	; 2
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	71 f1       	breq	.+92     	; 0x2f1e <DIO_enu_TogglePinValue+0xb4>
    2ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec6:	83 30       	cpi	r24, 0x03	; 3
    2ec8:	91 05       	cpc	r25, r1
    2eca:	e9 f1       	breq	.+122    	; 0x2f46 <DIO_enu_TogglePinValue+0xdc>
    2ecc:	4f c0       	rjmp	.+158    	; 0x2f6c <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2ece:	ab e3       	ldi	r26, 0x3B	; 59
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	eb e3       	ldi	r30, 0x3B	; 59
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	48 2f       	mov	r20, r24
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	02 2e       	mov	r0, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <DIO_enu_TogglePinValue+0x82>
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	0a 94       	dec	r0
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <DIO_enu_TogglePinValue+0x7e>
    2ef0:	84 27       	eor	r24, r20
    2ef2:	8c 93       	st	X, r24
    2ef4:	3b c0       	rjmp	.+118    	; 0x2f6c <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    2ef6:	a8 e3       	ldi	r26, 0x38	; 56
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e8 e3       	ldi	r30, 0x38	; 56
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	48 2f       	mov	r20, r24
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	02 2e       	mov	r0, r18
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <DIO_enu_TogglePinValue+0xaa>
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	0a 94       	dec	r0
    2f16:	e2 f7       	brpl	.-8      	; 0x2f10 <DIO_enu_TogglePinValue+0xa6>
    2f18:	84 27       	eor	r24, r20
    2f1a:	8c 93       	st	X, r24
    2f1c:	27 c0       	rjmp	.+78     	; 0x2f6c <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    2f1e:	a5 e3       	ldi	r26, 0x35	; 53
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e3       	ldi	r30, 0x35	; 53
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	48 2f       	mov	r20, r24
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	02 2e       	mov	r0, r18
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <DIO_enu_TogglePinValue+0xd2>
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	0a 94       	dec	r0
    2f3e:	e2 f7       	brpl	.-8      	; 0x2f38 <DIO_enu_TogglePinValue+0xce>
    2f40:	84 27       	eor	r24, r20
    2f42:	8c 93       	st	X, r24
    2f44:	13 c0       	rjmp	.+38     	; 0x2f6c <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    2f46:	a2 e3       	ldi	r26, 0x32	; 50
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e2 e3       	ldi	r30, 0x32	; 50
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	48 2f       	mov	r20, r24
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	02 2e       	mov	r0, r18
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <DIO_enu_TogglePinValue+0xfa>
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	0a 94       	dec	r0
    2f66:	e2 f7       	brpl	.-8      	; 0x2f60 <DIO_enu_TogglePinValue+0xf6>
    2f68:	84 27       	eor	r24, r20
    2f6a:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	27 97       	sbiw	r28, 0x07	; 7
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	8a 83       	std	Y+2, r24	; 0x02
    2f96:	6b 83       	std	Y+3, r22	; 0x03
    2f98:	5d 83       	std	Y+5, r21	; 0x05
    2f9a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <DIO_enu_GetPinValue+0x2a>
    2fa8:	7d c0       	rjmp	.+250    	; 0x30a4 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	84 30       	cpi	r24, 0x04	; 4
    2fae:	08 f0       	brcs	.+2      	; 0x2fb2 <DIO_enu_GetPinValue+0x32>
    2fb0:	76 c0       	rjmp	.+236    	; 0x309e <DIO_enu_GetPinValue+0x11e>
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	88 30       	cpi	r24, 0x08	; 8
    2fb6:	08 f0       	brcs	.+2      	; 0x2fba <DIO_enu_GetPinValue+0x3a>
    2fb8:	72 c0       	rjmp	.+228    	; 0x309e <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	3f 83       	std	Y+7, r19	; 0x07
    2fc2:	2e 83       	std	Y+6, r18	; 0x06
    2fc4:	4e 81       	ldd	r20, Y+6	; 0x06
    2fc6:	5f 81       	ldd	r21, Y+7	; 0x07
    2fc8:	41 30       	cpi	r20, 0x01	; 1
    2fca:	51 05       	cpc	r21, r1
    2fcc:	59 f1       	breq	.+86     	; 0x3024 <DIO_enu_GetPinValue+0xa4>
    2fce:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd2:	82 30       	cpi	r24, 0x02	; 2
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	34 f4       	brge	.+12     	; 0x2fe4 <DIO_enu_GetPinValue+0x64>
    2fd8:	2e 81       	ldd	r18, Y+6	; 0x06
    2fda:	3f 81       	ldd	r19, Y+7	; 0x07
    2fdc:	21 15       	cp	r18, r1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	69 f0       	breq	.+26     	; 0x2ffc <DIO_enu_GetPinValue+0x7c>
    2fe2:	5b c0       	rjmp	.+182    	; 0x309a <DIO_enu_GetPinValue+0x11a>
    2fe4:	4e 81       	ldd	r20, Y+6	; 0x06
    2fe6:	5f 81       	ldd	r21, Y+7	; 0x07
    2fe8:	42 30       	cpi	r20, 0x02	; 2
    2fea:	51 05       	cpc	r21, r1
    2fec:	79 f1       	breq	.+94     	; 0x304c <DIO_enu_GetPinValue+0xcc>
    2fee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff2:	83 30       	cpi	r24, 0x03	; 3
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <DIO_enu_GetPinValue+0x7a>
    2ff8:	3d c0       	rjmp	.+122    	; 0x3074 <DIO_enu_GetPinValue+0xf4>
    2ffa:	4f c0       	rjmp	.+158    	; 0x309a <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    2ffc:	e9 e3       	ldi	r30, 0x39	; 57
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a9 01       	movw	r20, r18
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <DIO_enu_GetPinValue+0x94>
    3010:	55 95       	asr	r21
    3012:	47 95       	ror	r20
    3014:	8a 95       	dec	r24
    3016:	e2 f7       	brpl	.-8      	; 0x3010 <DIO_enu_GetPinValue+0x90>
    3018:	ca 01       	movw	r24, r20
    301a:	81 70       	andi	r24, 0x01	; 1
    301c:	ec 81       	ldd	r30, Y+4	; 0x04
    301e:	fd 81       	ldd	r31, Y+5	; 0x05
    3020:	80 83       	st	Z, r24
    3022:	3b c0       	rjmp	.+118    	; 0x309a <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    3024:	e6 e3       	ldi	r30, 0x36	; 54
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	88 2f       	mov	r24, r24
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	a9 01       	movw	r20, r18
    3036:	02 c0       	rjmp	.+4      	; 0x303c <DIO_enu_GetPinValue+0xbc>
    3038:	55 95       	asr	r21
    303a:	47 95       	ror	r20
    303c:	8a 95       	dec	r24
    303e:	e2 f7       	brpl	.-8      	; 0x3038 <DIO_enu_GetPinValue+0xb8>
    3040:	ca 01       	movw	r24, r20
    3042:	81 70       	andi	r24, 0x01	; 1
    3044:	ec 81       	ldd	r30, Y+4	; 0x04
    3046:	fd 81       	ldd	r31, Y+5	; 0x05
    3048:	80 83       	st	Z, r24
    304a:	27 c0       	rjmp	.+78     	; 0x309a <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    304c:	e3 e3       	ldi	r30, 0x33	; 51
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a9 01       	movw	r20, r18
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <DIO_enu_GetPinValue+0xe4>
    3060:	55 95       	asr	r21
    3062:	47 95       	ror	r20
    3064:	8a 95       	dec	r24
    3066:	e2 f7       	brpl	.-8      	; 0x3060 <DIO_enu_GetPinValue+0xe0>
    3068:	ca 01       	movw	r24, r20
    306a:	81 70       	andi	r24, 0x01	; 1
    306c:	ec 81       	ldd	r30, Y+4	; 0x04
    306e:	fd 81       	ldd	r31, Y+5	; 0x05
    3070:	80 83       	st	Z, r24
    3072:	13 c0       	rjmp	.+38     	; 0x309a <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    3074:	e0 e3       	ldi	r30, 0x30	; 48
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a9 01       	movw	r20, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <DIO_enu_GetPinValue+0x10c>
    3088:	55 95       	asr	r21
    308a:	47 95       	ror	r20
    308c:	8a 95       	dec	r24
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <DIO_enu_GetPinValue+0x108>
    3090:	ca 01       	movw	r24, r20
    3092:	81 70       	andi	r24, 0x01	; 1
    3094:	ec 81       	ldd	r30, Y+4	; 0x04
    3096:	fd 81       	ldd	r31, Y+5	; 0x05
    3098:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    309a:	19 82       	std	Y+1, r1	; 0x01
    309c:	05 c0       	rjmp	.+10     	; 0x30a8 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	89 83       	std	Y+1, r24	; 0x01
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30aa:	27 96       	adiw	r28, 0x07	; 7
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    30ca:	a7 e2       	ldi	r26, 0x27	; 39
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e7 e2       	ldi	r30, 0x27	; 39
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	8f 73       	andi	r24, 0x3F	; 63
    30d6:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    30d8:	a7 e2       	ldi	r26, 0x27	; 39
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e7 e2       	ldi	r30, 0x27	; 39
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	81 60       	ori	r24, 0x01	; 1
    30e4:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    30e6:	a7 e2       	ldi	r26, 0x27	; 39
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e7 e2       	ldi	r30, 0x27	; 39
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	80 62       	ori	r24, 0x20	; 32
    30f2:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    30f4:	a0 e5       	ldi	r26, 0x50	; 80
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e0 e5       	ldi	r30, 0x50	; 80
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 71       	andi	r24, 0x1F	; 31
    3100:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    3102:	a0 e5       	ldi	r26, 0x50	; 80
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e0 e5       	ldi	r30, 0x50	; 80
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    310e:	a6 e2       	ldi	r26, 0x26	; 38
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e6 e2       	ldi	r30, 0x26	; 38
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	80 62       	ori	r24, 0x20	; 32
    311a:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    311c:	a6 e2       	ldi	r26, 0x26	; 38
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e6 e2       	ldi	r30, 0x26	; 38
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	88 60       	ori	r24, 0x08	; 8
    3128:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    312a:	a6 e2       	ldi	r26, 0x26	; 38
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e6 e2       	ldi	r30, 0x26	; 38
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	88 7f       	andi	r24, 0xF8	; 248
    3136:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    3138:	a6 e2       	ldi	r26, 0x26	; 38
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e6 e2       	ldi	r30, 0x26	; 38
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	86 60       	ori	r24, 0x06	; 6
    3144:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    3146:	a7 e2       	ldi	r26, 0x27	; 39
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e7 e2       	ldi	r30, 0x27	; 39
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	80 7e       	andi	r24, 0xE0	; 224
    3152:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    3154:	a7 e2       	ldi	r26, 0x27	; 39
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e7 e2       	ldi	r30, 0x27	; 39
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    3160:	a6 e2       	ldi	r26, 0x26	; 38
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e6 e2       	ldi	r30, 0x26	; 38
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    316e:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    3170:	89 81       	ldd	r24, Y+1	; 0x01
}
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <ADC_enu_ReadPolling+0x6>
    3180:	00 d0       	rcall	.+0      	; 0x3182 <ADC_enu_ReadPolling+0x8>
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	8a 83       	std	Y+2, r24	; 0x02
    3188:	7c 83       	std	Y+4, r23	; 0x04
    318a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	80 32       	cpi	r24, 0x20	; 32
    3194:	08 f0       	brcs	.+2      	; 0x3198 <ADC_enu_ReadPolling+0x1e>
    3196:	50 c0       	rjmp	.+160    	; 0x3238 <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    3198:	a6 e2       	ldi	r26, 0x26	; 38
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e6 e2       	ldi	r30, 0x26	; 38
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	80 61       	ori	r24, 0x10	; 16
    31a4:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    31a6:	a7 e2       	ldi	r26, 0x27	; 39
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e7 e2       	ldi	r30, 0x27	; 39
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 7e       	andi	r24, 0xE0	; 224
    31b2:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    31b4:	a7 e2       	ldi	r26, 0x27	; 39
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e7 e2       	ldi	r30, 0x27	; 39
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	90 81       	ld	r25, Z
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	89 2b       	or	r24, r25
    31c2:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    31c4:	a6 e2       	ldi	r26, 0x26	; 38
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e6 e2       	ldi	r30, 0x26	; 38
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	80 64       	ori	r24, 0x40	; 64
    31d0:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    31d2:	e6 e2       	ldi	r30, 0x26	; 38
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	82 95       	swap	r24
    31da:	8f 70       	andi	r24, 0x0F	; 15
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	81 70       	andi	r24, 0x01	; 1
    31e2:	90 70       	andi	r25, 0x00	; 0
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	a9 f3       	breq	.-22     	; 0x31d2 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    31e8:	e4 e2       	ldi	r30, 0x24	; 36
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	82 95       	swap	r24
    31f0:	86 95       	lsr	r24
    31f2:	86 95       	lsr	r24
    31f4:	83 70       	andi	r24, 0x03	; 3
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	eb 81       	ldd	r30, Y+3	; 0x03
    31fc:	fc 81       	ldd	r31, Y+4	; 0x04
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    3202:	eb 81       	ldd	r30, Y+3	; 0x03
    3204:	fc 81       	ldd	r31, Y+4	; 0x04
    3206:	20 81       	ld	r18, Z
    3208:	31 81       	ldd	r19, Z+1	; 0x01
    320a:	e5 e2       	ldi	r30, 0x25	; 37
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	88 2f       	mov	r24, r24
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	82 2b       	or	r24, r18
    321e:	93 2b       	or	r25, r19
    3220:	eb 81       	ldd	r30, Y+3	; 0x03
    3222:	fc 81       	ldd	r31, Y+4	; 0x04
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    3228:	a6 e2       	ldi	r26, 0x26	; 38
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	e6 e2       	ldi	r30, 0x26	; 38
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	80 61       	ori	r24, 0x10	; 16
    3234:	8c 93       	st	X, r24
    3236:	02 c0       	rjmp	.+4      	; 0x323c <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    323c:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    323e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	0f 92       	push	r0
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    325c:	a6 e2       	ldi	r26, 0x26	; 38
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e6 e2       	ldi	r30, 0x26	; 38
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	80 64       	ori	r24, 0x40	; 64
    3268:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    326a:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
}
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <ADC_enu_SetTriggerringSource+0x6>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	88 30       	cpi	r24, 0x08	; 8
    328a:	49 f4       	brne	.+18     	; 0x329e <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    328c:	a6 e2       	ldi	r26, 0x26	; 38
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e6 e2       	ldi	r30, 0x26	; 38
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	8f 7d       	andi	r24, 0xDF	; 223
    3298:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    329a:	19 82       	std	Y+1, r1	; 0x01
    329c:	28 c0       	rjmp	.+80     	; 0x32ee <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	88 30       	cpi	r24, 0x08	; 8
    32a2:	18 f5       	brcc	.+70     	; 0x32ea <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    32a4:	a0 e5       	ldi	r26, 0x50	; 80
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e0 e5       	ldi	r30, 0x50	; 80
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8f 7d       	andi	r24, 0xDF	; 223
    32b0:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    32b2:	a0 e5       	ldi	r26, 0x50	; 80
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e0 e5       	ldi	r30, 0x50	; 80
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	28 2f       	mov	r18, r24
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	88 2f       	mov	r24, r24
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	82 95       	swap	r24
    32ca:	92 95       	swap	r25
    32cc:	90 7f       	andi	r25, 0xF0	; 240
    32ce:	98 27       	eor	r25, r24
    32d0:	80 7f       	andi	r24, 0xF0	; 240
    32d2:	98 27       	eor	r25, r24
    32d4:	82 2b       	or	r24, r18
    32d6:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    32d8:	a6 e2       	ldi	r26, 0x26	; 38
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e6 e2       	ldi	r30, 0x26	; 38
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	80 62       	ori	r24, 0x20	; 32
    32e4:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    32e6:	19 82       	std	Y+1, r1	; 0x01
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    32ea:	82 e0       	ldi	r24, 0x02	; 2
    32ec:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <ADC_enu_ChangePrescalerFactor+0x6>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	88 23       	and	r24, r24
    330e:	a1 f0       	breq	.+40     	; 0x3338 <ADC_enu_ChangePrescalerFactor+0x3e>
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	88 30       	cpi	r24, 0x08	; 8
    3314:	88 f4       	brcc	.+34     	; 0x3338 <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    3316:	a6 e2       	ldi	r26, 0x26	; 38
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e6 e2       	ldi	r30, 0x26	; 38
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	88 7f       	andi	r24, 0xF8	; 248
    3322:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    3324:	a6 e2       	ldi	r26, 0x26	; 38
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e6 e2       	ldi	r30, 0x26	; 38
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	90 81       	ld	r25, Z
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	89 2b       	or	r24, r25
    3332:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    3334:	19 82       	std	Y+1, r1	; 0x01
    3336:	02 c0       	rjmp	.+4      	; 0x333c <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    333c:	89 81       	ldd	r24, Y+1	; 0x01
}
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <ADC_enu_ReadADCH+0x6>
    334e:	0f 92       	push	r0
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	9b 83       	std	Y+3, r25	; 0x03
    3356:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	79 f0       	breq	.+30     	; 0x3382 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    3364:	e5 e2       	ldi	r30, 0x25	; 37
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	88 2f       	mov	r24, r24
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	ea 81       	ldd	r30, Y+2	; 0x02
    3378:	fb 81       	ldd	r31, Y+3	; 0x03
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    337e:	19 82       	std	Y+1, r1	; 0x01
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3386:	89 81       	ldd	r24, Y+1	; 0x01
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	00 d0       	rcall	.+0      	; 0x339a <ADC_enu_ReadADCL+0x6>
    339a:	0f 92       	push	r0
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	9b 83       	std	Y+3, r25	; 0x03
    33a2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	11 f0       	breq	.+4      	; 0x33b4 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    33b0:	19 82       	std	Y+1, r1	; 0x01
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <ADC_enu_ReadData+0x6>
    33cc:	0f 92       	push	r0
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	9b 83       	std	Y+3, r25	; 0x03
    33d4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	9b 81       	ldd	r25, Y+3	; 0x03
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	11 f1       	breq	.+68     	; 0x3426 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    33e2:	e4 e2       	ldi	r30, 0x24	; 36
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	82 95       	swap	r24
    33ea:	86 95       	lsr	r24
    33ec:	86 95       	lsr	r24
    33ee:	83 70       	andi	r24, 0x03	; 3
    33f0:	88 2f       	mov	r24, r24
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	ea 81       	ldd	r30, Y+2	; 0x02
    33f6:	fb 81       	ldd	r31, Y+3	; 0x03
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    33fc:	ea 81       	ldd	r30, Y+2	; 0x02
    33fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3400:	20 81       	ld	r18, Z
    3402:	31 81       	ldd	r19, Z+1	; 0x01
    3404:	e5 e2       	ldi	r30, 0x25	; 37
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	88 2f       	mov	r24, r24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	82 2b       	or	r24, r18
    3418:	93 2b       	or	r25, r19
    341a:	ea 81       	ldd	r30, Y+2	; 0x02
    341c:	fb 81       	ldd	r31, Y+3	; 0x03
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    3422:	19 82       	std	Y+1, r1	; 0x01
    3424:	02 c0       	rjmp	.+4      	; 0x342a <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	0f 92       	push	r0
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    3446:	a6 e2       	ldi	r26, 0x26	; 38
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e6 e2       	ldi	r30, 0x26	; 38
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	88 60       	ori	r24, 0x08	; 8
    3452:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3454:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
}
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	0f 92       	push	r0
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    346e:	a6 e2       	ldi	r26, 0x26	; 38
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	e6 e2       	ldi	r30, 0x26	; 38
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	87 7f       	andi	r24, 0xF7	; 247
    347a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    347c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	0f 92       	push	r0
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    3496:	a6 e2       	ldi	r26, 0x26	; 38
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e6 e2       	ldi	r30, 0x26	; 38
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	80 68       	ori	r24, 0x80	; 128
    34a2:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    34a4:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    34a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	0f 92       	push	r0
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    34be:	a6 e2       	ldi	r26, 0x26	; 38
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e6 e2       	ldi	r30, 0x26	; 38
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	8f 77       	andi	r24, 0x7F	; 127
    34ca:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    34cc:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    34ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    34d0:	0f 90       	pop	r0
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	00 d0       	rcall	.+0      	; 0x34de <ADC_enu_SetCallBack+0x6>
    34de:	00 d0       	rcall	.+0      	; 0x34e0 <ADC_enu_SetCallBack+0x8>
    34e0:	0f 92       	push	r0
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9b 83       	std	Y+3, r25	; 0x03
    34e8:	8a 83       	std	Y+2, r24	; 0x02
    34ea:	7d 83       	std	Y+5, r23	; 0x05
    34ec:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	9b 81       	ldd	r25, Y+3	; 0x03
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	69 f0       	breq	.+26     	; 0x3514 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	9b 81       	ldd	r25, Y+3	; 0x03
    34fe:	90 93 d5 01 	sts	0x01D5, r25
    3502:	80 93 d4 01 	sts	0x01D4, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	9d 81       	ldd	r25, Y+5	; 0x05
    350a:	90 93 d7 01 	sts	0x01D7, r25
    350e:	80 93 d6 01 	sts	0x01D6, r24
        
        Local_u8_ErrorFlag = ES_OK;
    3512:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    3526:	1f 92       	push	r1
    3528:	0f 92       	push	r0
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	0f 92       	push	r0
    352e:	11 24       	eor	r1, r1
    3530:	2f 93       	push	r18
    3532:	3f 93       	push	r19
    3534:	4f 93       	push	r20
    3536:	5f 93       	push	r21
    3538:	6f 93       	push	r22
    353a:	7f 93       	push	r23
    353c:	8f 93       	push	r24
    353e:	9f 93       	push	r25
    3540:	af 93       	push	r26
    3542:	bf 93       	push	r27
    3544:	ef 93       	push	r30
    3546:	ff 93       	push	r31
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    3550:	80 91 d4 01 	lds	r24, 0x01D4
    3554:	90 91 d5 01 	lds	r25, 0x01D5
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	49 f0       	breq	.+18     	; 0x356e <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    355c:	e0 91 d4 01 	lds	r30, 0x01D4
    3560:	f0 91 d5 01 	lds	r31, 0x01D5
    3564:	80 91 d6 01 	lds	r24, 0x01D6
    3568:	90 91 d7 01 	lds	r25, 0x01D7
    356c:	09 95       	icall
    }
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <SW_enu_Initialization>:
extern Switch_t SW_astr_SwList [];
extern u8 SW_u8_SwCount;

//Functions' implementations
extern ErrorState_t SW_enu_Initialization(void)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	00 d0       	rcall	.+0      	; 0x359a <SW_enu_Initialization+0x6>
    359a:	00 d0       	rcall	.+0      	; 0x359c <SW_enu_Initialization+0x8>
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    35a0:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};
    35a2:	1b 82       	std	Y+3, r1	; 0x03
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	8c 83       	std	Y+4, r24	; 0x04

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    35a8:	19 82       	std	Y+1, r1	; 0x01
    35aa:	53 c0       	rjmp	.+166    	; 0x3652 <SW_enu_Initialization+0xbe>
    {
        
       Local_au8_ErrorStates[0] = DIO_enu_SetPinDiretion(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,DIO_LOW);
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	c9 01       	movw	r24, r18
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	82 0f       	add	r24, r18
    35ba:	93 1f       	adc	r25, r19
    35bc:	fc 01       	movw	r30, r24
    35be:	e8 58       	subi	r30, 0x88	; 136
    35c0:	fe 4f       	sbci	r31, 0xFE	; 254
    35c2:	40 81       	ld	r20, Z
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	c9 01       	movw	r24, r18
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	fc 01       	movw	r30, r24
    35d6:	e7 58       	subi	r30, 0x87	; 135
    35d8:	fe 4f       	sbci	r31, 0xFE	; 254
    35da:	90 81       	ld	r25, Z
    35dc:	84 2f       	mov	r24, r20
    35de:	69 2f       	mov	r22, r25
    35e0:	40 e0       	ldi	r20, 0x00	; 0
    35e2:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    35e6:	8b 83       	std	Y+3, r24	; 0x03

       Local_au8_ErrorStates[1] = DIO_enu_SetPinState(SW_astr_SwList[Local_u8_Index].SW_Group,SW_astr_SwList[Local_u8_Index].SW_Pin,SW_astr_SwList[Local_u8_Index].SW_IResistorState);
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	c9 01       	movw	r24, r18
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	82 0f       	add	r24, r18
    35f6:	93 1f       	adc	r25, r19
    35f8:	fc 01       	movw	r30, r24
    35fa:	e8 58       	subi	r30, 0x88	; 136
    35fc:	fe 4f       	sbci	r31, 0xFE	; 254
    35fe:	50 81       	ld	r21, Z
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	c9 01       	movw	r24, r18
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	fc 01       	movw	r30, r24
    3612:	e7 58       	subi	r30, 0x87	; 135
    3614:	fe 4f       	sbci	r31, 0xFE	; 254
    3616:	40 81       	ld	r20, Z
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	c9 01       	movw	r24, r18
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	82 0f       	add	r24, r18
    3626:	93 1f       	adc	r25, r19
    3628:	fc 01       	movw	r30, r24
    362a:	e6 58       	subi	r30, 0x86	; 134
    362c:	fe 4f       	sbci	r31, 0xFE	; 254
    362e:	90 81       	ld	r25, Z
    3630:	85 2f       	mov	r24, r21
    3632:	64 2f       	mov	r22, r20
    3634:	49 2f       	mov	r20, r25
    3636:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <DIO_enu_SetPinState>
    363a:	8c 83       	std	Y+4, r24	; 0x04
   
        if((Local_au8_ErrorStates[0] == ES_NOK ) || (Local_au8_ErrorStates[1] == ES_NOK) )
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	19 f0       	breq	.+6      	; 0x3648 <SW_enu_Initialization+0xb4>
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	11 f4       	brne	.+4      	; 0x364c <SW_enu_Initialization+0xb8>
        {
            Local_u8_ErrorFlag = ES_NOK;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	8a 83       	std	Y+2, r24	; 0x02
{
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Index;
    u8 Local_au8_ErrorStates [2] ={ES_OK, ES_NOK};

    for (Local_u8_Index = 0; Local_u8_Index < SW_u8_SwCount; Local_u8_Index++)
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	8f 5f       	subi	r24, 0xFF	; 255
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	90 91 77 01 	lds	r25, 0x0177
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	89 17       	cp	r24, r25
    365a:	08 f4       	brcc	.+2      	; 0x365e <SW_enu_Initialization+0xca>
    365c:	a7 cf       	rjmp	.-178    	; 0x35ac <SW_enu_Initialization+0x18>
        }

    }


    return Local_u8_ErrorFlag;
    365e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	08 95       	ret

0000366e <SW_enu_GetSwValue>:

extern ErrorState_t SW_enu_GetSwValue(u8 Copy_u8_SwitchNumber, u8* Copy_pu8_SwitchValue)
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <SW_enu_GetSwValue+0x6>
    3674:	00 d0       	rcall	.+0      	; 0x3676 <SW_enu_GetSwValue+0x8>
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	8a 83       	std	Y+2, r24	; 0x02
    367c:	7c 83       	std	Y+4, r23	; 0x04
    367e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_SwitchValue)
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	9c 81       	ldd	r25, Y+4	; 0x04
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	49 f1       	breq	.+82     	; 0x36de <SW_enu_GetSwValue+0x70>
    {
        if(Copy_u8_SwitchNumber <= SW_u8_SwCount)
    368c:	90 91 77 01 	lds	r25, 0x0177
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	98 17       	cp	r25, r24
    3694:	08 f1       	brcs	.+66     	; 0x36d8 <SW_enu_GetSwValue+0x6a>
        {
            Local_u8_ErrorFlag  = DIO_enu_GetPinValue(SW_astr_SwList[Copy_u8_SwitchNumber].SW_Group,SW_astr_SwList[Copy_u8_SwitchNumber].SW_Pin,Copy_pu8_SwitchValue);
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	c9 01       	movw	r24, r18
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	82 0f       	add	r24, r18
    36a4:	93 1f       	adc	r25, r19
    36a6:	fc 01       	movw	r30, r24
    36a8:	e8 58       	subi	r30, 0x88	; 136
    36aa:	fe 4f       	sbci	r31, 0xFE	; 254
    36ac:	40 81       	ld	r20, Z
    36ae:	8a 81       	ldd	r24, Y+2	; 0x02
    36b0:	28 2f       	mov	r18, r24
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	c9 01       	movw	r24, r18
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	82 0f       	add	r24, r18
    36bc:	93 1f       	adc	r25, r19
    36be:	fc 01       	movw	r30, r24
    36c0:	e7 58       	subi	r30, 0x87	; 135
    36c2:	fe 4f       	sbci	r31, 0xFE	; 254
    36c4:	90 81       	ld	r25, Z
    36c6:	2b 81       	ldd	r18, Y+3	; 0x03
    36c8:	3c 81       	ldd	r19, Y+4	; 0x04
    36ca:	84 2f       	mov	r24, r20
    36cc:	69 2f       	mov	r22, r25
    36ce:	a9 01       	movw	r20, r18
    36d0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DIO_enu_GetPinValue>
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	05 c0       	rjmp	.+10     	; 0x36e2 <SW_enu_GetSwValue+0x74>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <SW_enu_GetSwValue+0x74>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    36e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <Relay_enu_Initialization>:
extern Relay_t Relay_astr_RelayList[];

//APIs implementation

extern ErrorState_t Relay_enu_Initialization(void)
{
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <Relay_enu_Initialization+0x6>
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3700:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3702:	19 82       	std	Y+1, r1	; 0x01
    3704:	31 c0       	rjmp	.+98     	; 0x3768 <Relay_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	fc 01       	movw	r30, r24
    3712:	e4 58       	subi	r30, 0x84	; 132
    3714:	fe 4f       	sbci	r31, 0xFE	; 254
    3716:	20 81       	ld	r18, Z
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	88 2f       	mov	r24, r24
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	88 0f       	add	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	fc 01       	movw	r30, r24
    3724:	e3 58       	subi	r30, 0x83	; 131
    3726:	fe 4f       	sbci	r31, 0xFE	; 254
    3728:	90 81       	ld	r25, Z
    372a:	82 2f       	mov	r24, r18
    372c:	69 2f       	mov	r22, r25
    372e:	41 e0       	ldi	r20, 0x01	; 1
    3730:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	fc 01       	movw	r30, r24
    3740:	e4 58       	subi	r30, 0x84	; 132
    3742:	fe 4f       	sbci	r31, 0xFE	; 254
    3744:	20 81       	ld	r18, Z
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	88 2f       	mov	r24, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	fc 01       	movw	r30, r24
    3752:	e3 58       	subi	r30, 0x83	; 131
    3754:	fe 4f       	sbci	r31, 0xFE	; 254
    3756:	90 81       	ld	r25, Z
    3758:	82 2f       	mov	r24, r18
    375a:	69 2f       	mov	r22, r25
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	8f 5f       	subi	r24, 0xFF	; 255
    3766:	89 83       	std	Y+1, r24	; 0x01
    3768:	90 91 7b 01 	lds	r25, 0x017B
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	89 17       	cp	r24, r25
    3770:	50 f2       	brcs	.-108    	; 0x3706 <Relay_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    3772:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <Relay_enu_TuronOnRelay>:

extern ErrorState_t Relay_enu_TuronOnRelay(u8 Copy_u8_RelayNumber)
{
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	00 d0       	rcall	.+0      	; 0x3786 <Relay_enu_TuronOnRelay+0x6>
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    3790:	90 91 7b 01 	lds	r25, 0x017B
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	89 17       	cp	r24, r25
    3798:	c8 f4       	brcc	.+50     	; 0x37cc <Relay_enu_TuronOnRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_HIGH);
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	88 2f       	mov	r24, r24
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	fc 01       	movw	r30, r24
    37a6:	e4 58       	subi	r30, 0x84	; 132
    37a8:	fe 4f       	sbci	r31, 0xFE	; 254
    37aa:	20 81       	ld	r18, Z
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	88 2f       	mov	r24, r24
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	fc 01       	movw	r30, r24
    37b8:	e3 58       	subi	r30, 0x83	; 131
    37ba:	fe 4f       	sbci	r31, 0xFE	; 254
    37bc:	90 81       	ld	r25, Z
    37be:	82 2f       	mov	r24, r18
    37c0:	69 2f       	mov	r22, r25
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	02 c0       	rjmp	.+4      	; 0x37d0 <Relay_enu_TuronOnRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    37cc:	82 e0       	ldi	r24, 0x02	; 2
    37ce:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	cf 91       	pop	r28
    37d8:	df 91       	pop	r29
    37da:	08 95       	ret

000037dc <Relay_enu_TuronOffRelay>:

extern ErrorState_t Relay_enu_TuronOffRelay(u8 Copy_u8_RelayNumber)
{
    37dc:	df 93       	push	r29
    37de:	cf 93       	push	r28
    37e0:	00 d0       	rcall	.+0      	; 0x37e2 <Relay_enu_TuronOffRelay+0x6>
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_RelayNumber < Relay_u8_RelayCount)
    37ec:	90 91 7b 01 	lds	r25, 0x017B
    37f0:	8a 81       	ldd	r24, Y+2	; 0x02
    37f2:	89 17       	cp	r24, r25
    37f4:	c8 f4       	brcc	.+50     	; 0x3828 <Relay_enu_TuronOffRelay+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Group,Relay_astr_RelayList[Copy_u8_RelayNumber].Relay_Pin,DIO_LOW);
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	88 2f       	mov	r24, r24
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	fc 01       	movw	r30, r24
    3802:	e4 58       	subi	r30, 0x84	; 132
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	20 81       	ld	r18, Z
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	fc 01       	movw	r30, r24
    3814:	e3 58       	subi	r30, 0x83	; 131
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	90 81       	ld	r25, Z
    381a:	82 2f       	mov	r24, r18
    381c:	69 2f       	mov	r22, r25
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	02 c0       	rjmp	.+4      	; 0x382c <Relay_enu_TuronOffRelay+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    382c:	89 81       	ldd	r24, Y+1	; 0x01
}
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <Relay_enu_TurnOnAllRelays>:

extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	00 d0       	rcall	.+0      	; 0x383e <Relay_enu_TurnOnAllRelays+0x6>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3846:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    3848:	19 82       	std	Y+1, r1	; 0x01
    384a:	1a c0       	rjmp	.+52     	; 0x3880 <Relay_enu_TurnOnAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	88 2f       	mov	r24, r24
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	fc 01       	movw	r30, r24
    3858:	e4 58       	subi	r30, 0x84	; 132
    385a:	fe 4f       	sbci	r31, 0xFE	; 254
    385c:	20 81       	ld	r18, Z
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	fc 01       	movw	r30, r24
    386a:	e3 58       	subi	r30, 0x83	; 131
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	90 81       	ld	r25, Z
    3870:	82 2f       	mov	r24, r18
    3872:	69 2f       	mov	r22, r25
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOnAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	90 91 7b 01 	lds	r25, 0x017B
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	89 17       	cp	r24, r25
    3888:	08 f3       	brcs	.-62     	; 0x384c <Relay_enu_TurnOnAllRelays+0x14>

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    388a:	82 e0       	ldi	r24, 0x02	; 2
    388c:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <Relay_enu_TurnOffAllRelays>:

extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <Relay_enu_TurnOffAllRelays+0x6>
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    38a8:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    38aa:	19 82       	std	Y+1, r1	; 0x01
    38ac:	1a c0       	rjmp	.+52     	; 0x38e2 <Relay_enu_TurnOffAllRelays+0x48>
    {

     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	88 2f       	mov	r24, r24
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	fc 01       	movw	r30, r24
    38ba:	e4 58       	subi	r30, 0x84	; 132
    38bc:	fe 4f       	sbci	r31, 0xFE	; 254
    38be:	20 81       	ld	r18, Z
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	fc 01       	movw	r30, r24
    38cc:	e3 58       	subi	r30, 0x83	; 131
    38ce:	fe 4f       	sbci	r31, 0xFE	; 254
    38d0:	90 81       	ld	r25, Z
    38d2:	82 2f       	mov	r24, r18
    38d4:	69 2f       	mov	r22, r25
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Relay_enu_TurnOffAllRelays(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Relay_u8_RelayCount; Local_u8_Counter++)
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	89 83       	std	Y+1, r24	; 0x01
    38e2:	90 91 7b 01 	lds	r25, 0x017B
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	89 17       	cp	r24, r25
    38ea:	08 f3       	brcs	.-62     	; 0x38ae <Relay_enu_TurnOffAllRelays+0x14>
     DIO_enu_SetPinValue(Relay_astr_RelayList[Local_u8_Counter].Relay_Group,Relay_astr_RelayList[Local_u8_Counter].Relay_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <LED_enu_Initialization+0x6>
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    3906:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3908:	19 82       	std	Y+1, r1	; 0x01
    390a:	31 c0       	rjmp	.+98     	; 0x396e <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	88 2f       	mov	r24, r24
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	fc 01       	movw	r30, r24
    3918:	e1 58       	subi	r30, 0x81	; 129
    391a:	fe 4f       	sbci	r31, 0xFE	; 254
    391c:	20 81       	ld	r18, Z
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	88 2f       	mov	r24, r24
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	fc 01       	movw	r30, r24
    392a:	e0 58       	subi	r30, 0x80	; 128
    392c:	fe 4f       	sbci	r31, 0xFE	; 254
    392e:	90 81       	ld	r25, Z
    3930:	82 2f       	mov	r24, r18
    3932:	69 2f       	mov	r22, r25
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	88 2f       	mov	r24, r24
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	fc 01       	movw	r30, r24
    3946:	e1 58       	subi	r30, 0x81	; 129
    3948:	fe 4f       	sbci	r31, 0xFE	; 254
    394a:	20 81       	ld	r18, Z
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	88 2f       	mov	r24, r24
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	88 0f       	add	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	fc 01       	movw	r30, r24
    3958:	e0 58       	subi	r30, 0x80	; 128
    395a:	fe 4f       	sbci	r31, 0xFE	; 254
    395c:	90 81       	ld	r25, Z
    395e:	82 2f       	mov	r24, r18
    3960:	69 2f       	mov	r22, r25
    3962:	40 e0       	ldi	r20, 0x00	; 0
    3964:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	8f 5f       	subi	r24, 0xFF	; 255
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	90 91 7e 01 	lds	r25, 0x017E
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	89 17       	cp	r24, r25
    3976:	50 f2       	brcs	.-108    	; 0x390c <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    3978:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	00 d0       	rcall	.+0      	; 0x398c <LED_enu_TurnOnLED+0x6>
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    3996:	90 91 7e 01 	lds	r25, 0x017E
    399a:	8a 81       	ldd	r24, Y+2	; 0x02
    399c:	89 17       	cp	r24, r25
    399e:	c8 f4       	brcc	.+50     	; 0x39d2 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	88 2f       	mov	r24, r24
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	fc 01       	movw	r30, r24
    39ac:	e1 58       	subi	r30, 0x81	; 129
    39ae:	fe 4f       	sbci	r31, 0xFE	; 254
    39b0:	20 81       	ld	r18, Z
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	88 0f       	add	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	fc 01       	movw	r30, r24
    39be:	e0 58       	subi	r30, 0x80	; 128
    39c0:	fe 4f       	sbci	r31, 0xFE	; 254
    39c2:	90 81       	ld	r25, Z
    39c4:	82 2f       	mov	r24, r18
    39c6:	69 2f       	mov	r22, r25
    39c8:	41 e0       	ldi	r20, 0x01	; 1
    39ca:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <LED_enu_TurnOffLED+0x6>
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    39f2:	90 91 7e 01 	lds	r25, 0x017E
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	98 17       	cp	r25, r24
    39fa:	c8 f0       	brcs	.+50     	; 0x3a2e <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    39fc:	8a 81       	ldd	r24, Y+2	; 0x02
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	fc 01       	movw	r30, r24
    3a08:	e1 58       	subi	r30, 0x81	; 129
    3a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0c:	20 81       	ld	r18, Z
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	88 2f       	mov	r24, r24
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	88 0f       	add	r24, r24
    3a16:	99 1f       	adc	r25, r25
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e0 58       	subi	r30, 0x80	; 128
    3a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1e:	90 81       	ld	r25, Z
    3a20:	82 2f       	mov	r24, r18
    3a22:	69 2f       	mov	r22, r25
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3a2e:	82 e0       	ldi	r24, 0x02	; 2
    3a30:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	00 d0       	rcall	.+0      	; 0x3a44 <LED_enu_TurnOnAllLEDs+0x6>
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3a4c:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3a4e:	19 82       	std	Y+1, r1	; 0x01
    3a50:	1a c0       	rjmp	.+52     	; 0x3a86 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e1 58       	subi	r30, 0x81	; 129
    3a60:	fe 4f       	sbci	r31, 0xFE	; 254
    3a62:	20 81       	ld	r18, Z
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	fc 01       	movw	r30, r24
    3a70:	e0 58       	subi	r30, 0x80	; 128
    3a72:	fe 4f       	sbci	r31, 0xFE	; 254
    3a74:	90 81       	ld	r25, Z
    3a76:	82 2f       	mov	r24, r18
    3a78:	69 2f       	mov	r22, r25
    3a7a:	41 e0       	ldi	r20, 0x01	; 1
    3a7c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	8f 5f       	subi	r24, 0xFF	; 255
    3a84:	89 83       	std	Y+1, r24	; 0x01
    3a86:	90 91 7e 01 	lds	r25, 0x017E
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	89 17       	cp	r24, r25
    3a8e:	08 f3       	brcs	.-62     	; 0x3a52 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3a90:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <LED_enu_TurnOffAllLEDs+0x6>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    3aac:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3aae:	19 82       	std	Y+1, r1	; 0x01
    3ab0:	1a c0       	rjmp	.+52     	; 0x3ae6 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	88 2f       	mov	r24, r24
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	fc 01       	movw	r30, r24
    3abe:	e1 58       	subi	r30, 0x81	; 129
    3ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac2:	20 81       	ld	r18, Z
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	fc 01       	movw	r30, r24
    3ad0:	e0 58       	subi	r30, 0x80	; 128
    3ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad4:	90 81       	ld	r25, Z
    3ad6:	82 2f       	mov	r24, r18
    3ad8:	69 2f       	mov	r22, r25
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	8f 5f       	subi	r24, 0xFF	; 255
    3ae4:	89 83       	std	Y+1, r24	; 0x01
    3ae6:	90 91 7e 01 	lds	r25, 0x017E
    3aea:	89 81       	ldd	r24, Y+1	; 0x01
    3aec:	89 17       	cp	r24, r25
    3aee:	08 f3       	brcs	.-62     	; 0x3ab2 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3af0:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <LCD_enu_Initialization>:
#include "LCD_Private.h"


//Functions' implementations'
extern ErrorState_t LCD_enu_Initialization(void)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	6d 97       	sbiw	r28, 0x1d	; 29
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	8d 8f       	std	Y+29, r24	; 0x1d
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	ac e0       	ldi	r26, 0x0C	; 12
    3b1c:	b2 e4       	ldi	r27, 0x42	; 66
    3b1e:	89 8f       	std	Y+25, r24	; 0x19
    3b20:	9a 8f       	std	Y+26, r25	; 0x1a
    3b22:	ab 8f       	std	Y+27, r26	; 0x1b
    3b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	69 8d       	ldd	r22, Y+25	; 0x19
    3b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a e7       	ldi	r20, 0x7A	; 122
    3b34:	55 e4       	ldi	r21, 0x45	; 69
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8d 8b       	std	Y+21, r24	; 0x15
    3b40:	9e 8b       	std	Y+22, r25	; 0x16
    3b42:	af 8b       	std	Y+23, r26	; 0x17
    3b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b46:	6d 89       	ldd	r22, Y+21	; 0x15
    3b48:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <LCD_enu_Initialization+0x6a>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9c 8b       	std	Y+20, r25	; 0x14
    3b64:	8b 8b       	std	Y+19, r24	; 0x13
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <LCD_enu_Initialization+0xe8>
	else if (__tmp > 65535)
    3b68:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <LCD_enu_Initialization+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	69 8d       	ldd	r22, Y+25	; 0x19
    3b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9c 8b       	std	Y+20, r25	; 0x14
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <LCD_enu_Initialization+0xca>
    3baa:	80 e9       	ldi	r24, 0x90	; 144
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	9a 8b       	std	Y+18, r25	; 0x12
    3bb0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bb2:	89 89       	ldd	r24, Y+17	; 0x11
    3bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <LCD_enu_Initialization+0xb8>
    3bba:	9a 8b       	std	Y+18, r25	; 0x12
    3bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bca:	9c 89       	ldd	r25, Y+20	; 0x14
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <LCD_enu_Initialization+0xac>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <LCD_enu_Initialization+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9c 8b       	std	Y+20, r25	; 0x14
    3be4:	8b 8b       	std	Y+19, r24	; 0x13
    3be6:	8b 89       	ldd	r24, Y+19	; 0x13
    3be8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bea:	98 8b       	std	Y+16, r25	; 0x10
    3bec:	8f 87       	std	Y+15, r24	; 0x0f
    3bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf0:	98 89       	ldd	r25, Y+16	; 0x10
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <LCD_enu_Initialization+0xf4>
    3bf6:	98 8b       	std	Y+16, r25	; 0x10
    3bf8:	8f 87       	std	Y+15, r24	; 0x0f

    //Intitial delay
     _delay_ms(35);
   
    DIO_enu_SetPinDiretion(LCD_RS_GROUP,LCD_RS_PIN,DIO_PIN_WRITE);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	61 e0       	ldi	r22, 0x01	; 1
    3bfe:	41 e0       	ldi	r20, 0x01	; 1
    3c00:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_RW_GROUP,LCD_RW_PIN,DIO_PIN_WRITE);
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	62 e0       	ldi	r22, 0x02	; 2
    3c08:	41 e0       	ldi	r20, 0x01	; 1
    3c0a:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_EN_GROUP,LCD_EN_PIN,DIO_PIN_WRITE);
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	63 e0       	ldi	r22, 0x03	; 3
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>

    DIO_enu_SetPinDiretion(LCD_D7_GROUP,LCD_D7_PIN,DIO_PIN_WRITE);
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	67 e0       	ldi	r22, 0x07	; 7
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D6_GROUP,LCD_D6_PIN,DIO_PIN_WRITE);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	66 e0       	ldi	r22, 0x06	; 6
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D5_GROUP,LCD_D5_PIN,DIO_PIN_WRITE);
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	65 e0       	ldi	r22, 0x05	; 5
    3c30:	41 e0       	ldi	r20, 0x01	; 1
    3c32:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
    DIO_enu_SetPinDiretion(LCD_D4_GROUP,LCD_D4_PIN,DIO_PIN_WRITE);
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	64 e0       	ldi	r22, 0x04	; 4
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        enu_PassByteAndLatch(0x38);

    #elif LCD_MODE == LCD_4_BIT_MODE

        //Function Set
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
                
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,DIO_LOW);
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	67 e0       	ldi	r22, 0x07	; 7
    3c4e:	40 e0       	ldi	r20, 0x00	; 0
    3c50:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,DIO_LOW);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	66 e0       	ldi	r22, 0x06	; 6
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,DIO_HIGH);
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	65 e0       	ldi	r22, 0x05	; 5
    3c62:	41 e0       	ldi	r20, 0x01	; 1
    3c64:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,DIO_LOW);
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	64 e0       	ldi	r22, 0x04	; 4
    3c6c:	40 e0       	ldi	r20, 0x00	; 0
    3c6e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	63 e0       	ldi	r22, 0x03	; 3
    3c76:	41 e0       	ldi	r20, 0x01	; 1
    3c78:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	a0 e8       	ldi	r26, 0x80	; 128
    3c82:	bf e3       	ldi	r27, 0x3F	; 63
    3c84:	8b 87       	std	Y+11, r24	; 0x0b
    3c86:	9c 87       	std	Y+12, r25	; 0x0c
    3c88:	ad 87       	std	Y+13, r26	; 0x0d
    3c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	4a e7       	ldi	r20, 0x7A	; 122
    3c9a:	55 e4       	ldi	r21, 0x45	; 69
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	8f 83       	std	Y+7, r24	; 0x07
    3ca6:	98 87       	std	Y+8, r25	; 0x08
    3ca8:	a9 87       	std	Y+9, r26	; 0x09
    3caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cac:	6f 81       	ldd	r22, Y+7	; 0x07
    3cae:	78 85       	ldd	r23, Y+8	; 0x08
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e8       	ldi	r20, 0x80	; 128
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cc0:	88 23       	and	r24, r24
    3cc2:	2c f4       	brge	.+10     	; 0x3cce <LCD_enu_Initialization+0x1d0>
		__ticks = 1;
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
    3ccc:	3f c0       	rjmp	.+126    	; 0x3d4c <LCD_enu_Initialization+0x24e>
	else if (__tmp > 65535)
    3cce:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd0:	78 85       	ldd	r23, Y+8	; 0x08
    3cd2:	89 85       	ldd	r24, Y+9	; 0x09
    3cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	3f ef       	ldi	r19, 0xFF	; 255
    3cda:	4f e7       	ldi	r20, 0x7F	; 127
    3cdc:	57 e4       	ldi	r21, 0x47	; 71
    3cde:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ce2:	18 16       	cp	r1, r24
    3ce4:	4c f5       	brge	.+82     	; 0x3d38 <LCD_enu_Initialization+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e2       	ldi	r20, 0x20	; 32
    3cf4:	51 e4       	ldi	r21, 0x41	; 65
    3cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	9e 83       	std	Y+6, r25	; 0x06
    3d0c:	8d 83       	std	Y+5, r24	; 0x05
    3d0e:	0f c0       	rjmp	.+30     	; 0x3d2e <LCD_enu_Initialization+0x230>
    3d10:	80 e9       	ldi	r24, 0x90	; 144
    3d12:	91 e0       	ldi	r25, 0x01	; 1
    3d14:	9c 83       	std	Y+4, r25	; 0x04
    3d16:	8b 83       	std	Y+3, r24	; 0x03
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	f1 f7       	brne	.-4      	; 0x3d1c <LCD_enu_Initialization+0x21e>
    3d20:	9c 83       	std	Y+4, r25	; 0x04
    3d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d24:	8d 81       	ldd	r24, Y+5	; 0x05
    3d26:	9e 81       	ldd	r25, Y+6	; 0x06
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	00 97       	sbiw	r24, 0x00	; 0
    3d34:	69 f7       	brne	.-38     	; 0x3d10 <LCD_enu_Initialization+0x212>
    3d36:	14 c0       	rjmp	.+40     	; 0x3d60 <LCD_enu_Initialization+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d38:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3a:	78 85       	ldd	r23, Y+8	; 0x08
    3d3c:	89 85       	ldd	r24, Y+9	; 0x09
    3d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	9e 83       	std	Y+6, r25	; 0x06
    3d4a:	8d 83       	std	Y+5, r24	; 0x05
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	f1 f7       	brne	.-4      	; 0x3d58 <LCD_enu_Initialization+0x25a>
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	63 e0       	ldi	r22, 0x03	; 3
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
       
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	61 e0       	ldi	r22, 0x01	; 1
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(0x28);
    3d74:	88 e2       	ldi	r24, 0x28	; 40
    3d76:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

    #endif


    //Display ON/OFF control
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	61 e0       	ldi	r22, 0x01	; 1
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x0C);
    3d84:	8c e0       	ldi	r24, 0x0C	; 12
    3d86:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

    //Display clear
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	61 e0       	ldi	r22, 0x01	; 1
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x01);
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

    //Entry Mode Set
    DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	61 e0       	ldi	r22, 0x01	; 1
    3d9e:	40 e0       	ldi	r20, 0x00	; 0
    3da0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    enu_PassByteAndLatch(0x06);
    3da4:	86 e0       	ldi	r24, 0x06	; 6
    3da6:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    

    Local_u8_ErrorFlag = ES_OK; //should be checked on with a for loop
    3daa:	1d 8e       	std	Y+29, r1	; 0x1d
    return Local_u8_ErrorFlag;
    3dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3dae:	6d 96       	adiw	r28, 0x1d	; 29
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	cf 91       	pop	r28
    3dbc:	df 91       	pop	r29
    3dbe:	08 95       	ret

00003dc0 <LCD_enu_SendCommand>:

extern ErrorState_t LCD_enu_SendCommand (u8 Copy_u8_Command)
{
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	00 d0       	rcall	.+0      	; 0x3dc6 <LCD_enu_SendCommand+0x6>
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Command);
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3de0:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag;
    3de2:	89 81       	ldd	r24, Y+1	; 0x01

}
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	08 95       	ret

00003dee <LCD_enu_SendData>:

extern ErrorState_t LCD_enu_SendData (u8 Copy_u8_Data)
{
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <LCD_enu_SendData+0x6>
    3df4:	cd b7       	in	r28, 0x3d	; 61
    3df6:	de b7       	in	r29, 0x3e	; 62
    3df8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	41 e0       	ldi	r20, 0x01	; 1
    3e04:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    
    enu_PassByteAndLatch(Copy_u8_Data);
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

    Local_u8_ErrorFlag = ES_OK; //Should be checked by a for loop
    3e0e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3e10:	89 81       	ldd	r24, Y+1	; 0x01

}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <LCD_enu_GoToPosition>:

extern ErrorState_t LCD_enu_GoToPosition(u8 Copy_u8_Row, u8 Copy_u8_Column, u8 Copy_PageNumber)
{
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <LCD_enu_GoToPosition+0x6>
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <LCD_enu_GoToPosition+0x8>
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	8a 83       	std	Y+2, r24	; 0x02
    3e2a:	6b 83       	std	Y+3, r22	; 0x03
    3e2c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	89 83       	std	Y+1, r24	; 0x01
    
    if((Copy_u8_Column <= 16 && Copy_u8_Column >= 1) && (Copy_u8_Row <= 2 && Copy_u8_Row >= 1) && (Copy_PageNumber <= LCD_NUMBER_OF_PAGES && Copy_PageNumber >= 1))
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	81 31       	cpi	r24, 0x11	; 17
    3e36:	88 f5       	brcc	.+98     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	88 23       	and	r24, r24
    3e3c:	71 f1       	breq	.+92     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    3e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e40:	83 30       	cpi	r24, 0x03	; 3
    3e42:	58 f5       	brcc	.+86     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	88 23       	and	r24, r24
    3e48:	41 f1       	breq	.+80     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    3e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4c:	85 30       	cpi	r24, 0x05	; 5
    3e4e:	28 f5       	brcc	.+74     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    3e50:	8c 81       	ldd	r24, Y+4	; 0x04
    3e52:	88 23       	and	r24, r24
    3e54:	11 f1       	breq	.+68     	; 0x3e9a <LCD_enu_GoToPosition+0x7e>
    {
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1)  + 16*(Copy_PageNumber -1));
    3e60:	8c 81       	ldd	r24, Y+4	; 0x04
    3e62:	88 2f       	mov	r24, r24
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9c 01       	movw	r18, r24
    3e68:	21 50       	subi	r18, 0x01	; 1
    3e6a:	30 40       	sbci	r19, 0x00	; 0
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	88 2f       	mov	r24, r24
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	82 0f       	add	r24, r18
    3e7e:	93 1f       	adc	r25, r19
    3e80:	82 95       	swap	r24
    3e82:	92 95       	swap	r25
    3e84:	90 7f       	andi	r25, 0xF0	; 240
    3e86:	98 27       	eor	r25, r24
    3e88:	80 7f       	andi	r24, 0xF0	; 240
    3e8a:	98 27       	eor	r25, r24
    3e8c:	98 2f       	mov	r25, r24
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	89 0f       	add	r24, r25
    3e92:	81 58       	subi	r24, 0x81	; 129
    3e94:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <LCD_enu_GoToPosition+0x82>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3e9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	cf 91       	pop	r28
    3eaa:	df 91       	pop	r29
    3eac:	08 95       	ret

00003eae <LCD_enu_SendString>:

extern ErrorState_t LCD_enu_SendString(const char* Copy_pc_StringPointer)
{
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	00 d0       	rcall	.+0      	; 0x3eb4 <LCD_enu_SendString+0x6>
    3eb4:	0f 92       	push	r0
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    3eba:	9b 83       	std	Y+3, r25	; 0x03
    3ebc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pc_StringPointer)
    3ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	c1 f0       	breq	.+48     	; 0x3efa <LCD_enu_SendString+0x4c>
    3eca:	10 c0       	rjmp	.+32     	; 0x3eec <LCD_enu_SendString+0x3e>
    {
        while (*Copy_pc_StringPointer)
        {
            DIO_enu_SetPinValue(LCD_RS_GROUP , LCD_RS_PIN , DIO_HIGH);
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	61 e0       	ldi	r22, 0x01	; 1
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);
    3ed6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    3eda:	20 81       	ld	r18, Z
    3edc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ede:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	9b 83       	std	Y+3, r25	; 0x03
    3ee4:	8a 83       	std	Y+2, r24	; 0x02
    3ee6:	82 2f       	mov	r24, r18
    3ee8:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(Copy_pc_StringPointer)
    {
        while (*Copy_pc_StringPointer)
    3eec:	ea 81       	ldd	r30, Y+2	; 0x02
    3eee:	fb 81       	ldd	r31, Y+3	; 0x03
    3ef0:	80 81       	ld	r24, Z
    3ef2:	88 23       	and	r24, r24
    3ef4:	59 f7       	brne	.-42     	; 0x3ecc <LCD_enu_SendString+0x1e>
            enu_PassByteAndLatch(*Copy_pc_StringPointer++);


        }
        
        Local_u8_ErrorFlag = ES_OK;
    3ef6:	19 82       	std	Y+1, r1	; 0x01
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <LCD_enu_SendString+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3efa:	83 e0       	ldi	r24, 0x03	; 3
    3efc:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	08 95       	ret

00003f0c <LCD_enu_ClearPage>:

extern ErrorState_t LCD_enu_ClearPage(u8 Copy_u8_PageNumber)
{
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	00 d0       	rcall	.+0      	; 0x3f12 <LCD_enu_ClearPage+0x6>
    3f12:	0f 92       	push	r0
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_u8_PageNumber >= 1 && Copy_u8_PageNumber <= LCD_NUMBER_OF_PAGES)
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	88 23       	and	r24, r24
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <LCD_enu_ClearPage+0x1a>
    3f24:	49 c0       	rjmp	.+146    	; 0x3fb8 <LCD_enu_ClearPage+0xac>
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	85 30       	cpi	r24, 0x05	; 5
    3f2a:	08 f0       	brcs	.+2      	; 0x3f2e <LCD_enu_ClearPage+0x22>
    3f2c:	45 c0       	rjmp	.+138    	; 0x3fb8 <LCD_enu_ClearPage+0xac>
    {
        u8 Local_u8_Counter = 0;
    3f2e:	19 82       	std	Y+1, r1	; 0x01

        //Clearing first line:

        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	88 2f       	mov	r24, r24
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	07 96       	adiw	r24, 0x07	; 7
    3f42:	82 95       	swap	r24
    3f44:	92 95       	swap	r25
    3f46:	90 7f       	andi	r25, 0xF0	; 240
    3f48:	98 27       	eor	r25, r24
    3f4a:	80 7f       	andi	r24, 0xF0	; 240
    3f4c:	98 27       	eor	r25, r24
    3f4e:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	41 e0       	ldi	r20, 0x01	; 1
    3f58:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3f5c:	19 82       	std	Y+1, r1	; 0x01
    3f5e:	06 c0       	rjmp	.+12     	; 0x3f6c <LCD_enu_ClearPage+0x60>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3f60:	80 e2       	ldi	r24, 0x20	; 32
    3f62:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_FIRST_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	8f 5f       	subi	r24, 0xFF	; 255
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	80 31       	cpi	r24, 0x10	; 16
    3f70:	b8 f3       	brcs	.-18     	; 0x3f60 <LCD_enu_ClearPage+0x54>


        //Clearing second line
        
        //Placing cursor at the beginning of the line
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	61 e0       	ldi	r22, 0x01	; 1
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
    3f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7e:	88 2f       	mov	r24, r24
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	0b 96       	adiw	r24, 0x0b	; 11
    3f84:	82 95       	swap	r24
    3f86:	92 95       	swap	r25
    3f88:	90 7f       	andi	r25, 0xF0	; 240
    3f8a:	98 27       	eor	r25, r24
    3f8c:	80 7f       	andi	r24, 0xF0	; 240
    3f8e:	98 27       	eor	r25, r24
    3f90:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3f9e:	19 82       	std	Y+1, r1	; 0x01
    3fa0:	06 c0       	rjmp	.+12     	; 0x3fae <LCD_enu_ClearPage+0xa2>
        {
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
    3fa2:	80 e2       	ldi	r24, 0x20	; 32
    3fa4:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
        enu_PassByteAndLatch(16*(Copy_u8_PageNumber - 1) + LCD_SECOND_LINE_BASE_ADDRESS);
        
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

        for(Local_u8_Counter = 0; Local_u8_Counter < 16; Local_u8_Counter++)
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	89 83       	std	Y+1, r24	; 0x01
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	80 31       	cpi	r24, 0x10	; 16
    3fb2:	b8 f3       	brcs	.-18     	; 0x3fa2 <LCD_enu_ClearPage+0x96>
            //Placing Space in each location
            enu_PassByteAndLatch(' ');
        }
        

        Local_u8_ErrorFlag = ES_OK;
    3fb4:	1a 82       	std	Y+2, r1	; 0x02
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <LCD_enu_ClearPage+0xb0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3fb8:	82 e0       	ldi	r24, 0x02	; 2
    3fba:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <LCD_enu_DrawSpecialCharacter>:

extern ErrorState_t LCD_enu_DrawSpecialCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternSize, u8 Copy_u8_Startpattern, u8 Copy_u8_Row, u8 Copy_u8_Column,u8 Copy_u8_Page,u8 Copy_u8_PrintingDrection)
{
    3fca:	cf 92       	push	r12
    3fcc:	ef 92       	push	r14
    3fce:	0f 93       	push	r16
    3fd0:	df 93       	push	r29
    3fd2:	cf 93       	push	r28
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	2e 97       	sbiw	r28, 0x0e	; 14
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	8d 83       	std	Y+5, r24	; 0x05
    3fe8:	6f 83       	std	Y+7, r22	; 0x07
    3fea:	48 87       	std	Y+8, r20	; 0x08
    3fec:	29 87       	std	Y+9, r18	; 0x09
    3fee:	0a 87       	std	Y+10, r16	; 0x0a
    3ff0:	eb 86       	std	Y+11, r14	; 0x0b
    3ff2:	cc 86       	std	Y+12, r12	; 0x0c
    u8 Local_u8_ErorrFlag = ES_NOK;
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	8c 83       	std	Y+4, r24	; 0x04
    
    if(Copy_au8_CharacterCode)
    3ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <LCD_enu_DrawSpecialCharacter+0x38>
    4000:	b3 c0       	rjmp	.+358    	; 0x4168 <LCD_enu_DrawSpecialCharacter+0x19e>
    {
        u8* Local_pu8_PassingPointer = NULL;
    4002:	1b 82       	std	Y+3, r1	; 0x03
    4004:	1a 82       	std	Y+2, r1	; 0x02
        u8 Local_u8_LoopCounter = 0;
    4006:	19 82       	std	Y+1, r1	; 0x01

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
    4008:	8f 81       	ldd	r24, Y+7	; 0x07
    400a:	88 23       	and	r24, r24
    400c:	09 f4       	brne	.+2      	; 0x4010 <LCD_enu_DrawSpecialCharacter+0x46>
    400e:	a9 c0       	rjmp	.+338    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4010:	8f 81       	ldd	r24, Y+7	; 0x07
    4012:	89 30       	cpi	r24, 0x09	; 9
    4014:	08 f0       	brcs	.+2      	; 0x4018 <LCD_enu_DrawSpecialCharacter+0x4e>
    4016:	a5 c0       	rjmp	.+330    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4018:	88 85       	ldd	r24, Y+8	; 0x08
    401a:	88 30       	cpi	r24, 0x08	; 8
    401c:	08 f0       	brcs	.+2      	; 0x4020 <LCD_enu_DrawSpecialCharacter+0x56>
    401e:	a1 c0       	rjmp	.+322    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4020:	88 85       	ldd	r24, Y+8	; 0x08
    4022:	28 2f       	mov	r18, r24
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	88 e0       	ldi	r24, 0x08	; 8
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	ac 01       	movw	r20, r24
    402c:	42 1b       	sub	r20, r18
    402e:	53 0b       	sbc	r21, r19
    4030:	9a 01       	movw	r18, r20
    4032:	8f 81       	ldd	r24, Y+7	; 0x07
    4034:	88 2f       	mov	r24, r24
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	28 17       	cp	r18, r24
    403a:	39 07       	cpc	r19, r25
    403c:	0c f4       	brge	.+2      	; 0x4040 <LCD_enu_DrawSpecialCharacter+0x76>
    403e:	91 c0       	rjmp	.+290    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4040:	89 85       	ldd	r24, Y+9	; 0x09
    4042:	88 23       	and	r24, r24
    4044:	09 f4       	brne	.+2      	; 0x4048 <LCD_enu_DrawSpecialCharacter+0x7e>
    4046:	8d c0       	rjmp	.+282    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4048:	89 85       	ldd	r24, Y+9	; 0x09
    404a:	83 30       	cpi	r24, 0x03	; 3
    404c:	08 f0       	brcs	.+2      	; 0x4050 <LCD_enu_DrawSpecialCharacter+0x86>
    404e:	89 c0       	rjmp	.+274    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4050:	8a 85       	ldd	r24, Y+10	; 0x0a
    4052:	88 23       	and	r24, r24
    4054:	09 f4       	brne	.+2      	; 0x4058 <LCD_enu_DrawSpecialCharacter+0x8e>
    4056:	85 c0       	rjmp	.+266    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4058:	8a 85       	ldd	r24, Y+10	; 0x0a
    405a:	81 31       	cpi	r24, 0x11	; 17
    405c:	08 f0       	brcs	.+2      	; 0x4060 <LCD_enu_DrawSpecialCharacter+0x96>
    405e:	81 c0       	rjmp	.+258    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4060:	8c 85       	ldd	r24, Y+12	; 0x0c
    4062:	82 30       	cpi	r24, 0x02	; 2
    4064:	08 f0       	brcs	.+2      	; 0x4068 <LCD_enu_DrawSpecialCharacter+0x9e>
    4066:	7d c0       	rjmp	.+250    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
    4068:	8b 85       	ldd	r24, Y+11	; 0x0b
    406a:	85 30       	cpi	r24, 0x05	; 5
    406c:	08 f0       	brcs	.+2      	; 0x4070 <LCD_enu_DrawSpecialCharacter+0xa6>
    406e:	79 c0       	rjmp	.+242    	; 0x4162 <LCD_enu_DrawSpecialCharacter+0x198>
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    4070:	19 82       	std	Y+1, r1	; 0x01
    4072:	19 c0       	rjmp	.+50     	; 0x40a6 <LCD_enu_DrawSpecialCharacter+0xdc>
            {
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	8d 81       	ldd	r24, Y+5	; 0x05
    407c:	9e 81       	ldd	r25, Y+6	; 0x06
    407e:	82 0f       	add	r24, r18
    4080:	93 1f       	adc	r25, r19
    4082:	9b 83       	std	Y+3, r25	; 0x03
    4084:	8a 83       	std	Y+2, r24	; 0x02
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	98 2f       	mov	r25, r24
    408a:	96 95       	lsr	r25
    408c:	96 95       	lsr	r25
    408e:	96 95       	lsr	r25
    4090:	88 85       	ldd	r24, Y+8	; 0x08
    4092:	29 2f       	mov	r18, r25
    4094:	28 0f       	add	r18, r24
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	9b 81       	ldd	r25, Y+3	; 0x03
    409a:	62 2f       	mov	r22, r18
    409c:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <enu_AddCustomCharacter>
        u8 Local_u8_LoopCounter = 0;

        if(((Copy_u8_PatternSize >= 1) && (Copy_u8_PatternSize <= 8)) && (Copy_u8_Startpattern <= LCD_CUSTOM_PATTERN_7) && ((LCD_CUSTOM_PATTERN_7  - Copy_u8_Startpattern + 1) >= Copy_u8_PatternSize) && ((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16)) && (Copy_u8_PrintingDrection <= LCD_AC_INC) && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES))
        {
            //Adding Each distinct Custom character to CGRAM
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize*8; Local_u8_LoopCounter += 8)
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	88 5f       	subi	r24, 0xF8	; 248
    40a4:	89 83       	std	Y+1, r24	; 0x01
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	28 2f       	mov	r18, r24
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	8f 81       	ldd	r24, Y+7	; 0x07
    40ae:	88 2f       	mov	r24, r24
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	88 0f       	add	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	88 0f       	add	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	88 0f       	add	r24, r24
    40bc:	99 1f       	adc	r25, r25
    40be:	28 17       	cp	r18, r24
    40c0:	39 07       	cpc	r19, r25
    40c2:	c4 f2       	brlt	.-80     	; 0x4074 <LCD_enu_DrawSpecialCharacter+0xaa>
                Local_pu8_PassingPointer = Copy_au8_CharacterCode + Local_u8_LoopCounter;
                enu_AddCustomCharacter(Local_pu8_PassingPointer,Copy_u8_Startpattern + (Local_u8_LoopCounter/8));
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	61 e0       	ldi	r22, 0x01	; 1
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
            
            //Chaninging AC direction with Entry Mode Set command
            switch (Copy_u8_PrintingDrection)
    40ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	3e 87       	std	Y+14, r19	; 0x0e
    40d6:	2d 87       	std	Y+13, r18	; 0x0d
    40d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    40da:	5e 85       	ldd	r21, Y+14	; 0x0e
    40dc:	41 15       	cp	r20, r1
    40de:	51 05       	cpc	r21, r1
    40e0:	49 f0       	breq	.+18     	; 0x40f4 <LCD_enu_DrawSpecialCharacter+0x12a>
    40e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e6:	81 30       	cpi	r24, 0x01	; 1
    40e8:	91 05       	cpc	r25, r1
    40ea:	39 f4       	brne	.+14     	; 0x40fa <LCD_enu_DrawSpecialCharacter+0x130>
            {
                case LCD_AC_INC:
                enu_PassByteAndLatch(0x06);
    40ec:	86 e0       	ldi	r24, 0x06	; 6
    40ee:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    40f2:	03 c0       	rjmp	.+6      	; 0x40fa <LCD_enu_DrawSpecialCharacter+0x130>
                break;
            
                case LCD_AC_DEC:
                enu_PassByteAndLatch(0x04);
    40f4:	84 e0       	ldi	r24, 0x04	; 4
    40f6:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing IR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	61 e0       	ldi	r22, 0x01	; 1
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
            
            //Placing Cursor in the intended Position
            enu_PassByteAndLatch( LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    4104:	8b 85       	ldd	r24, Y+11	; 0x0b
    4106:	88 2f       	mov	r24, r24
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	9c 01       	movw	r18, r24
    410c:	21 50       	subi	r18, 0x01	; 1
    410e:	30 40       	sbci	r19, 0x00	; 0
    4110:	89 85       	ldd	r24, Y+9	; 0x09
    4112:	88 2f       	mov	r24, r24
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	82 0f       	add	r24, r18
    4122:	93 1f       	adc	r25, r19
    4124:	82 95       	swap	r24
    4126:	92 95       	swap	r25
    4128:	90 7f       	andi	r25, 0xF0	; 240
    412a:	98 27       	eor	r25, r24
    412c:	80 7f       	andi	r24, 0xF0	; 240
    412e:	98 27       	eor	r25, r24
    4130:	98 2f       	mov	r25, r24
    4132:	8a 85       	ldd	r24, Y+10	; 0x0a
    4134:	89 0f       	add	r24, r25
    4136:	81 58       	subi	r24, 0x81	; 129
    4138:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>


            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	61 e0       	ldi	r22, 0x01	; 1
    4140:	41 e0       	ldi	r20, 0x01	; 1
    4142:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4146:	19 82       	std	Y+1, r1	; 0x01
    4148:	06 c0       	rjmp	.+12     	; 0x4156 <LCD_enu_DrawSpecialCharacter+0x18c>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

            //Choosing DR
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
            
            //Printing the special character
            for(Local_u8_LoopCounter = 0; Local_u8_LoopCounter < Copy_u8_PatternSize; Local_u8_LoopCounter++)
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	8f 5f       	subi	r24, 0xFF	; 255
    4154:	89 83       	std	Y+1, r24	; 0x01
    4156:	99 81       	ldd	r25, Y+1	; 0x01
    4158:	8f 81       	ldd	r24, Y+7	; 0x07
    415a:	98 17       	cp	r25, r24
    415c:	b0 f3       	brcs	.-20     	; 0x414a <LCD_enu_DrawSpecialCharacter+0x180>
            {
                enu_PassByteAndLatch(Local_u8_LoopCounter);

            }
            
            Local_u8_ErorrFlag = ES_OK;
    415e:	1c 82       	std	Y+4, r1	; 0x04
    4160:	05 c0       	rjmp	.+10     	; 0x416c <LCD_enu_DrawSpecialCharacter+0x1a2>
        }
        else
        {
            Local_u8_ErorrFlag = ES_OUT_OF_RANGE;
    4162:	82 e0       	ldi	r24, 0x02	; 2
    4164:	8c 83       	std	Y+4, r24	; 0x04
    4166:	02 c0       	rjmp	.+4      	; 0x416c <LCD_enu_DrawSpecialCharacter+0x1a2>
        

    }
    else
    {
        Local_u8_ErorrFlag = ES_NULL_POINTER;
    4168:	83 e0       	ldi	r24, 0x03	; 3
    416a:	8c 83       	std	Y+4, r24	; 0x04
    }


    return Local_u8_ErorrFlag;
    416c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    416e:	2e 96       	adiw	r28, 0x0e	; 14
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	0f 91       	pop	r16
    4180:	ef 90       	pop	r14
    4182:	cf 90       	pop	r12
    4184:	08 95       	ret

00004186 <LCD_enu_WriteIntegerNum>:

extern ErrorState_t LCD_enu_WriteIntegerNum(s32 Copy_s32_Num,u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    4186:	0f 93       	push	r16
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	2e 97       	sbiw	r28, 0x0e	; 14
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	68 87       	std	Y+8, r22	; 0x08
    419e:	79 87       	std	Y+9, r23	; 0x09
    41a0:	8a 87       	std	Y+10, r24	; 0x0a
    41a2:	9b 87       	std	Y+11, r25	; 0x0b
    41a4:	4c 87       	std	Y+12, r20	; 0x0c
    41a6:	2d 87       	std	Y+13, r18	; 0x0d
    41a8:	0e 87       	std	Y+14, r16	; 0x0e
    u8 Local_u8_ErrorFlag = ES_NOK;
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	8b 83       	std	Y+3, r24	; 0x03
    s32 Local_u32_TempVariable;
    u8 Local_u8_DigitCount = 0;
    41ae:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8_NegativeFlag = False;
    41b0:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_s32_Num < 0)
    41b2:	88 85       	ldd	r24, Y+8	; 0x08
    41b4:	99 85       	ldd	r25, Y+9	; 0x09
    41b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    41b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    41ba:	bb 23       	and	r27, r27
    41bc:	8c f4       	brge	.+34     	; 0x41e0 <LCD_enu_WriteIntegerNum+0x5a>
    {
        local_u8_NegativeFlag = True;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32_Num *= -1;
    41c2:	88 85       	ldd	r24, Y+8	; 0x08
    41c4:	99 85       	ldd	r25, Y+9	; 0x09
    41c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    41c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    41ca:	b0 95       	com	r27
    41cc:	a0 95       	com	r26
    41ce:	90 95       	com	r25
    41d0:	81 95       	neg	r24
    41d2:	9f 4f       	sbci	r25, 0xFF	; 255
    41d4:	af 4f       	sbci	r26, 0xFF	; 255
    41d6:	bf 4f       	sbci	r27, 0xFF	; 255
    41d8:	88 87       	std	Y+8, r24	; 0x08
    41da:	99 87       	std	Y+9, r25	; 0x09
    41dc:	aa 87       	std	Y+10, r26	; 0x0a
    41de:	bb 87       	std	Y+11, r27	; 0x0b
    }

    Local_u32_TempVariable = Copy_s32_Num;
    41e0:	88 85       	ldd	r24, Y+8	; 0x08
    41e2:	99 85       	ldd	r25, Y+9	; 0x09
    41e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    41e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    41e8:	8c 83       	std	Y+4, r24	; 0x04
    41ea:	9d 83       	std	Y+5, r25	; 0x05
    41ec:	ae 83       	std	Y+6, r26	; 0x06
    41ee:	bf 83       	std	Y+7, r27	; 0x07
    //Counting Number digits 
    do
    {
        Local_u8_DigitCount++;
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	8f 5f       	subi	r24, 0xFF	; 255
    41f4:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32_TempVariable  /= 10;
    41f6:	8c 81       	ldd	r24, Y+4	; 0x04
    41f8:	9d 81       	ldd	r25, Y+5	; 0x05
    41fa:	ae 81       	ldd	r26, Y+6	; 0x06
    41fc:	bf 81       	ldd	r27, Y+7	; 0x07
    41fe:	2a e0       	ldi	r18, 0x0A	; 10
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	bc 01       	movw	r22, r24
    4208:	cd 01       	movw	r24, r26
    420a:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__divmodsi4>
    420e:	da 01       	movw	r26, r20
    4210:	c9 01       	movw	r24, r18
    4212:	8c 83       	std	Y+4, r24	; 0x04
    4214:	9d 83       	std	Y+5, r25	; 0x05
    4216:	ae 83       	std	Y+6, r26	; 0x06
    4218:	bf 83       	std	Y+7, r27	; 0x07

    }while(Local_u32_TempVariable);
    421a:	8c 81       	ldd	r24, Y+4	; 0x04
    421c:	9d 81       	ldd	r25, Y+5	; 0x05
    421e:	ae 81       	ldd	r26, Y+6	; 0x06
    4220:	bf 81       	ldd	r27, Y+7	; 0x07
    4222:	00 97       	sbiw	r24, 0x00	; 0
    4224:	a1 05       	cpc	r26, r1
    4226:	b1 05       	cpc	r27, r1
    4228:	19 f7       	brne	.-58     	; 0x41f0 <LCD_enu_WriteIntegerNum+0x6a>



    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DigitCount <= LCD_MAX_INTEGER_LENGTH))
    422a:	8c 85       	ldd	r24, Y+12	; 0x0c
    422c:	88 23       	and	r24, r24
    422e:	09 f4       	brne	.+2      	; 0x4232 <LCD_enu_WriteIntegerNum+0xac>
    4230:	87 c0       	rjmp	.+270    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    4232:	8c 85       	ldd	r24, Y+12	; 0x0c
    4234:	83 30       	cpi	r24, 0x03	; 3
    4236:	08 f0       	brcs	.+2      	; 0x423a <LCD_enu_WriteIntegerNum+0xb4>
    4238:	83 c0       	rjmp	.+262    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    423a:	8d 85       	ldd	r24, Y+13	; 0x0d
    423c:	88 23       	and	r24, r24
    423e:	09 f4       	brne	.+2      	; 0x4242 <LCD_enu_WriteIntegerNum+0xbc>
    4240:	7f c0       	rjmp	.+254    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    4242:	8d 85       	ldd	r24, Y+13	; 0x0d
    4244:	81 31       	cpi	r24, 0x11	; 17
    4246:	08 f0       	brcs	.+2      	; 0x424a <LCD_enu_WriteIntegerNum+0xc4>
    4248:	7b c0       	rjmp	.+246    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    424a:	8e 85       	ldd	r24, Y+14	; 0x0e
    424c:	85 30       	cpi	r24, 0x05	; 5
    424e:	08 f0       	brcs	.+2      	; 0x4252 <LCD_enu_WriteIntegerNum+0xcc>
    4250:	77 c0       	rjmp	.+238    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	81 31       	cpi	r24, 0x11	; 17
    4256:	08 f0       	brcs	.+2      	; 0x425a <LCD_enu_WriteIntegerNum+0xd4>
    4258:	73 c0       	rjmp	.+230    	; 0x4340 <LCD_enu_WriteIntegerNum+0x1ba>
    {
        Local_u32_TempVariable = Copy_s32_Num;
    425a:	88 85       	ldd	r24, Y+8	; 0x08
    425c:	99 85       	ldd	r25, Y+9	; 0x09
    425e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4260:	bb 85       	ldd	r27, Y+11	; 0x0b
    4262:	8c 83       	std	Y+4, r24	; 0x04
    4264:	9d 83       	std	Y+5, r25	; 0x05
    4266:	ae 83       	std	Y+6, r26	; 0x06
    4268:	bf 83       	std	Y+7, r27	; 0x07
        enu_ReverseInteger(&Local_u32_TempVariable);
    426a:	ce 01       	movw	r24, r28
    426c:	04 96       	adiw	r24, 0x04	; 4
    426e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <enu_ReverseInteger>

        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_LOW);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	61 e0       	ldi	r22, 0x01	; 1
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        //Placing Cursor
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));
    427c:	8e 85       	ldd	r24, Y+14	; 0x0e
    427e:	88 2f       	mov	r24, r24
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	9c 01       	movw	r18, r24
    4284:	21 50       	subi	r18, 0x01	; 1
    4286:	30 40       	sbci	r19, 0x00	; 0
    4288:	8c 85       	ldd	r24, Y+12	; 0x0c
    428a:	88 2f       	mov	r24, r24
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	88 0f       	add	r24, r24
    4292:	99 1f       	adc	r25, r25
    4294:	88 0f       	add	r24, r24
    4296:	99 1f       	adc	r25, r25
    4298:	82 0f       	add	r24, r18
    429a:	93 1f       	adc	r25, r19
    429c:	82 95       	swap	r24
    429e:	92 95       	swap	r25
    42a0:	90 7f       	andi	r25, 0xF0	; 240
    42a2:	98 27       	eor	r25, r24
    42a4:	80 7f       	andi	r24, 0xF0	; 240
    42a6:	98 27       	eor	r25, r24
    42a8:	98 2f       	mov	r25, r24
    42aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ac:	89 0f       	add	r24, r25
    42ae:	81 58       	subi	r24, 0x81	; 129
    42b0:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        
        //Choosing DR
        DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN,DIO_HIGH);
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	61 e0       	ldi	r22, 0x01	; 1
    42b8:	41 e0       	ldi	r20, 0x01	; 1
    42ba:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        //Printing Negative Sign
        if(local_u8_NegativeFlag)
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	88 23       	and	r24, r24
    42c2:	51 f1       	breq	.+84     	; 0x4318 <LCD_enu_WriteIntegerNum+0x192>
        {
            enu_PassByteAndLatch('-');
    42c4:	8d e2       	ldi	r24, 0x2D	; 45
    42c6:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    42ca:	26 c0       	rjmp	.+76     	; 0x4318 <LCD_enu_WriteIntegerNum+0x192>
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
        {
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
    42cc:	8c 81       	ldd	r24, Y+4	; 0x04
    42ce:	9d 81       	ldd	r25, Y+5	; 0x05
    42d0:	ae 81       	ldd	r26, Y+6	; 0x06
    42d2:	bf 81       	ldd	r27, Y+7	; 0x07
    42d4:	2a e0       	ldi	r18, 0x0A	; 10
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__divmodsi4>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	80 5d       	subi	r24, 0xD0	; 208
    42ea:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
            Local_u32_TempVariable /= 10;
    42ee:	8c 81       	ldd	r24, Y+4	; 0x04
    42f0:	9d 81       	ldd	r25, Y+5	; 0x05
    42f2:	ae 81       	ldd	r26, Y+6	; 0x06
    42f4:	bf 81       	ldd	r27, Y+7	; 0x07
    42f6:	2a e0       	ldi	r18, 0x0A	; 10
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e0       	ldi	r20, 0x00	; 0
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__divmodsi4>
    4306:	da 01       	movw	r26, r20
    4308:	c9 01       	movw	r24, r18
    430a:	8c 83       	std	Y+4, r24	; 0x04
    430c:	9d 83       	std	Y+5, r25	; 0x05
    430e:	ae 83       	std	Y+6, r26	; 0x06
    4310:	bf 83       	std	Y+7, r27	; 0x07
            Local_u8_DigitCount--;
    4312:	8a 81       	ldd	r24, Y+2	; 0x02
    4314:	81 50       	subi	r24, 0x01	; 1
    4316:	8a 83       	std	Y+2, r24	; 0x02
        {
            enu_PassByteAndLatch('-');
        }
        //Printing one digit at a time

        while (Local_u32_TempVariable)
    4318:	8c 81       	ldd	r24, Y+4	; 0x04
    431a:	9d 81       	ldd	r25, Y+5	; 0x05
    431c:	ae 81       	ldd	r26, Y+6	; 0x06
    431e:	bf 81       	ldd	r27, Y+7	; 0x07
    4320:	00 97       	sbiw	r24, 0x00	; 0
    4322:	a1 05       	cpc	r26, r1
    4324:	b1 05       	cpc	r27, r1
    4326:	91 f6       	brne	.-92     	; 0x42cc <LCD_enu_WriteIntegerNum+0x146>
    4328:	06 c0       	rjmp	.+12     	; 0x4336 <LCD_enu_WriteIntegerNum+0x1b0>
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
        {
            enu_PassByteAndLatch('0');
    432a:	80 e3       	ldi	r24, 0x30	; 48
    432c:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
            Local_u8_DigitCount--;
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	81 50       	subi	r24, 0x01	; 1
    4334:	8a 83       	std	Y+2, r24	; 0x02
            enu_PassByteAndLatch((Local_u32_TempVariable % 10) + 48);
            Local_u32_TempVariable /= 10;
            Local_u8_DigitCount--;
        }
        //Printing any trail zeroes that might have got lost when the number was reversed
        while (Local_u8_DigitCount)
    4336:	8a 81       	ldd	r24, Y+2	; 0x02
    4338:	88 23       	and	r24, r24
    433a:	b9 f7       	brne	.-18     	; 0x432a <LCD_enu_WriteIntegerNum+0x1a4>
        }
        
        
        
        
        Local_u8_ErrorFlag = ES_OK;
    433c:	1b 82       	std	Y+3, r1	; 0x03
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <LCD_enu_WriteIntegerNum+0x1be>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4340:	82 e0       	ldi	r24, 0x02	; 2
    4342:	8b 83       	std	Y+3, r24	; 0x03
    }
    


    return Local_u8_ErrorFlag;
    4344:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4346:	2e 96       	adiw	r28, 0x0e	; 14
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	cf 91       	pop	r28
    4354:	df 91       	pop	r29
    4356:	0f 91       	pop	r16
    4358:	08 95       	ret

0000435a <LCD_enu_WriteFloatNum>:

extern ErrorState_t LCD_enu_WriteFloatNum(f32 Copy_f32_Num, u8 Copy_u8_Row,u8 Copy_u8_Column,u8 Copy_u8_Page)
{
    435a:	0f 93       	push	r16
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
    4364:	67 97       	sbiw	r28, 0x17	; 23
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	69 8b       	std	Y+17, r22	; 0x11
    4372:	7a 8b       	std	Y+18, r23	; 0x12
    4374:	8b 8b       	std	Y+19, r24	; 0x13
    4376:	9c 8b       	std	Y+20, r25	; 0x14
    4378:	4d 8b       	std	Y+21, r20	; 0x15
    437a:	2e 8b       	std	Y+22, r18	; 0x16
    437c:	0f 8b       	std	Y+23, r16	; 0x17
  
    u8 Local_u8_ErrorFlag = ES_NOK;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	8c 83       	std	Y+4, r24	; 0x04
    //Temp Variables
    u32 Local_u32_WholeDigits;
    f32 Local_f32_DecimalDigits;
    u32 Local_u32_TempDecimalDigits;
    //Counters
    u8 Local_u8_WholeDigitCount = 0;
    4382:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_DecimalDigitCount = LCD_FLOAT_PRECISION;
    4384:	83 e0       	ldi	r24, 0x03	; 3
    4386:	8a 83       	std	Y+2, r24	; 0x02
    //Flags
    u8 local_u8_NegativeFlag = False;
    4388:	19 82       	std	Y+1, r1	; 0x01

    //Handling the negative case
    if(Copy_f32_Num < 0)
    438a:	69 89       	ldd	r22, Y+17	; 0x11
    438c:	7a 89       	ldd	r23, Y+18	; 0x12
    438e:	8b 89       	ldd	r24, Y+19	; 0x13
    4390:	9c 89       	ldd	r25, Y+20	; 0x14
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e0       	ldi	r20, 0x00	; 0
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    439e:	88 23       	and	r24, r24
    43a0:	5c f4       	brge	.+22     	; 0x43b8 <LCD_enu_WriteFloatNum+0x5e>
    {
        local_u8_NegativeFlag = True;
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	89 83       	std	Y+1, r24	; 0x01
        Copy_f32_Num *= -1;
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	9a 89       	ldd	r25, Y+18	; 0x12
    43aa:	ab 89       	ldd	r26, Y+19	; 0x13
    43ac:	bc 89       	ldd	r27, Y+20	; 0x14
    43ae:	b0 58       	subi	r27, 0x80	; 128
    43b0:	89 8b       	std	Y+17, r24	; 0x11
    43b2:	9a 8b       	std	Y+18, r25	; 0x12
    43b4:	ab 8b       	std	Y+19, r26	; 0x13
    43b6:	bc 8b       	std	Y+20, r27	; 0x14
    }

    

    Local_u32_WholeDigits = Copy_f32_Num;
    43b8:	69 89       	ldd	r22, Y+17	; 0x11
    43ba:	7a 89       	ldd	r23, Y+18	; 0x12
    43bc:	8b 89       	ldd	r24, Y+19	; 0x13
    43be:	9c 89       	ldd	r25, Y+20	; 0x14
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	8d 83       	std	Y+5, r24	; 0x05
    43ca:	9e 83       	std	Y+6, r25	; 0x06
    43cc:	af 83       	std	Y+7, r26	; 0x07
    43ce:	b8 87       	std	Y+8, r27	; 0x08

    Local_f32_DecimalDigits = Copy_f32_Num - Local_u32_WholeDigits;
    43d0:	8d 81       	ldd	r24, Y+5	; 0x05
    43d2:	9e 81       	ldd	r25, Y+6	; 0x06
    43d4:	af 81       	ldd	r26, Y+7	; 0x07
    43d6:	b8 85       	ldd	r27, Y+8	; 0x08
    43d8:	bc 01       	movw	r22, r24
    43da:	cd 01       	movw	r24, r26
    43dc:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    43e0:	9b 01       	movw	r18, r22
    43e2:	ac 01       	movw	r20, r24
    43e4:	69 89       	ldd	r22, Y+17	; 0x11
    43e6:	7a 89       	ldd	r23, Y+18	; 0x12
    43e8:	8b 89       	ldd	r24, Y+19	; 0x13
    43ea:	9c 89       	ldd	r25, Y+20	; 0x14
    43ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    43f0:	dc 01       	movw	r26, r24
    43f2:	cb 01       	movw	r24, r22
    43f4:	89 87       	std	Y+9, r24	; 0x09
    43f6:	9a 87       	std	Y+10, r25	; 0x0a
    43f8:	ab 87       	std	Y+11, r26	; 0x0b
    43fa:	bc 87       	std	Y+12, r27	; 0x0c


    //Counting whole digits 
    do
    {
        Local_u8_WholeDigitCount++;
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	8f 5f       	subi	r24, 0xFF	; 255
    4400:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits  /= 10;
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	af 81       	ldd	r26, Y+7	; 0x07
    4408:	b8 85       	ldd	r27, Y+8	; 0x08
    440a:	2a e0       	ldi	r18, 0x0A	; 10
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	40 e0       	ldi	r20, 0x00	; 0
    4410:	50 e0       	ldi	r21, 0x00	; 0
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    441a:	da 01       	movw	r26, r20
    441c:	c9 01       	movw	r24, r18
    441e:	8d 83       	std	Y+5, r24	; 0x05
    4420:	9e 83       	std	Y+6, r25	; 0x06
    4422:	af 83       	std	Y+7, r26	; 0x07
    4424:	b8 87       	std	Y+8, r27	; 0x08

    }while(Local_u32_WholeDigits);
    4426:	8d 81       	ldd	r24, Y+5	; 0x05
    4428:	9e 81       	ldd	r25, Y+6	; 0x06
    442a:	af 81       	ldd	r26, Y+7	; 0x07
    442c:	b8 85       	ldd	r27, Y+8	; 0x08
    442e:	00 97       	sbiw	r24, 0x00	; 0
    4430:	a1 05       	cpc	r26, r1
    4432:	b1 05       	cpc	r27, r1
    4434:	19 f7       	brne	.-58     	; 0x43fc <LCD_enu_WriteFloatNum+0xa2>

    //Converting Decimals into Whole numbers ex: 0.451 -> 451
    enu_ConvertFloatToInteger(&Local_f32_DecimalDigits, LCD_FLOAT_PRECISION);
    4436:	ce 01       	movw	r24, r28
    4438:	09 96       	adiw	r24, 0x09	; 9
    443a:	63 e0       	ldi	r22, 0x03	; 3
    443c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <enu_ConvertFloatToInteger>


    if(((Copy_u8_Row >= 1) && (Copy_u8_Row <= 2)) && ((Copy_u8_Column >= 1) && (Copy_u8_Column <= 16))  && (Copy_u8_Page <= LCD_NUMBER_OF_PAGES) && (Local_u8_DecimalDigitCount <= LCD_MAX_INTEGER_LENGTH))
    4440:	8d 89       	ldd	r24, Y+21	; 0x15
    4442:	88 23       	and	r24, r24
    4444:	09 f4       	brne	.+2      	; 0x4448 <LCD_enu_WriteFloatNum+0xee>
    4446:	e3 c0       	rjmp	.+454    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    4448:	8d 89       	ldd	r24, Y+21	; 0x15
    444a:	83 30       	cpi	r24, 0x03	; 3
    444c:	08 f0       	brcs	.+2      	; 0x4450 <LCD_enu_WriteFloatNum+0xf6>
    444e:	df c0       	rjmp	.+446    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    4450:	8e 89       	ldd	r24, Y+22	; 0x16
    4452:	88 23       	and	r24, r24
    4454:	09 f4       	brne	.+2      	; 0x4458 <LCD_enu_WriteFloatNum+0xfe>
    4456:	db c0       	rjmp	.+438    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    4458:	8e 89       	ldd	r24, Y+22	; 0x16
    445a:	81 31       	cpi	r24, 0x11	; 17
    445c:	08 f0       	brcs	.+2      	; 0x4460 <LCD_enu_WriteFloatNum+0x106>
    445e:	d7 c0       	rjmp	.+430    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    4460:	8f 89       	ldd	r24, Y+23	; 0x17
    4462:	85 30       	cpi	r24, 0x05	; 5
    4464:	08 f0       	brcs	.+2      	; 0x4468 <LCD_enu_WriteFloatNum+0x10e>
    4466:	d3 c0       	rjmp	.+422    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    4468:	8a 81       	ldd	r24, Y+2	; 0x02
    446a:	81 31       	cpi	r24, 0x11	; 17
    446c:	08 f0       	brcs	.+2      	; 0x4470 <LCD_enu_WriteFloatNum+0x116>
    446e:	cf c0       	rjmp	.+414    	; 0x460e <LCD_enu_WriteFloatNum+0x2b4>
    {
        //Choosing IR
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_LOW);
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	61 e0       	ldi	r22, 0x01	; 1
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        //Setting the Cursor in position
        enu_PassByteAndLatch(LCD_FIRST_LINE_BASE_ADDRESS + (Copy_u8_Column - 1) + (LCD_SECOND_LINE_BASE_ADDRESS - LCD_FIRST_LINE_BASE_ADDRESS)*(Copy_u8_Row - 1) + 16*(Copy_u8_Page - 1));    
    447a:	8f 89       	ldd	r24, Y+23	; 0x17
    447c:	88 2f       	mov	r24, r24
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	9c 01       	movw	r18, r24
    4482:	21 50       	subi	r18, 0x01	; 1
    4484:	30 40       	sbci	r19, 0x00	; 0
    4486:	8d 89       	ldd	r24, Y+21	; 0x15
    4488:	88 2f       	mov	r24, r24
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	88 0f       	add	r24, r24
    4490:	99 1f       	adc	r25, r25
    4492:	88 0f       	add	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	82 0f       	add	r24, r18
    4498:	93 1f       	adc	r25, r19
    449a:	82 95       	swap	r24
    449c:	92 95       	swap	r25
    449e:	90 7f       	andi	r25, 0xF0	; 240
    44a0:	98 27       	eor	r25, r24
    44a2:	80 7f       	andi	r24, 0xF0	; 240
    44a4:	98 27       	eor	r25, r24
    44a6:	98 2f       	mov	r25, r24
    44a8:	8e 89       	ldd	r24, Y+22	; 0x16
    44aa:	89 0f       	add	r24, r25
    44ac:	81 58       	subi	r24, 0x81	; 129
    44ae:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        
        
        //Choosing DR to pass numbers 
        DIO_enu_SetPinValue(LCD_RS_GROUP,LCD_RS_PIN,DIO_HIGH);
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	61 e0       	ldi	r22, 0x01	; 1
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        //Printing Negative Sign if exists
        if(local_u8_NegativeFlag)
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	88 23       	and	r24, r24
    44c0:	19 f0       	breq	.+6      	; 0x44c8 <LCD_enu_WriteFloatNum+0x16e>
        {
            enu_PassByteAndLatch('-');
    44c2:	8d e2       	ldi	r24, 0x2D	; 45
    44c4:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
        }


        //A] Printing whole digits 

        Local_u32_WholeDigits = Copy_f32_Num;
    44c8:	69 89       	ldd	r22, Y+17	; 0x11
    44ca:	7a 89       	ldd	r23, Y+18	; 0x12
    44cc:	8b 89       	ldd	r24, Y+19	; 0x13
    44ce:	9c 89       	ldd	r25, Y+20	; 0x14
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	8d 83       	std	Y+5, r24	; 0x05
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	af 83       	std	Y+7, r26	; 0x07
    44de:	b8 87       	std	Y+8, r27	; 0x08
        enu_ReverseInteger(&Local_u32_WholeDigits);
    44e0:	ce 01       	movw	r24, r28
    44e2:	05 96       	adiw	r24, 0x05	; 5
    44e4:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <enu_ReverseInteger>
    44e8:	26 c0       	rjmp	.+76     	; 0x4536 <LCD_enu_WriteFloatNum+0x1dc>

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
        {
            enu_PassByteAndLatch((Local_u32_WholeDigits % 10) + 48);
    44ea:	8d 81       	ldd	r24, Y+5	; 0x05
    44ec:	9e 81       	ldd	r25, Y+6	; 0x06
    44ee:	af 81       	ldd	r26, Y+7	; 0x07
    44f0:	b8 85       	ldd	r27, Y+8	; 0x08
    44f2:	2a e0       	ldi	r18, 0x0A	; 10
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	80 5d       	subi	r24, 0xD0	; 208
    4508:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
           
            Local_u32_WholeDigits /= 10;
    450c:	8d 81       	ldd	r24, Y+5	; 0x05
    450e:	9e 81       	ldd	r25, Y+6	; 0x06
    4510:	af 81       	ldd	r26, Y+7	; 0x07
    4512:	b8 85       	ldd	r27, Y+8	; 0x08
    4514:	2a e0       	ldi	r18, 0x0A	; 10
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	bc 01       	movw	r22, r24
    451e:	cd 01       	movw	r24, r26
    4520:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    4524:	da 01       	movw	r26, r20
    4526:	c9 01       	movw	r24, r18
    4528:	8d 83       	std	Y+5, r24	; 0x05
    452a:	9e 83       	std	Y+6, r25	; 0x06
    452c:	af 83       	std	Y+7, r26	; 0x07
    452e:	b8 87       	std	Y+8, r27	; 0x08
           
            Local_u8_WholeDigitCount--;
    4530:	8b 81       	ldd	r24, Y+3	; 0x03
    4532:	81 50       	subi	r24, 0x01	; 1
    4534:	8b 83       	std	Y+3, r24	; 0x03

        Local_u32_WholeDigits = Copy_f32_Num;
        enu_ReverseInteger(&Local_u32_WholeDigits);

        //Printing one digit at a time        
        while(Local_u32_WholeDigits)
    4536:	8d 81       	ldd	r24, Y+5	; 0x05
    4538:	9e 81       	ldd	r25, Y+6	; 0x06
    453a:	af 81       	ldd	r26, Y+7	; 0x07
    453c:	b8 85       	ldd	r27, Y+8	; 0x08
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	a1 05       	cpc	r26, r1
    4542:	b1 05       	cpc	r27, r1
    4544:	91 f6       	brne	.-92     	; 0x44ea <LCD_enu_WriteFloatNum+0x190>
    4546:	06 c0       	rjmp	.+12     	; 0x4554 <LCD_enu_WriteFloatNum+0x1fa>
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
        {
            enu_PassByteAndLatch('0');
    4548:	80 e3       	ldi	r24, 0x30	; 48
    454a:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
           
            Local_u8_WholeDigitCount--;
    454e:	8b 81       	ldd	r24, Y+3	; 0x03
    4550:	81 50       	subi	r24, 0x01	; 1
    4552:	8b 83       	std	Y+3, r24	; 0x03
           
            Local_u8_WholeDigitCount--;
        }

        //Printing any lost zeroes when the number was reversed 
        while(Local_u8_WholeDigitCount)
    4554:	8b 81       	ldd	r24, Y+3	; 0x03
    4556:	88 23       	and	r24, r24
    4558:	b9 f7       	brne	.-18     	; 0x4548 <LCD_enu_WriteFloatNum+0x1ee>
            Local_u8_WholeDigitCount--;
        }


        //B] Printing decimal digits
        if(Local_f32_DecimalDigits)
    455a:	89 85       	ldd	r24, Y+9	; 0x09
    455c:	9a 85       	ldd	r25, Y+10	; 0x0a
    455e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4560:	bc 85       	ldd	r27, Y+12	; 0x0c
    4562:	bc 01       	movw	r22, r24
    4564:	cd 01       	movw	r24, r26
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	40 e0       	ldi	r20, 0x00	; 0
    456c:	50 e0       	ldi	r21, 0x00	; 0
    456e:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    4572:	88 23       	and	r24, r24
    4574:	09 f4       	brne	.+2      	; 0x4578 <LCD_enu_WriteFloatNum+0x21e>
    4576:	49 c0       	rjmp	.+146    	; 0x460a <LCD_enu_WriteFloatNum+0x2b0>
        {
            //Printing decimal point only if decimal digit exits
            enu_PassByteAndLatch('.');
    4578:	8e e2       	ldi	r24, 0x2E	; 46
    457a:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>

            //Saving the float digits in an u32 variable to pass to other functions easily (step for Safety reasons not neaded)
            Local_u32_TempDecimalDigits = Local_f32_DecimalDigits;
    457e:	89 85       	ldd	r24, Y+9	; 0x09
    4580:	9a 85       	ldd	r25, Y+10	; 0x0a
    4582:	ab 85       	ldd	r26, Y+11	; 0x0b
    4584:	bc 85       	ldd	r27, Y+12	; 0x0c
    4586:	bc 01       	movw	r22, r24
    4588:	cd 01       	movw	r24, r26
    458a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458e:	dc 01       	movw	r26, r24
    4590:	cb 01       	movw	r24, r22
    4592:	8d 87       	std	Y+13, r24	; 0x0d
    4594:	9e 87       	std	Y+14, r25	; 0x0e
    4596:	af 87       	std	Y+15, r26	; 0x0f
    4598:	b8 8b       	std	Y+16, r27	; 0x10
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);
    459a:	ce 01       	movw	r24, r28
    459c:	0d 96       	adiw	r24, 0x0d	; 13
    459e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <enu_ReverseInteger>
    45a2:	26 c0       	rjmp	.+76     	; 0x45f0 <LCD_enu_WriteFloatNum+0x296>

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch((Local_u32_TempDecimalDigits % 10) + 48);
    45a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45a8:	af 85       	ldd	r26, Y+15	; 0x0f
    45aa:	b8 89       	ldd	r27, Y+16	; 0x10
    45ac:	2a e0       	ldi	r18, 0x0A	; 10
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	40 e0       	ldi	r20, 0x00	; 0
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	80 5d       	subi	r24, 0xD0	; 208
    45c2:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
                
                Local_u32_TempDecimalDigits /= 10;
    45c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ca:	af 85       	ldd	r26, Y+15	; 0x0f
    45cc:	b8 89       	ldd	r27, Y+16	; 0x10
    45ce:	2a e0       	ldi	r18, 0x0A	; 10
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e0       	ldi	r20, 0x00	; 0
    45d4:	50 e0       	ldi	r21, 0x00	; 0
    45d6:	bc 01       	movw	r22, r24
    45d8:	cd 01       	movw	r24, r26
    45da:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    45de:	da 01       	movw	r26, r20
    45e0:	c9 01       	movw	r24, r18
    45e2:	8d 87       	std	Y+13, r24	; 0x0d
    45e4:	9e 87       	std	Y+14, r25	; 0x0e
    45e6:	af 87       	std	Y+15, r26	; 0x0f
    45e8:	b8 8b       	std	Y+16, r27	; 0x10
                
                Local_u8_DecimalDigitCount--;
    45ea:	8a 81       	ldd	r24, Y+2	; 0x02
    45ec:	81 50       	subi	r24, 0x01	; 1
    45ee:	8a 83       	std	Y+2, r24	; 0x02
            
            //Reversing Number
            enu_ReverseInteger(&Local_u32_TempDecimalDigits);

            //Printing one digit at a time
            while(Local_u8_DecimalDigitCount)
    45f0:	8a 81       	ldd	r24, Y+2	; 0x02
    45f2:	88 23       	and	r24, r24
    45f4:	b9 f6       	brne	.-82     	; 0x45a4 <LCD_enu_WriteFloatNum+0x24a>
    45f6:	06 c0       	rjmp	.+12     	; 0x4604 <LCD_enu_WriteFloatNum+0x2aa>
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
            {
                enu_PassByteAndLatch('0');
    45f8:	80 e3       	ldi	r24, 0x30	; 48
    45fa:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
                Local_u8_DecimalDigitCount--;
    45fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4600:	81 50       	subi	r24, 0x01	; 1
    4602:	8a 83       	std	Y+2, r24	; 0x02
                
                Local_u8_DecimalDigitCount--;
            }

            //Printing any lost zeroes when the number was reversed 
            while(Local_u8_DecimalDigitCount)
    4604:	8a 81       	ldd	r24, Y+2	; 0x02
    4606:	88 23       	and	r24, r24
    4608:	b9 f7       	brne	.-18     	; 0x45f8 <LCD_enu_WriteFloatNum+0x29e>
                Local_u8_DecimalDigitCount--;
            }
            
        }

        Local_u8_ErrorFlag = ES_OK;
    460a:	1c 82       	std	Y+4, r1	; 0x04
    460c:	02 c0       	rjmp	.+4      	; 0x4612 <LCD_enu_WriteFloatNum+0x2b8>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	8c 83       	std	Y+4, r24	; 0x04
    }

    return Local_u8_ErrorFlag;
    4612:	8c 81       	ldd	r24, Y+4	; 0x04

}
    4614:	67 96       	adiw	r28, 0x17	; 23
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	0f 91       	pop	r16
    4626:	08 95       	ret

00004628 <enu_PassByteAndLatch>:


//Local Functions' implementations
static ErrorState_t enu_PassByteAndLatch(u8 Copy_u8_PassedByte)
{
    4628:	df 93       	push	r29
    462a:	cf 93       	push	r28
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	ac 97       	sbiw	r28, 0x2c	; 44
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	8c a7       	std	Y+44, r24	; 0x2c
    u8 Local_u8_ErrorFlag = ES_NOK;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	8b a7       	std	Y+43, r24	; 0x2b

    DIO_enu_SetPinValue(LCD_RW_GROUP,LCD_RW_PIN,DIO_LOW);
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	62 e0       	ldi	r22, 0x02	; 2
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    
    DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	63 e0       	ldi	r22, 0x03	; 3
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

    DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 7) & 1);
    4656:	8c a5       	ldd	r24, Y+44	; 0x2c
    4658:	98 2f       	mov	r25, r24
    465a:	99 1f       	adc	r25, r25
    465c:	99 27       	eor	r25, r25
    465e:	99 1f       	adc	r25, r25
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	67 e0       	ldi	r22, 0x07	; 7
    4664:	49 2f       	mov	r20, r25
    4666:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 6) & 1);
    466a:	8c a5       	ldd	r24, Y+44	; 0x2c
    466c:	82 95       	swap	r24
    466e:	86 95       	lsr	r24
    4670:	86 95       	lsr	r24
    4672:	83 70       	andi	r24, 0x03	; 3
    4674:	98 2f       	mov	r25, r24
    4676:	91 70       	andi	r25, 0x01	; 1
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	66 e0       	ldi	r22, 0x06	; 6
    467c:	49 2f       	mov	r20, r25
    467e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 5) & 1);
    4682:	8c a5       	ldd	r24, Y+44	; 0x2c
    4684:	82 95       	swap	r24
    4686:	86 95       	lsr	r24
    4688:	87 70       	andi	r24, 0x07	; 7
    468a:	98 2f       	mov	r25, r24
    468c:	91 70       	andi	r25, 0x01	; 1
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	65 e0       	ldi	r22, 0x05	; 5
    4692:	49 2f       	mov	r20, r25
    4694:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 4) & 1);
    4698:	8c a5       	ldd	r24, Y+44	; 0x2c
    469a:	82 95       	swap	r24
    469c:	8f 70       	andi	r24, 0x0F	; 15
    469e:	98 2f       	mov	r25, r24
    46a0:	91 70       	andi	r25, 0x01	; 1
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	64 e0       	ldi	r22, 0x04	; 4
    46a6:	49 2f       	mov	r20, r25
    46a8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);

    #elif LCD == LCD_4_BIT_MODE 

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	63 e0       	ldi	r22, 0x03	; 3
    46b0:	41 e0       	ldi	r20, 0x01	; 1
    46b2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	a0 e8       	ldi	r26, 0x80	; 128
    46bc:	bf e3       	ldi	r27, 0x3F	; 63
    46be:	8f a3       	std	Y+39, r24	; 0x27
    46c0:	98 a7       	std	Y+40, r25	; 0x28
    46c2:	a9 a7       	std	Y+41, r26	; 0x29
    46c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c6:	6f a1       	ldd	r22, Y+39	; 0x27
    46c8:	78 a5       	ldd	r23, Y+40	; 0x28
    46ca:	89 a5       	ldd	r24, Y+41	; 0x29
    46cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	4a e7       	ldi	r20, 0x7A	; 122
    46d4:	55 e4       	ldi	r21, 0x45	; 69
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	8b a3       	std	Y+35, r24	; 0x23
    46e0:	9c a3       	std	Y+36, r25	; 0x24
    46e2:	ad a3       	std	Y+37, r26	; 0x25
    46e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46e6:	6b a1       	ldd	r22, Y+35	; 0x23
    46e8:	7c a1       	ldd	r23, Y+36	; 0x24
    46ea:	8d a1       	ldd	r24, Y+37	; 0x25
    46ec:	9e a1       	ldd	r25, Y+38	; 0x26
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e8       	ldi	r20, 0x80	; 128
    46f4:	5f e3       	ldi	r21, 0x3F	; 63
    46f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46fa:	88 23       	and	r24, r24
    46fc:	2c f4       	brge	.+10     	; 0x4708 <enu_PassByteAndLatch+0xe0>
		__ticks = 1;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	9a a3       	std	Y+34, r25	; 0x22
    4704:	89 a3       	std	Y+33, r24	; 0x21
    4706:	3f c0       	rjmp	.+126    	; 0x4786 <enu_PassByteAndLatch+0x15e>
	else if (__tmp > 65535)
    4708:	6b a1       	ldd	r22, Y+35	; 0x23
    470a:	7c a1       	ldd	r23, Y+36	; 0x24
    470c:	8d a1       	ldd	r24, Y+37	; 0x25
    470e:	9e a1       	ldd	r25, Y+38	; 0x26
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	3f ef       	ldi	r19, 0xFF	; 255
    4714:	4f e7       	ldi	r20, 0x7F	; 127
    4716:	57 e4       	ldi	r21, 0x47	; 71
    4718:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    471c:	18 16       	cp	r1, r24
    471e:	4c f5       	brge	.+82     	; 0x4772 <enu_PassByteAndLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4720:	6f a1       	ldd	r22, Y+39	; 0x27
    4722:	78 a5       	ldd	r23, Y+40	; 0x28
    4724:	89 a5       	ldd	r24, Y+41	; 0x29
    4726:	9a a5       	ldd	r25, Y+42	; 0x2a
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e2       	ldi	r20, 0x20	; 32
    472e:	51 e4       	ldi	r21, 0x41	; 65
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	9a a3       	std	Y+34, r25	; 0x22
    4746:	89 a3       	std	Y+33, r24	; 0x21
    4748:	0f c0       	rjmp	.+30     	; 0x4768 <enu_PassByteAndLatch+0x140>
    474a:	80 e9       	ldi	r24, 0x90	; 144
    474c:	91 e0       	ldi	r25, 0x01	; 1
    474e:	98 a3       	std	Y+32, r25	; 0x20
    4750:	8f 8f       	std	Y+31, r24	; 0x1f
    4752:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4754:	98 a1       	ldd	r25, Y+32	; 0x20
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	f1 f7       	brne	.-4      	; 0x4756 <enu_PassByteAndLatch+0x12e>
    475a:	98 a3       	std	Y+32, r25	; 0x20
    475c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475e:	89 a1       	ldd	r24, Y+33	; 0x21
    4760:	9a a1       	ldd	r25, Y+34	; 0x22
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	9a a3       	std	Y+34, r25	; 0x22
    4766:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4768:	89 a1       	ldd	r24, Y+33	; 0x21
    476a:	9a a1       	ldd	r25, Y+34	; 0x22
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	69 f7       	brne	.-38     	; 0x474a <enu_PassByteAndLatch+0x122>
    4770:	14 c0       	rjmp	.+40     	; 0x479a <enu_PassByteAndLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4772:	6b a1       	ldd	r22, Y+35	; 0x23
    4774:	7c a1       	ldd	r23, Y+36	; 0x24
    4776:	8d a1       	ldd	r24, Y+37	; 0x25
    4778:	9e a1       	ldd	r25, Y+38	; 0x26
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	9a a3       	std	Y+34, r25	; 0x22
    4784:	89 a3       	std	Y+33, r24	; 0x21
    4786:	89 a1       	ldd	r24, Y+33	; 0x21
    4788:	9a a1       	ldd	r25, Y+34	; 0x22
    478a:	9e 8f       	std	Y+30, r25	; 0x1e
    478c:	8d 8f       	std	Y+29, r24	; 0x1d
    478e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4790:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <enu_PassByteAndLatch+0x16a>
    4796:	9e 8f       	std	Y+30, r25	; 0x1e
    4798:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	63 e0       	ldi	r22, 0x03	; 3
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        
        DIO_enu_SetPinValue(LCD_D7_GROUP,LCD_D7_PIN,(Copy_u8_PassedByte >> 3) & 1);
    47a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    47a6:	86 95       	lsr	r24
    47a8:	86 95       	lsr	r24
    47aa:	86 95       	lsr	r24
    47ac:	98 2f       	mov	r25, r24
    47ae:	91 70       	andi	r25, 0x01	; 1
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	67 e0       	ldi	r22, 0x07	; 7
    47b4:	49 2f       	mov	r20, r25
    47b6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D6_GROUP,LCD_D6_PIN,(Copy_u8_PassedByte >> 2) & 1);
    47ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    47bc:	86 95       	lsr	r24
    47be:	86 95       	lsr	r24
    47c0:	98 2f       	mov	r25, r24
    47c2:	91 70       	andi	r25, 0x01	; 1
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	66 e0       	ldi	r22, 0x06	; 6
    47c8:	49 2f       	mov	r20, r25
    47ca:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D5_GROUP,LCD_D5_PIN,(Copy_u8_PassedByte >> 1) & 1);
    47ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    47d0:	86 95       	lsr	r24
    47d2:	98 2f       	mov	r25, r24
    47d4:	91 70       	andi	r25, 0x01	; 1
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	65 e0       	ldi	r22, 0x05	; 5
    47da:	49 2f       	mov	r20, r25
    47dc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_D4_GROUP,LCD_D4_PIN,(Copy_u8_PassedByte >> 0) & 1);
    47e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    47e2:	98 2f       	mov	r25, r24
    47e4:	91 70       	andi	r25, 0x01	; 1
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	64 e0       	ldi	r22, 0x04	; 4
    47ea:	49 2f       	mov	r20, r25
    47ec:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_HIGH);
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	63 e0       	ldi	r22, 0x03	; 3
    47f4:	41 e0       	ldi	r20, 0x01	; 1
    47f6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	a0 e8       	ldi	r26, 0x80	; 128
    4800:	bf e3       	ldi	r27, 0x3F	; 63
    4802:	89 8f       	std	Y+25, r24	; 0x19
    4804:	9a 8f       	std	Y+26, r25	; 0x1a
    4806:	ab 8f       	std	Y+27, r26	; 0x1b
    4808:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480a:	69 8d       	ldd	r22, Y+25	; 0x19
    480c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    480e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	4a e7       	ldi	r20, 0x7A	; 122
    4818:	55 e4       	ldi	r21, 0x45	; 69
    481a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	8d 8b       	std	Y+21, r24	; 0x15
    4824:	9e 8b       	std	Y+22, r25	; 0x16
    4826:	af 8b       	std	Y+23, r26	; 0x17
    4828:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    482a:	6d 89       	ldd	r22, Y+21	; 0x15
    482c:	7e 89       	ldd	r23, Y+22	; 0x16
    482e:	8f 89       	ldd	r24, Y+23	; 0x17
    4830:	98 8d       	ldd	r25, Y+24	; 0x18
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e8       	ldi	r20, 0x80	; 128
    4838:	5f e3       	ldi	r21, 0x3F	; 63
    483a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    483e:	88 23       	and	r24, r24
    4840:	2c f4       	brge	.+10     	; 0x484c <enu_PassByteAndLatch+0x224>
		__ticks = 1;
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9c 8b       	std	Y+20, r25	; 0x14
    4848:	8b 8b       	std	Y+19, r24	; 0x13
    484a:	3f c0       	rjmp	.+126    	; 0x48ca <enu_PassByteAndLatch+0x2a2>
	else if (__tmp > 65535)
    484c:	6d 89       	ldd	r22, Y+21	; 0x15
    484e:	7e 89       	ldd	r23, Y+22	; 0x16
    4850:	8f 89       	ldd	r24, Y+23	; 0x17
    4852:	98 8d       	ldd	r25, Y+24	; 0x18
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	3f ef       	ldi	r19, 0xFF	; 255
    4858:	4f e7       	ldi	r20, 0x7F	; 127
    485a:	57 e4       	ldi	r21, 0x47	; 71
    485c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4860:	18 16       	cp	r1, r24
    4862:	4c f5       	brge	.+82     	; 0x48b6 <enu_PassByteAndLatch+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4864:	69 8d       	ldd	r22, Y+25	; 0x19
    4866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    486a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e2       	ldi	r20, 0x20	; 32
    4872:	51 e4       	ldi	r21, 0x41	; 65
    4874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	9c 8b       	std	Y+20, r25	; 0x14
    488a:	8b 8b       	std	Y+19, r24	; 0x13
    488c:	0f c0       	rjmp	.+30     	; 0x48ac <enu_PassByteAndLatch+0x284>
    488e:	80 e9       	ldi	r24, 0x90	; 144
    4890:	91 e0       	ldi	r25, 0x01	; 1
    4892:	9a 8b       	std	Y+18, r25	; 0x12
    4894:	89 8b       	std	Y+17, r24	; 0x11
    4896:	89 89       	ldd	r24, Y+17	; 0x11
    4898:	9a 89       	ldd	r25, Y+18	; 0x12
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	f1 f7       	brne	.-4      	; 0x489a <enu_PassByteAndLatch+0x272>
    489e:	9a 8b       	std	Y+18, r25	; 0x12
    48a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a2:	8b 89       	ldd	r24, Y+19	; 0x13
    48a4:	9c 89       	ldd	r25, Y+20	; 0x14
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	9c 8b       	std	Y+20, r25	; 0x14
    48aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ac:	8b 89       	ldd	r24, Y+19	; 0x13
    48ae:	9c 89       	ldd	r25, Y+20	; 0x14
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	69 f7       	brne	.-38     	; 0x488e <enu_PassByteAndLatch+0x266>
    48b4:	14 c0       	rjmp	.+40     	; 0x48de <enu_PassByteAndLatch+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b6:	6d 89       	ldd	r22, Y+21	; 0x15
    48b8:	7e 89       	ldd	r23, Y+22	; 0x16
    48ba:	8f 89       	ldd	r24, Y+23	; 0x17
    48bc:	98 8d       	ldd	r25, Y+24	; 0x18
    48be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	9c 8b       	std	Y+20, r25	; 0x14
    48c8:	8b 8b       	std	Y+19, r24	; 0x13
    48ca:	8b 89       	ldd	r24, Y+19	; 0x13
    48cc:	9c 89       	ldd	r25, Y+20	; 0x14
    48ce:	98 8b       	std	Y+16, r25	; 0x10
    48d0:	8f 87       	std	Y+15, r24	; 0x0f
    48d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48d4:	98 89       	ldd	r25, Y+16	; 0x10
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <enu_PassByteAndLatch+0x2ae>
    48da:	98 8b       	std	Y+16, r25	; 0x10
    48dc:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_enu_SetPinValue(LCD_EN_GROUP,LCD_EN_PIN,DIO_LOW);
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	63 e0       	ldi	r22, 0x03	; 3
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	a0 e0       	ldi	r26, 0x00	; 0
    48ee:	b0 e4       	ldi	r27, 0x40	; 64
    48f0:	8b 87       	std	Y+11, r24	; 0x0b
    48f2:	9c 87       	std	Y+12, r25	; 0x0c
    48f4:	ad 87       	std	Y+13, r26	; 0x0d
    48f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    48fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	4a e7       	ldi	r20, 0x7A	; 122
    4906:	55 e4       	ldi	r21, 0x45	; 69
    4908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	8f 83       	std	Y+7, r24	; 0x07
    4912:	98 87       	std	Y+8, r25	; 0x08
    4914:	a9 87       	std	Y+9, r26	; 0x09
    4916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4918:	6f 81       	ldd	r22, Y+7	; 0x07
    491a:	78 85       	ldd	r23, Y+8	; 0x08
    491c:	89 85       	ldd	r24, Y+9	; 0x09
    491e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e8       	ldi	r20, 0x80	; 128
    4926:	5f e3       	ldi	r21, 0x3F	; 63
    4928:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    492c:	88 23       	and	r24, r24
    492e:	2c f4       	brge	.+10     	; 0x493a <enu_PassByteAndLatch+0x312>
		__ticks = 1;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	9e 83       	std	Y+6, r25	; 0x06
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	3f c0       	rjmp	.+126    	; 0x49b8 <enu_PassByteAndLatch+0x390>
	else if (__tmp > 65535)
    493a:	6f 81       	ldd	r22, Y+7	; 0x07
    493c:	78 85       	ldd	r23, Y+8	; 0x08
    493e:	89 85       	ldd	r24, Y+9	; 0x09
    4940:	9a 85       	ldd	r25, Y+10	; 0x0a
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	3f ef       	ldi	r19, 0xFF	; 255
    4946:	4f e7       	ldi	r20, 0x7F	; 127
    4948:	57 e4       	ldi	r21, 0x47	; 71
    494a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    494e:	18 16       	cp	r1, r24
    4950:	4c f5       	brge	.+82     	; 0x49a4 <enu_PassByteAndLatch+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4952:	6b 85       	ldd	r22, Y+11	; 0x0b
    4954:	7c 85       	ldd	r23, Y+12	; 0x0c
    4956:	8d 85       	ldd	r24, Y+13	; 0x0d
    4958:	9e 85       	ldd	r25, Y+14	; 0x0e
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	40 e2       	ldi	r20, 0x20	; 32
    4960:	51 e4       	ldi	r21, 0x41	; 65
    4962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	bc 01       	movw	r22, r24
    496c:	cd 01       	movw	r24, r26
    496e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	9e 83       	std	Y+6, r25	; 0x06
    4978:	8d 83       	std	Y+5, r24	; 0x05
    497a:	0f c0       	rjmp	.+30     	; 0x499a <enu_PassByteAndLatch+0x372>
    497c:	80 e9       	ldi	r24, 0x90	; 144
    497e:	91 e0       	ldi	r25, 0x01	; 1
    4980:	9c 83       	std	Y+4, r25	; 0x04
    4982:	8b 83       	std	Y+3, r24	; 0x03
    4984:	8b 81       	ldd	r24, Y+3	; 0x03
    4986:	9c 81       	ldd	r25, Y+4	; 0x04
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <enu_PassByteAndLatch+0x360>
    498c:	9c 83       	std	Y+4, r25	; 0x04
    498e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	8d 81       	ldd	r24, Y+5	; 0x05
    4992:	9e 81       	ldd	r25, Y+6	; 0x06
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    499a:	8d 81       	ldd	r24, Y+5	; 0x05
    499c:	9e 81       	ldd	r25, Y+6	; 0x06
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	69 f7       	brne	.-38     	; 0x497c <enu_PassByteAndLatch+0x354>
    49a2:	14 c0       	rjmp	.+40     	; 0x49cc <enu_PassByteAndLatch+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a4:	6f 81       	ldd	r22, Y+7	; 0x07
    49a6:	78 85       	ldd	r23, Y+8	; 0x08
    49a8:	89 85       	ldd	r24, Y+9	; 0x09
    49aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	9e 83       	std	Y+6, r25	; 0x06
    49b6:	8d 83       	std	Y+5, r24	; 0x05
    49b8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ba:	9e 81       	ldd	r25, Y+6	; 0x06
    49bc:	9a 83       	std	Y+2, r25	; 0x02
    49be:	89 83       	std	Y+1, r24	; 0x01
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <enu_PassByteAndLatch+0x39c>
    49c8:	9a 83       	std	Y+2, r25	; 0x02
    49ca:	89 83       	std	Y+1, r24	; 0x01


    //LCD MPU command delay
    _delay_ms(2);

    Local_u8_ErrorFlag = ES_OK; //Should be grouped in an array and returned after a for loop 
    49cc:	1b a6       	std	Y+43, r1	; 0x2b
    return Local_u8_ErrorFlag;
    49ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    

}
    49d0:	ac 96       	adiw	r28, 0x2c	; 44
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	cf 91       	pop	r28
    49de:	df 91       	pop	r29
    49e0:	08 95       	ret

000049e2 <enu_AddCustomCharacter>:

static ErrorState_t enu_AddCustomCharacter(u8* Copy_au8_CharacterCode,u8 Copy_u8_PatternNumber)
{
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	27 97       	sbiw	r28, 0x07	; 7
    49ec:	0f b6       	in	r0, 0x3f	; 63
    49ee:	f8 94       	cli
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	0f be       	out	0x3f, r0	; 63
    49f4:	cd bf       	out	0x3d, r28	; 61
    49f6:	9c 83       	std	Y+4, r25	; 0x04
    49f8:	8b 83       	std	Y+3, r24	; 0x03
    49fa:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Copy_au8_CharacterCode)
    4a00:	8b 81       	ldd	r24, Y+3	; 0x03
    4a02:	9c 81       	ldd	r25, Y+4	; 0x04
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <enu_AddCustomCharacter+0x28>
    4a08:	79 c0       	rjmp	.+242    	; 0x4afc <enu_AddCustomCharacter+0x11a>
    {   
        if(Copy_u8_PatternNumber <= LCD_CUSTOM_PATTERN_7)
    4a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0c:	88 30       	cpi	r24, 0x08	; 8
    4a0e:	08 f0       	brcs	.+2      	; 0x4a12 <enu_AddCustomCharacter+0x30>
    4a10:	72 c0       	rjmp	.+228    	; 0x4af6 <enu_AddCustomCharacter+0x114>
        {

            u8 Local_u8_Counter = 0;
    4a12:	19 82       	std	Y+1, r1	; 0x01
            
            //Choosing IR to send A command
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_LOW);
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	61 e0       	ldi	r22, 0x01	; 1
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
            
            switch (Copy_u8_PatternNumber)
    4a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a20:	28 2f       	mov	r18, r24
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	3f 83       	std	Y+7, r19	; 0x07
    4a26:	2e 83       	std	Y+6, r18	; 0x06
    4a28:	8e 81       	ldd	r24, Y+6	; 0x06
    4a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a2c:	83 30       	cpi	r24, 0x03	; 3
    4a2e:	91 05       	cpc	r25, r1
    4a30:	a9 f1       	breq	.+106    	; 0x4a9c <enu_AddCustomCharacter+0xba>
    4a32:	2e 81       	ldd	r18, Y+6	; 0x06
    4a34:	3f 81       	ldd	r19, Y+7	; 0x07
    4a36:	24 30       	cpi	r18, 0x04	; 4
    4a38:	31 05       	cpc	r19, r1
    4a3a:	7c f4       	brge	.+30     	; 0x4a5a <enu_AddCustomCharacter+0x78>
    4a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a40:	81 30       	cpi	r24, 0x01	; 1
    4a42:	91 05       	cpc	r25, r1
    4a44:	19 f1       	breq	.+70     	; 0x4a8c <enu_AddCustomCharacter+0xaa>
    4a46:	2e 81       	ldd	r18, Y+6	; 0x06
    4a48:	3f 81       	ldd	r19, Y+7	; 0x07
    4a4a:	22 30       	cpi	r18, 0x02	; 2
    4a4c:	31 05       	cpc	r19, r1
    4a4e:	14 f5       	brge	.+68     	; 0x4a94 <enu_AddCustomCharacter+0xb2>
    4a50:	8e 81       	ldd	r24, Y+6	; 0x06
    4a52:	9f 81       	ldd	r25, Y+7	; 0x07
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	b1 f0       	breq	.+44     	; 0x4a84 <enu_AddCustomCharacter+0xa2>
    4a58:	34 c0       	rjmp	.+104    	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
    4a5a:	2e 81       	ldd	r18, Y+6	; 0x06
    4a5c:	3f 81       	ldd	r19, Y+7	; 0x07
    4a5e:	25 30       	cpi	r18, 0x05	; 5
    4a60:	31 05       	cpc	r19, r1
    4a62:	21 f1       	breq	.+72     	; 0x4aac <enu_AddCustomCharacter+0xca>
    4a64:	8e 81       	ldd	r24, Y+6	; 0x06
    4a66:	9f 81       	ldd	r25, Y+7	; 0x07
    4a68:	85 30       	cpi	r24, 0x05	; 5
    4a6a:	91 05       	cpc	r25, r1
    4a6c:	dc f0       	brlt	.+54     	; 0x4aa4 <enu_AddCustomCharacter+0xc2>
    4a6e:	2e 81       	ldd	r18, Y+6	; 0x06
    4a70:	3f 81       	ldd	r19, Y+7	; 0x07
    4a72:	26 30       	cpi	r18, 0x06	; 6
    4a74:	31 05       	cpc	r19, r1
    4a76:	f1 f0       	breq	.+60     	; 0x4ab4 <enu_AddCustomCharacter+0xd2>
    4a78:	8e 81       	ldd	r24, Y+6	; 0x06
    4a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a7c:	87 30       	cpi	r24, 0x07	; 7
    4a7e:	91 05       	cpc	r25, r1
    4a80:	e9 f0       	breq	.+58     	; 0x4abc <enu_AddCustomCharacter+0xda>
    4a82:	1f c0       	rjmp	.+62     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
            {
                //Setting the custom pattern base address in AC

                case LCD_CUSTOM_PATTERN_0:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_0_BASE_ADDRESS);
    4a84:	80 e4       	ldi	r24, 0x40	; 64
    4a86:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4a8a:	1b c0       	rjmp	.+54     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;
                
                case LCD_CUSTOM_PATTERN_1:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_1_BASE_ADDRESS);
    4a8c:	88 e4       	ldi	r24, 0x48	; 72
    4a8e:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4a92:	17 c0       	rjmp	.+46     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;

                case LCD_CUSTOM_PATTERN_2:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_2_BASE_ADDRESS);
    4a94:	80 e5       	ldi	r24, 0x50	; 80
    4a96:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4a9a:	13 c0       	rjmp	.+38     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_3:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_3_BASE_ADDRESS);
    4a9c:	88 e5       	ldi	r24, 0x58	; 88
    4a9e:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4aa2:	0f c0       	rjmp	.+30     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_4:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_4_BASE_ADDRESS);
    4aa4:	80 e6       	ldi	r24, 0x60	; 96
    4aa6:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4aaa:	0b c0       	rjmp	.+22     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_5:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_5_BASE_ADDRESS);
    4aac:	88 e6       	ldi	r24, 0x68	; 104
    4aae:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4ab2:	07 c0       	rjmp	.+14     	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;           
                
                case LCD_CUSTOM_PATTERN_6:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_6_BASE_ADDRESS);
    4ab4:	80 e7       	ldi	r24, 0x70	; 112
    4ab6:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
    4aba:	03 c0       	rjmp	.+6      	; 0x4ac2 <enu_AddCustomCharacter+0xe0>
                break;           

                case LCD_CUSTOM_PATTERN_7:
                enu_PassByteAndLatch(LCD_CUSTOM_PATTERN_7_BASE_ADDRESS);
    4abc:	88 e7       	ldi	r24, 0x78	; 120
    4abe:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
                default:
                break;
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	61 e0       	ldi	r22, 0x01	; 1
    4ac6:	41 e0       	ldi	r20, 0x01	; 1
    4ac8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4acc:	19 82       	std	Y+1, r1	; 0x01
    4ace:	0e c0       	rjmp	.+28     	; 0x4aec <enu_AddCustomCharacter+0x10a>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ada:	fc 01       	movw	r30, r24
    4adc:	e2 0f       	add	r30, r18
    4ade:	f3 1f       	adc	r31, r19
    4ae0:	80 81       	ld	r24, Z
    4ae2:	0e 94 14 23 	call	0x4628	; 0x4628 <enu_PassByteAndLatch>
            }

            //Choosing DR to send data
            DIO_enu_SetPinValue(LCD_RS_GROUP, LCD_RS_PIN, DIO_HIGH);

            for(Local_u8_Counter = 0; Local_u8_Counter < 8; Local_u8_Counter++)
    4ae6:	89 81       	ldd	r24, Y+1	; 0x01
    4ae8:	8f 5f       	subi	r24, 0xFF	; 255
    4aea:	89 83       	std	Y+1, r24	; 0x01
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	88 30       	cpi	r24, 0x08	; 8
    4af0:	78 f3       	brcs	.-34     	; 0x4ad0 <enu_AddCustomCharacter+0xee>
            {
                enu_PassByteAndLatch(Copy_au8_CharacterCode[Local_u8_Counter]);
            }

            Local_u8_ErrorFlag = ES_OK;
    4af2:	1a 82       	std	Y+2, r1	; 0x02
    4af4:	05 c0       	rjmp	.+10     	; 0x4b00 <enu_AddCustomCharacter+0x11e>

        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	8a 83       	std	Y+2, r24	; 0x02
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <enu_AddCustomCharacter+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4afc:	83 e0       	ldi	r24, 0x03	; 3
    4afe:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_u8_ErrorFlag;
    4b00:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4b02:	27 96       	adiw	r28, 0x07	; 7
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
    4b0e:	cf 91       	pop	r28
    4b10:	df 91       	pop	r29
    4b12:	08 95       	ret

00004b14 <enu_ConvertDigitToASCII>:

static ErrorState_t enu_ConvertDigitToASCII(u8 *Copy_u8_Digit)
{
    4b14:	df 93       	push	r29
    4b16:	cf 93       	push	r28
    4b18:	00 d0       	rcall	.+0      	; 0x4b1a <enu_ConvertDigitToASCII+0x6>
    4b1a:	0f 92       	push	r0
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	9b 83       	std	Y+3, r25	; 0x03
    4b22:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErorFlag = ES_NOK;
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Digit)
    4b28:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	89 f0       	breq	.+34     	; 0x4b52 <enu_ConvertDigitToASCII+0x3e>
    {
        if(((*Copy_u8_Digit >= 0) && (*Copy_u8_Digit <= 9)))
    4b30:	ea 81       	ldd	r30, Y+2	; 0x02
    4b32:	fb 81       	ldd	r31, Y+3	; 0x03
    4b34:	80 81       	ld	r24, Z
    4b36:	8a 30       	cpi	r24, 0x0A	; 10
    4b38:	48 f4       	brcc	.+18     	; 0x4b4c <enu_ConvertDigitToASCII+0x38>
        {

            *Copy_u8_Digit = *Copy_u8_Digit + 48;
    4b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    4b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    4b3e:	80 81       	ld	r24, Z
    4b40:	80 5d       	subi	r24, 0xD0	; 208
    4b42:	ea 81       	ldd	r30, Y+2	; 0x02
    4b44:	fb 81       	ldd	r31, Y+3	; 0x03
    4b46:	80 83       	st	Z, r24
            Local_u8_ErorFlag = ES_OK;
    4b48:	19 82       	std	Y+1, r1	; 0x01
    4b4a:	05 c0       	rjmp	.+10     	; 0x4b56 <enu_ConvertDigitToASCII+0x42>
        }
        else
        {
            Local_u8_ErorFlag = ES_OUT_OF_RANGE;
    4b4c:	82 e0       	ldi	r24, 0x02	; 2
    4b4e:	89 83       	std	Y+1, r24	; 0x01
    4b50:	02 c0       	rjmp	.+4      	; 0x4b56 <enu_ConvertDigitToASCII+0x42>
        }
    }
    else
    {
        Local_u8_ErorFlag = ES_NULL_POINTER;
    4b52:	83 e0       	ldi	r24, 0x03	; 3
    4b54:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErorFlag;
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b58:	0f 90       	pop	r0
    4b5a:	0f 90       	pop	r0
    4b5c:	0f 90       	pop	r0
    4b5e:	cf 91       	pop	r28
    4b60:	df 91       	pop	r29
    4b62:	08 95       	ret

00004b64 <enu_ReverseInteger>:

static ErrorState_t enu_ReverseInteger(u32* Copy_pu32_Num)
{
    4b64:	ef 92       	push	r14
    4b66:	ff 92       	push	r15
    4b68:	0f 93       	push	r16
    4b6a:	1f 93       	push	r17
    4b6c:	df 93       	push	r29
    4b6e:	cf 93       	push	r28
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62
    4b74:	27 97       	sbiw	r28, 0x07	; 7
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	f8 94       	cli
    4b7a:	de bf       	out	0x3e, r29	; 62
    4b7c:	0f be       	out	0x3f, r0	; 63
    4b7e:	cd bf       	out	0x3d, r28	; 61
    4b80:	9f 83       	std	Y+7, r25	; 0x07
    4b82:	8e 83       	std	Y+6, r24	; 0x06
    //Must cast any to u32 when using this function

    u8 Local_u8_ErrorFlag = ES_OK;
    4b84:	1d 82       	std	Y+5, r1	; 0x05

    if(Copy_pu32_Num)
    4b86:	8e 81       	ldd	r24, Y+6	; 0x06
    4b88:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	09 f4       	brne	.+2      	; 0x4b90 <enu_ReverseInteger+0x2c>
    4b8e:	58 c0       	rjmp	.+176    	; 0x4c40 <enu_ReverseInteger+0xdc>
    {   
        u32 Local_u32_ReversedNum = 0;
    4b90:	19 82       	std	Y+1, r1	; 0x01
    4b92:	1a 82       	std	Y+2, r1	; 0x02
    4b94:	1b 82       	std	Y+3, r1	; 0x03
    4b96:	1c 82       	std	Y+4, r1	; 0x04
    4b98:	3c c0       	rjmp	.+120    	; 0x4c12 <enu_ReverseInteger+0xae>
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
    4b9a:	89 81       	ldd	r24, Y+1	; 0x01
    4b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9e:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba0:	bc 81       	ldd	r27, Y+4	; 0x04
    4ba2:	2a e0       	ldi	r18, 0x0A	; 10
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e0       	ldi	r20, 0x00	; 0
    4ba8:	50 e0       	ldi	r21, 0x00	; 0
    4baa:	bc 01       	movw	r22, r24
    4bac:	cd 01       	movw	r24, r26
    4bae:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsi3>
    4bb2:	7b 01       	movw	r14, r22
    4bb4:	8c 01       	movw	r16, r24
    4bb6:	ee 81       	ldd	r30, Y+6	; 0x06
    4bb8:	ff 81       	ldd	r31, Y+7	; 0x07
    4bba:	80 81       	ld	r24, Z
    4bbc:	91 81       	ldd	r25, Z+1	; 0x01
    4bbe:	a2 81       	ldd	r26, Z+2	; 0x02
    4bc0:	b3 81       	ldd	r27, Z+3	; 0x03
    4bc2:	2a e0       	ldi	r18, 0x0A	; 10
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e0       	ldi	r20, 0x00	; 0
    4bc8:	50 e0       	ldi	r21, 0x00	; 0
    4bca:	bc 01       	movw	r22, r24
    4bcc:	cd 01       	movw	r24, r26
    4bce:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	8e 0d       	add	r24, r14
    4bd8:	9f 1d       	adc	r25, r15
    4bda:	a0 1f       	adc	r26, r16
    4bdc:	b1 1f       	adc	r27, r17
    4bde:	89 83       	std	Y+1, r24	; 0x01
    4be0:	9a 83       	std	Y+2, r25	; 0x02
    4be2:	ab 83       	std	Y+3, r26	; 0x03
    4be4:	bc 83       	std	Y+4, r27	; 0x04
            *Copy_pu32_Num /= 10;
    4be6:	ee 81       	ldd	r30, Y+6	; 0x06
    4be8:	ff 81       	ldd	r31, Y+7	; 0x07
    4bea:	80 81       	ld	r24, Z
    4bec:	91 81       	ldd	r25, Z+1	; 0x01
    4bee:	a2 81       	ldd	r26, Z+2	; 0x02
    4bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    4bf2:	2a e0       	ldi	r18, 0x0A	; 10
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e0       	ldi	r20, 0x00	; 0
    4bf8:	50 e0       	ldi	r21, 0x00	; 0
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	cd 01       	movw	r24, r26
    4bfe:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    4c02:	da 01       	movw	r26, r20
    4c04:	c9 01       	movw	r24, r18
    4c06:	ee 81       	ldd	r30, Y+6	; 0x06
    4c08:	ff 81       	ldd	r31, Y+7	; 0x07
    4c0a:	80 83       	st	Z, r24
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	a2 83       	std	Z+2, r26	; 0x02
    4c10:	b3 83       	std	Z+3, r27	; 0x03
    u8 Local_u8_ErrorFlag = ES_OK;

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
    4c12:	ee 81       	ldd	r30, Y+6	; 0x06
    4c14:	ff 81       	ldd	r31, Y+7	; 0x07
    4c16:	80 81       	ld	r24, Z
    4c18:	91 81       	ldd	r25, Z+1	; 0x01
    4c1a:	a2 81       	ldd	r26, Z+2	; 0x02
    4c1c:	b3 81       	ldd	r27, Z+3	; 0x03
    4c1e:	00 97       	sbiw	r24, 0x00	; 0
    4c20:	a1 05       	cpc	r26, r1
    4c22:	b1 05       	cpc	r27, r1
    4c24:	09 f0       	breq	.+2      	; 0x4c28 <enu_ReverseInteger+0xc4>
    4c26:	b9 cf       	rjmp	.-142    	; 0x4b9a <enu_ReverseInteger+0x36>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
    4c28:	ee 81       	ldd	r30, Y+6	; 0x06
    4c2a:	ff 81       	ldd	r31, Y+7	; 0x07
    4c2c:	89 81       	ldd	r24, Y+1	; 0x01
    4c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c30:	ab 81       	ldd	r26, Y+3	; 0x03
    4c32:	bc 81       	ldd	r27, Y+4	; 0x04
    4c34:	80 83       	st	Z, r24
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	a2 83       	std	Z+2, r26	; 0x02
    4c3a:	b3 83       	std	Z+3, r27	; 0x03

        Local_u8_ErrorFlag = ES_OK;
    4c3c:	1d 82       	std	Y+5, r1	; 0x05
    4c3e:	02 c0       	rjmp	.+4      	; 0x4c44 <enu_ReverseInteger+0xe0>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4c40:	83 e0       	ldi	r24, 0x03	; 3
    4c42:	8d 83       	std	Y+5, r24	; 0x05
    }

    return Local_u8_ErrorFlag;
    4c44:	8d 81       	ldd	r24, Y+5	; 0x05

}
    4c46:	27 96       	adiw	r28, 0x07	; 7
    4c48:	0f b6       	in	r0, 0x3f	; 63
    4c4a:	f8 94       	cli
    4c4c:	de bf       	out	0x3e, r29	; 62
    4c4e:	0f be       	out	0x3f, r0	; 63
    4c50:	cd bf       	out	0x3d, r28	; 61
    4c52:	cf 91       	pop	r28
    4c54:	df 91       	pop	r29
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	08 95       	ret

00004c60 <enu_ConvertFloatToInteger>:

static ErrorState_t enu_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
    4c60:	ef 92       	push	r14
    4c62:	ff 92       	push	r15
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	df 93       	push	r29
    4c6a:	cf 93       	push	r28
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	2c 97       	sbiw	r28, 0x0c	; 12
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61
    4c7c:	9b 87       	std	Y+11, r25	; 0x0b
    4c7e:	8a 87       	std	Y+10, r24	; 0x0a
    4c80:	6c 87       	std	Y+12, r22	; 0x0c
    u8 Local_u8_ErrorFlag = ES_OK;
    4c82:	19 86       	std	Y+9, r1	; 0x09
    u32 Local_u32_CheckVariable = 0;
    4c84:	1d 82       	std	Y+5, r1	; 0x05
    4c86:	1e 82       	std	Y+6, r1	; 0x06
    4c88:	1f 82       	std	Y+7, r1	; 0x07
    4c8a:	18 86       	std	Y+8, r1	; 0x08
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    4c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <enu_ConvertFloatToInteger+0x36>
    4c94:	90 c0       	rjmp	.+288    	; 0x4db6 <enu_ConvertFloatToInteger+0x156>
    4c96:	29 c0       	rjmp	.+82     	; 0x4cea <enu_ConvertFloatToInteger+0x8a>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
    4c98:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c9a:	fb 85       	ldd	r31, Y+11	; 0x0b
    4c9c:	80 81       	ld	r24, Z
    4c9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ca0:	a2 81       	ldd	r26, Z+2	; 0x02
    4ca2:	b3 81       	ldd	r27, Z+3	; 0x03
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	cd 01       	movw	r24, r26
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	40 e2       	ldi	r20, 0x20	; 32
    4cae:	51 e4       	ldi	r21, 0x41	; 65
    4cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb4:	dc 01       	movw	r26, r24
    4cb6:	cb 01       	movw	r24, r22
    4cb8:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cba:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cbc:	80 83       	st	Z, r24
    4cbe:	91 83       	std	Z+1, r25	; 0x01
    4cc0:	a2 83       	std	Z+2, r26	; 0x02
    4cc2:	b3 83       	std	Z+3, r27	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
    4cc4:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cc6:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cc8:	80 81       	ld	r24, Z
    4cca:	91 81       	ldd	r25, Z+1	; 0x01
    4ccc:	a2 81       	ldd	r26, Z+2	; 0x02
    4cce:	b3 81       	ldd	r27, Z+3	; 0x03
    4cd0:	bc 01       	movw	r22, r24
    4cd2:	cd 01       	movw	r24, r26
    4cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	8d 83       	std	Y+5, r24	; 0x05
    4cde:	9e 83       	std	Y+6, r25	; 0x06
    4ce0:	af 83       	std	Y+7, r26	; 0x07
    4ce2:	b8 87       	std	Y+8, r27	; 0x08

            Copy_u8_FloatPrecision--;
    4ce4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ce6:	81 50       	subi	r24, 0x01	; 1
    4ce8:	8c 87       	std	Y+12, r24	; 0x0c
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
    4cea:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cec:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cee:	e0 80       	ld	r14, Z
    4cf0:	f1 80       	ldd	r15, Z+1	; 0x01
    4cf2:	02 81       	ldd	r16, Z+2	; 0x02
    4cf4:	13 81       	ldd	r17, Z+3	; 0x03
    4cf6:	6d 81       	ldd	r22, Y+5	; 0x05
    4cf8:	7e 81       	ldd	r23, Y+6	; 0x06
    4cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    4cfc:	98 85       	ldd	r25, Y+8	; 0x08
    4cfe:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    4d02:	9b 01       	movw	r18, r22
    4d04:	ac 01       	movw	r20, r24
    4d06:	c8 01       	movw	r24, r16
    4d08:	b7 01       	movw	r22, r14
    4d0a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4d0e:	dc 01       	movw	r26, r24
    4d10:	cb 01       	movw	r24, r22
    4d12:	bc 01       	movw	r22, r24
    4d14:	cd 01       	movw	r24, r26
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 e0       	ldi	r20, 0x00	; 0
    4d1c:	50 e0       	ldi	r21, 0x00	; 0
    4d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    4d22:	88 23       	and	r24, r24
    4d24:	09 f0       	breq	.+2      	; 0x4d28 <enu_ConvertFloatToInteger+0xc8>
    4d26:	b8 cf       	rjmp	.-144    	; 0x4c98 <enu_ConvertFloatToInteger+0x38>
    4d28:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d2a:	88 23       	and	r24, r24
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <enu_ConvertFloatToInteger+0xd0>
    4d2e:	b4 cf       	rjmp	.-152    	; 0x4c98 <enu_ConvertFloatToInteger+0x38>
            Copy_u8_FloatPrecision--;

        }


        Local_f32_TempDecimalDigits = *Copy_f32_DecimalDigits - Local_u32_CheckVariable;
    4d30:	ea 85       	ldd	r30, Y+10	; 0x0a
    4d32:	fb 85       	ldd	r31, Y+11	; 0x0b
    4d34:	e0 80       	ld	r14, Z
    4d36:	f1 80       	ldd	r15, Z+1	; 0x01
    4d38:	02 81       	ldd	r16, Z+2	; 0x02
    4d3a:	13 81       	ldd	r17, Z+3	; 0x03
    4d3c:	6d 81       	ldd	r22, Y+5	; 0x05
    4d3e:	7e 81       	ldd	r23, Y+6	; 0x06
    4d40:	8f 81       	ldd	r24, Y+7	; 0x07
    4d42:	98 85       	ldd	r25, Y+8	; 0x08
    4d44:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    4d48:	9b 01       	movw	r18, r22
    4d4a:	ac 01       	movw	r20, r24
    4d4c:	c8 01       	movw	r24, r16
    4d4e:	b7 01       	movw	r22, r14
    4d50:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	89 83       	std	Y+1, r24	; 0x01
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	ab 83       	std	Y+3, r26	; 0x03
    4d5e:	bc 83       	std	Y+4, r27	; 0x04
        Local_f32_TempDecimalDigits *= 10;
    4d60:	69 81       	ldd	r22, Y+1	; 0x01
    4d62:	7a 81       	ldd	r23, Y+2	; 0x02
    4d64:	8b 81       	ldd	r24, Y+3	; 0x03
    4d66:	9c 81       	ldd	r25, Y+4	; 0x04
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e2       	ldi	r20, 0x20	; 32
    4d6e:	51 e4       	ldi	r21, 0x41	; 65
    4d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	89 83       	std	Y+1, r24	; 0x01
    4d7a:	9a 83       	std	Y+2, r25	; 0x02
    4d7c:	ab 83       	std	Y+3, r26	; 0x03
    4d7e:	bc 83       	std	Y+4, r27	; 0x04

        // First decimal digit is acquired
        Local_u32_CheckVariable = Local_f32_TempDecimalDigits;
    4d80:	69 81       	ldd	r22, Y+1	; 0x01
    4d82:	7a 81       	ldd	r23, Y+2	; 0x02
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	cb 01       	movw	r24, r22
    4d90:	8d 83       	std	Y+5, r24	; 0x05
    4d92:	9e 83       	std	Y+6, r25	; 0x06
    4d94:	af 83       	std	Y+7, r26	; 0x07
    4d96:	b8 87       	std	Y+8, r27	; 0x08

        //Rounding number
        if(Local_u32_CheckVariable >= 5)
    4d98:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9c:	af 81       	ldd	r26, Y+7	; 0x07
    4d9e:	b8 85       	ldd	r27, Y+8	; 0x08
    4da0:	85 30       	cpi	r24, 0x05	; 5
    4da2:	91 05       	cpc	r25, r1
    4da4:	a1 05       	cpc	r26, r1
    4da6:	b1 05       	cpc	r27, r1
    4da8:	40 f0       	brcs	.+16     	; 0x4dba <enu_ConvertFloatToInteger+0x15a>
        {
            *Copy_f32_DecimalDigits++;
    4daa:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dac:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dae:	04 96       	adiw	r24, 0x04	; 4
    4db0:	9b 87       	std	Y+11, r25	; 0x0b
    4db2:	8a 87       	std	Y+10, r24	; 0x0a
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <enu_ConvertFloatToInteger+0x15a>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    4db6:	83 e0       	ldi	r24, 0x03	; 3
    4db8:	89 87       	std	Y+9, r24	; 0x09
    }

    return Local_u8_ErrorFlag;
    4dba:	89 85       	ldd	r24, Y+9	; 0x09
}
    4dbc:	2c 96       	adiw	r28, 0x0c	; 12
    4dbe:	0f b6       	in	r0, 0x3f	; 63
    4dc0:	f8 94       	cli
    4dc2:	de bf       	out	0x3e, r29	; 62
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	cd bf       	out	0x3d, r28	; 61
    4dc8:	cf 91       	pop	r28
    4dca:	df 91       	pop	r29
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	ff 90       	pop	r15
    4dd2:	ef 90       	pop	r14
    4dd4:	08 95       	ret

00004dd6 <Keypad_enu_Initialization>:
                                                         {KEYPAD_C1_GROUP,KEYPAD_C1_PIN},
                                                         {KEYPAD_C2_GROUP,KEYPAD_C2_PIN},
                                                         {KEYPAD_C3_GROUP,KEYPAD_C3_PIN}};

extern ErrorState_t Keypad_enu_Initialization(void)
{   
    4dd6:	df 93       	push	r29
    4dd8:	cf 93       	push	r28
    4dda:	00 d0       	rcall	.+0      	; 0x4ddc <Keypad_enu_Initialization+0x6>
    4ddc:	cd b7       	in	r28, 0x3d	; 61
    4dde:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	8a 83       	std	Y+2, r24	; 0x02
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
    4de4:	19 82       	std	Y+1, r1	; 0x01
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4de6:	19 82       	std	Y+1, r1	; 0x01
    4de8:	31 c0       	rjmp	.+98     	; 0x4e4c <Keypad_enu_Initialization+0x76>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	88 2f       	mov	r24, r24
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	88 0f       	add	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	fc 01       	movw	r30, r24
    4df6:	eb 57       	subi	r30, 0x7B	; 123
    4df8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dfa:	20 81       	ld	r18, Z
    4dfc:	89 81       	ldd	r24, Y+1	; 0x01
    4dfe:	88 2f       	mov	r24, r24
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	88 0f       	add	r24, r24
    4e04:	99 1f       	adc	r25, r25
    4e06:	fc 01       	movw	r30, r24
    4e08:	ea 57       	subi	r30, 0x7A	; 122
    4e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0c:	90 81       	ld	r25, Z
    4e0e:	82 2f       	mov	r24, r18
    4e10:	69 2f       	mov	r22, r25
    4e12:	40 e0       	ldi	r20, 0x00	; 0
    4e14:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	88 2f       	mov	r24, r24
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	88 0f       	add	r24, r24
    4e20:	99 1f       	adc	r25, r25
    4e22:	fc 01       	movw	r30, r24
    4e24:	eb 57       	subi	r30, 0x7B	; 123
    4e26:	fe 4f       	sbci	r31, 0xFE	; 254
    4e28:	20 81       	ld	r18, Z
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	88 2f       	mov	r24, r24
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	88 0f       	add	r24, r24
    4e32:	99 1f       	adc	r25, r25
    4e34:	fc 01       	movw	r30, r24
    4e36:	ea 57       	subi	r30, 0x7A	; 122
    4e38:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3a:	90 81       	ld	r25, Z
    4e3c:	82 2f       	mov	r24, r18
    4e3e:	69 2f       	mov	r22, r25
    4e40:	41 e0       	ldi	r20, 0x01	; 1
    4e42:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <DIO_enu_SetPinState>
    
     
    #if (KEYPAD_ROWS_NUMBER >= 1 && KEYPAD_ROWS_NUMBER <= KEYPAD_ROWS_MAX_NUMBER) && (KEYPAD_COLUMNS_NUMBER >= 1 && KEYPAD_COLUMNS_NUMBER <= KEYPAD_COLUMNS_MAX_NUMBER ) 
        u8 Local_u8_Counter = 0;
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_ROWS_NUMBER; Local_u8_Counter++)
    4e46:	89 81       	ldd	r24, Y+1	; 0x01
    4e48:	8f 5f       	subi	r24, 0xFF	; 255
    4e4a:	89 83       	std	Y+1, r24	; 0x01
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	84 30       	cpi	r24, 0x04	; 4
    4e50:	60 f2       	brcs	.-104    	; 0x4dea <Keypad_enu_Initialization+0x14>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4e52:	19 82       	std	Y+1, r1	; 0x01
    4e54:	31 c0       	rjmp	.+98     	; 0x4eb8 <Keypad_enu_Initialization+0xe2>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	88 2f       	mov	r24, r24
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	88 0f       	add	r24, r24
    4e5e:	99 1f       	adc	r25, r25
    4e60:	fc 01       	movw	r30, r24
    4e62:	e3 57       	subi	r30, 0x73	; 115
    4e64:	fe 4f       	sbci	r31, 0xFE	; 254
    4e66:	20 81       	ld	r18, Z
    4e68:	89 81       	ldd	r24, Y+1	; 0x01
    4e6a:	88 2f       	mov	r24, r24
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	88 0f       	add	r24, r24
    4e70:	99 1f       	adc	r25, r25
    4e72:	fc 01       	movw	r30, r24
    4e74:	e2 57       	subi	r30, 0x72	; 114
    4e76:	fe 4f       	sbci	r31, 0xFE	; 254
    4e78:	90 81       	ld	r25, Z
    4e7a:	82 2f       	mov	r24, r18
    4e7c:	69 2f       	mov	r22, r25
    4e7e:	41 e0       	ldi	r20, 0x01	; 1
    4e80:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	88 2f       	mov	r24, r24
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	88 0f       	add	r24, r24
    4e8c:	99 1f       	adc	r25, r25
    4e8e:	fc 01       	movw	r30, r24
    4e90:	e3 57       	subi	r30, 0x73	; 115
    4e92:	fe 4f       	sbci	r31, 0xFE	; 254
    4e94:	20 81       	ld	r18, Z
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	88 2f       	mov	r24, r24
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	88 0f       	add	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	e2 57       	subi	r30, 0x72	; 114
    4ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea6:	90 81       	ld	r25, Z
    4ea8:	82 2f       	mov	r24, r18
    4eaa:	69 2f       	mov	r22, r25
    4eac:	40 e0       	ldi	r20, 0x00	; 0
    4eae:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <DIO_enu_SetPinState>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PIN_READ);
            DIO_enu_SetPinState(Keypad_au8_Rows[Local_u8_Counter].Switch_Group,Keypad_au8_Rows[Local_u8_Counter].Switch_Pin,DIO_PULL_UP);
        }
        
        for(Local_u8_Counter =0; Local_u8_Counter < KEYPAD_COLUMNS_NUMBER; Local_u8_Counter++)
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	8f 5f       	subi	r24, 0xFF	; 255
    4eb6:	89 83       	std	Y+1, r24	; 0x01
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	84 30       	cpi	r24, 0x04	; 4
    4ebc:	60 f2       	brcs	.-104    	; 0x4e56 <Keypad_enu_Initialization+0x80>
        {
            DIO_enu_SetPinDiretion(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_PIN_WRITE);
            DIO_enu_SetPinState(Keypad_au8_Columns[Local_u8_Counter].Switch_Group,Keypad_au8_Columns[Local_u8_Counter].Switch_Pin,DIO_LOW);
        }
        
        Local_u8_ErrorFlag = ES_OK;
    4ebe:	1a 82       	std	Y+2, r1	; 0x02
    #else

        #error "Maximum number or rows or columns is exceeded"
    #endif

    return Local_u8_ErrorFlag;
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	cf 91       	pop	r28
    4ec8:	df 91       	pop	r29
    4eca:	08 95       	ret

00004ecc <Keypad_enu_GetButtonPressedValue>:

extern ErrorState_t Keypad_enu_GetButtonPressedValue(u8* Copy_pu8_ButtonValue)
{
    4ecc:	df 93       	push	r29
    4ece:	cf 93       	push	r28
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    4ed4:	aa 97       	sbiw	r28, 0x2a	; 42
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	f8 94       	cli
    4eda:	de bf       	out	0x3e, r29	; 62
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	cd bf       	out	0x3d, r28	; 61
    4ee0:	9d a3       	std	Y+37, r25	; 0x25
    4ee2:	8c a3       	std	Y+36, r24	; 0x24
    u8 Local_u8_ErrorFlag = ES_NOK;
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	8a 8b       	std	Y+18, r24	; 0x12
    
    if(Copy_pu8_ButtonValue)
    4ee8:	8c a1       	ldd	r24, Y+36	; 0x24
    4eea:	9d a1       	ldd	r25, Y+37	; 0x25
    4eec:	00 97       	sbiw	r24, 0x00	; 0
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <Keypad_enu_GetButtonPressedValue+0x26>
    4ef0:	68 c1       	rjmp	.+720    	; 0x51c2 <Keypad_enu_GetButtonPressedValue+0x2f6>
    {
        u8 Local_u8_RowCounter = 0;
    4ef2:	19 8a       	std	Y+17, r1	; 0x11
        u8 Local_u8_ColumnCounter = 0;
    4ef4:	18 8a       	std	Y+16, r1	; 0x10
        
        u8 Local_u8_RowValue;
        Bool Local_bool_FoundFlag = False;
    4ef6:	1f 86       	std	Y+15, r1	; 0x0f

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
    4ef8:	ec a1       	ldd	r30, Y+36	; 0x24
    4efa:	fd a1       	ldd	r31, Y+37	; 0x25
    4efc:	8f ef       	ldi	r24, 0xFF	; 255
    4efe:	80 83       	st	Z, r24
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    4f00:	19 8a       	std	Y+17, r1	; 0x11
    4f02:	5a c1       	rjmp	.+692    	; 0x51b8 <Keypad_enu_GetButtonPressedValue+0x2ec>
        {
            //scanning the rows for any closed switches
            DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    4f04:	89 89       	ldd	r24, Y+17	; 0x11
    4f06:	88 2f       	mov	r24, r24
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	88 0f       	add	r24, r24
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	fc 01       	movw	r30, r24
    4f10:	eb 57       	subi	r30, 0x7B	; 123
    4f12:	fe 4f       	sbci	r31, 0xFE	; 254
    4f14:	40 81       	ld	r20, Z
    4f16:	89 89       	ldd	r24, Y+17	; 0x11
    4f18:	88 2f       	mov	r24, r24
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	88 0f       	add	r24, r24
    4f1e:	99 1f       	adc	r25, r25
    4f20:	fc 01       	movw	r30, r24
    4f22:	ea 57       	subi	r30, 0x7A	; 122
    4f24:	fe 4f       	sbci	r31, 0xFE	; 254
    4f26:	90 81       	ld	r25, Z
    4f28:	9e 01       	movw	r18, r28
    4f2a:	2d 5e       	subi	r18, 0xED	; 237
    4f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2e:	84 2f       	mov	r24, r20
    4f30:	69 2f       	mov	r22, r25
    4f32:	a9 01       	movw	r20, r18
    4f34:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DIO_enu_GetPinValue>
            
            if(Local_u8_RowValue == DIO_LOW)
    4f38:	8b 89       	ldd	r24, Y+19	; 0x13
    4f3a:	88 23       	and	r24, r24
    4f3c:	09 f0       	breq	.+2      	; 0x4f40 <Keypad_enu_GetButtonPressedValue+0x74>
    4f3e:	36 c1       	rjmp	.+620    	; 0x51ac <Keypad_enu_GetButtonPressedValue+0x2e0>
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	a0 e4       	ldi	r26, 0x40	; 64
    4f46:	b0 e4       	ldi	r27, 0x40	; 64
    4f48:	8b 87       	std	Y+11, r24	; 0x0b
    4f4a:	9c 87       	std	Y+12, r25	; 0x0c
    4f4c:	ad 87       	std	Y+13, r26	; 0x0d
    4f4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f58:	20 e0       	ldi	r18, 0x00	; 0
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	4a e7       	ldi	r20, 0x7A	; 122
    4f5e:	55 e4       	ldi	r21, 0x45	; 69
    4f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	8f 83       	std	Y+7, r24	; 0x07
    4f6a:	98 87       	std	Y+8, r25	; 0x08
    4f6c:	a9 87       	std	Y+9, r26	; 0x09
    4f6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f70:	6f 81       	ldd	r22, Y+7	; 0x07
    4f72:	78 85       	ldd	r23, Y+8	; 0x08
    4f74:	89 85       	ldd	r24, Y+9	; 0x09
    4f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	40 e8       	ldi	r20, 0x80	; 128
    4f7e:	5f e3       	ldi	r21, 0x3F	; 63
    4f80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f84:	88 23       	and	r24, r24
    4f86:	2c f4       	brge	.+10     	; 0x4f92 <Keypad_enu_GetButtonPressedValue+0xc6>
		__ticks = 1;
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	9e 83       	std	Y+6, r25	; 0x06
    4f8e:	8d 83       	std	Y+5, r24	; 0x05
    4f90:	3f c0       	rjmp	.+126    	; 0x5010 <Keypad_enu_GetButtonPressedValue+0x144>
	else if (__tmp > 65535)
    4f92:	6f 81       	ldd	r22, Y+7	; 0x07
    4f94:	78 85       	ldd	r23, Y+8	; 0x08
    4f96:	89 85       	ldd	r24, Y+9	; 0x09
    4f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	3f ef       	ldi	r19, 0xFF	; 255
    4f9e:	4f e7       	ldi	r20, 0x7F	; 127
    4fa0:	57 e4       	ldi	r21, 0x47	; 71
    4fa2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4fa6:	18 16       	cp	r1, r24
    4fa8:	4c f5       	brge	.+82     	; 0x4ffc <Keypad_enu_GetButtonPressedValue+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fb2:	20 e0       	ldi	r18, 0x00	; 0
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	40 e2       	ldi	r20, 0x20	; 32
    4fb8:	51 e4       	ldi	r21, 0x41	; 65
    4fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	bc 01       	movw	r22, r24
    4fc4:	cd 01       	movw	r24, r26
    4fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	9e 83       	std	Y+6, r25	; 0x06
    4fd0:	8d 83       	std	Y+5, r24	; 0x05
    4fd2:	0f c0       	rjmp	.+30     	; 0x4ff2 <Keypad_enu_GetButtonPressedValue+0x126>
    4fd4:	80 e9       	ldi	r24, 0x90	; 144
    4fd6:	91 e0       	ldi	r25, 0x01	; 1
    4fd8:	9c 83       	std	Y+4, r25	; 0x04
    4fda:	8b 83       	std	Y+3, r24	; 0x03
    4fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fde:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	f1 f7       	brne	.-4      	; 0x4fe0 <Keypad_enu_GetButtonPressedValue+0x114>
    4fe4:	9c 83       	std	Y+4, r25	; 0x04
    4fe6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fea:	9e 81       	ldd	r25, Y+6	; 0x06
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	9e 83       	std	Y+6, r25	; 0x06
    4ff0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	69 f7       	brne	.-38     	; 0x4fd4 <Keypad_enu_GetButtonPressedValue+0x108>
    4ffa:	14 c0       	rjmp	.+40     	; 0x5024 <Keypad_enu_GetButtonPressedValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ffe:	78 85       	ldd	r23, Y+8	; 0x08
    5000:	89 85       	ldd	r24, Y+9	; 0x09
    5002:	9a 85       	ldd	r25, Y+10	; 0x0a
    5004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	9e 83       	std	Y+6, r25	; 0x06
    500e:	8d 83       	std	Y+5, r24	; 0x05
    5010:	8d 81       	ldd	r24, Y+5	; 0x05
    5012:	9e 81       	ldd	r25, Y+6	; 0x06
    5014:	9a 83       	std	Y+2, r25	; 0x02
    5016:	89 83       	std	Y+1, r24	; 0x01
    5018:	89 81       	ldd	r24, Y+1	; 0x01
    501a:	9a 81       	ldd	r25, Y+2	; 0x02
    501c:	01 97       	sbiw	r24, 0x01	; 1
    501e:	f1 f7       	brne	.-4      	; 0x501c <Keypad_enu_GetButtonPressedValue+0x150>
    5020:	9a 83       	std	Y+2, r25	; 0x02
    5022:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                //scanning the rows for any closed switches
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
    5024:	89 89       	ldd	r24, Y+17	; 0x11
    5026:	88 2f       	mov	r24, r24
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	88 0f       	add	r24, r24
    502c:	99 1f       	adc	r25, r25
    502e:	fc 01       	movw	r30, r24
    5030:	eb 57       	subi	r30, 0x7B	; 123
    5032:	fe 4f       	sbci	r31, 0xFE	; 254
    5034:	40 81       	ld	r20, Z
    5036:	89 89       	ldd	r24, Y+17	; 0x11
    5038:	88 2f       	mov	r24, r24
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	fc 01       	movw	r30, r24
    5042:	ea 57       	subi	r30, 0x7A	; 122
    5044:	fe 4f       	sbci	r31, 0xFE	; 254
    5046:	90 81       	ld	r25, Z
    5048:	9e 01       	movw	r18, r28
    504a:	2d 5e       	subi	r18, 0xED	; 237
    504c:	3f 4f       	sbci	r19, 0xFF	; 255
    504e:	84 2f       	mov	r24, r20
    5050:	69 2f       	mov	r22, r25
    5052:	a9 01       	movw	r20, r18
    5054:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DIO_enu_GetPinValue>
                
                if(Local_u8_RowValue == DIO_LOW)
    5058:	8b 89       	ldd	r24, Y+19	; 0x13
    505a:	88 23       	and	r24, r24
    505c:	09 f0       	breq	.+2      	; 0x5060 <Keypad_enu_GetButtonPressedValue+0x194>
    505e:	a6 c0       	rjmp	.+332    	; 0x51ac <Keypad_enu_GetButtonPressedValue+0x2e0>
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    5060:	18 8a       	std	Y+16, r1	; 0x10
    5062:	a0 c0       	rjmp	.+320    	; 0x51a4 <Keypad_enu_GetButtonPressedValue+0x2d8>
                    {
                        //Placing a high signal on the column 
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_HIGH);
    5064:	88 89       	ldd	r24, Y+16	; 0x10
    5066:	88 2f       	mov	r24, r24
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	88 0f       	add	r24, r24
    506c:	99 1f       	adc	r25, r25
    506e:	fc 01       	movw	r30, r24
    5070:	e3 57       	subi	r30, 0x73	; 115
    5072:	fe 4f       	sbci	r31, 0xFE	; 254
    5074:	20 81       	ld	r18, Z
    5076:	88 89       	ldd	r24, Y+16	; 0x10
    5078:	88 2f       	mov	r24, r24
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	fc 01       	movw	r30, r24
    5082:	e2 57       	subi	r30, 0x72	; 114
    5084:	fe 4f       	sbci	r31, 0xFE	; 254
    5086:	90 81       	ld	r25, Z
    5088:	82 2f       	mov	r24, r18
    508a:	69 2f       	mov	r22, r25
    508c:	41 e0       	ldi	r20, 0x01	; 1
    508e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

                        //getting the value of the row 
                        DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);
    5092:	89 89       	ldd	r24, Y+17	; 0x11
    5094:	88 2f       	mov	r24, r24
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	88 0f       	add	r24, r24
    509a:	99 1f       	adc	r25, r25
    509c:	fc 01       	movw	r30, r24
    509e:	eb 57       	subi	r30, 0x7B	; 123
    50a0:	fe 4f       	sbci	r31, 0xFE	; 254
    50a2:	40 81       	ld	r20, Z
    50a4:	89 89       	ldd	r24, Y+17	; 0x11
    50a6:	88 2f       	mov	r24, r24
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	88 0f       	add	r24, r24
    50ac:	99 1f       	adc	r25, r25
    50ae:	fc 01       	movw	r30, r24
    50b0:	ea 57       	subi	r30, 0x7A	; 122
    50b2:	fe 4f       	sbci	r31, 0xFE	; 254
    50b4:	90 81       	ld	r25, Z
    50b6:	9e 01       	movw	r18, r28
    50b8:	2d 5e       	subi	r18, 0xED	; 237
    50ba:	3f 4f       	sbci	r19, 0xFF	; 255
    50bc:	84 2f       	mov	r24, r20
    50be:	69 2f       	mov	r22, r25
    50c0:	a9 01       	movw	r20, r18
    50c2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DIO_enu_GetPinValue>

                        if(Local_u8_RowValue == DIO_HIGH)
    50c6:	8b 89       	ldd	r24, Y+19	; 0x13
    50c8:	81 30       	cpi	r24, 0x01	; 1
    50ca:	09 f0       	breq	.+2      	; 0x50ce <Keypad_enu_GetButtonPressedValue+0x202>
    50cc:	51 c0       	rjmp	.+162    	; 0x5170 <Keypad_enu_GetButtonPressedValue+0x2a4>
                        {
                            //Creating 2D array
                            u8 Keypad_au8_KeyadValues [KEYPAD_ROWS_NUMBER][KEYPAD_COLUMNS_NUMBER] = KEYPAD_KEY_VALUES;
    50ce:	ce 01       	movw	r24, r28
    50d0:	44 96       	adiw	r24, 0x14	; 20
    50d2:	9f a3       	std	Y+39, r25	; 0x27
    50d4:	8e a3       	std	Y+38, r24	; 0x26
    50d6:	e8 e9       	ldi	r30, 0x98	; 152
    50d8:	f1 e0       	ldi	r31, 0x01	; 1
    50da:	f9 a7       	std	Y+41, r31	; 0x29
    50dc:	e8 a7       	std	Y+40, r30	; 0x28
    50de:	f0 e1       	ldi	r31, 0x10	; 16
    50e0:	fa a7       	std	Y+42, r31	; 0x2a
    50e2:	e8 a5       	ldd	r30, Y+40	; 0x28
    50e4:	f9 a5       	ldd	r31, Y+41	; 0x29
    50e6:	00 80       	ld	r0, Z
    50e8:	88 a5       	ldd	r24, Y+40	; 0x28
    50ea:	99 a5       	ldd	r25, Y+41	; 0x29
    50ec:	01 96       	adiw	r24, 0x01	; 1
    50ee:	99 a7       	std	Y+41, r25	; 0x29
    50f0:	88 a7       	std	Y+40, r24	; 0x28
    50f2:	ee a1       	ldd	r30, Y+38	; 0x26
    50f4:	ff a1       	ldd	r31, Y+39	; 0x27
    50f6:	00 82       	st	Z, r0
    50f8:	8e a1       	ldd	r24, Y+38	; 0x26
    50fa:	9f a1       	ldd	r25, Y+39	; 0x27
    50fc:	01 96       	adiw	r24, 0x01	; 1
    50fe:	9f a3       	std	Y+39, r25	; 0x27
    5100:	8e a3       	std	Y+38, r24	; 0x26
    5102:	9a a5       	ldd	r25, Y+42	; 0x2a
    5104:	91 50       	subi	r25, 0x01	; 1
    5106:	9a a7       	std	Y+42, r25	; 0x2a
    5108:	ea a5       	ldd	r30, Y+42	; 0x2a
    510a:	ee 23       	and	r30, r30
    510c:	51 f7       	brne	.-44     	; 0x50e2 <Keypad_enu_GetButtonPressedValue+0x216>
                            
                            //Placing key Value in button
                            *Copy_pu8_ButtonValue = Keypad_au8_KeyadValues[Local_u8_RowCounter][Local_u8_ColumnCounter];
    510e:	89 89       	ldd	r24, Y+17	; 0x11
    5110:	28 2f       	mov	r18, r24
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	88 89       	ldd	r24, Y+16	; 0x10
    5116:	48 2f       	mov	r20, r24
    5118:	50 e0       	ldi	r21, 0x00	; 0
    511a:	22 0f       	add	r18, r18
    511c:	33 1f       	adc	r19, r19
    511e:	22 0f       	add	r18, r18
    5120:	33 1f       	adc	r19, r19
    5122:	ce 01       	movw	r24, r28
    5124:	01 96       	adiw	r24, 0x01	; 1
    5126:	82 0f       	add	r24, r18
    5128:	93 1f       	adc	r25, r19
    512a:	84 0f       	add	r24, r20
    512c:	95 1f       	adc	r25, r21
    512e:	fc 01       	movw	r30, r24
    5130:	73 96       	adiw	r30, 0x13	; 19
    5132:	80 81       	ld	r24, Z
    5134:	ec a1       	ldd	r30, Y+36	; 0x24
    5136:	fd a1       	ldd	r31, Y+37	; 0x25
    5138:	80 83       	st	Z, r24
                            
                            //Setting Found flag to break the row loop
                            Local_bool_FoundFlag = True;
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	8f 87       	std	Y+15, r24	; 0x0f

                            Local_u8_ErrorFlag = ES_OK;
    513e:	1a 8a       	std	Y+18, r1	; 0x12

                            //Clearing the high signal placed on the column
                            DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    5140:	88 89       	ldd	r24, Y+16	; 0x10
    5142:	88 2f       	mov	r24, r24
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	88 0f       	add	r24, r24
    5148:	99 1f       	adc	r25, r25
    514a:	fc 01       	movw	r30, r24
    514c:	e3 57       	subi	r30, 0x73	; 115
    514e:	fe 4f       	sbci	r31, 0xFE	; 254
    5150:	20 81       	ld	r18, Z
    5152:	88 89       	ldd	r24, Y+16	; 0x10
    5154:	88 2f       	mov	r24, r24
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	88 0f       	add	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	fc 01       	movw	r30, r24
    515e:	e2 57       	subi	r30, 0x72	; 114
    5160:	fe 4f       	sbci	r31, 0xFE	; 254
    5162:	90 81       	ld	r25, Z
    5164:	82 2f       	mov	r24, r18
    5166:	69 2f       	mov	r22, r25
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    516e:	1e c0       	rjmp	.+60     	; 0x51ac <Keypad_enu_GetButtonPressedValue+0x2e0>
                            

                        }
                    
                        //Clearing the high signal placed on the column
                        DIO_enu_SetPinValue(Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Group,Keypad_au8_Columns[Local_u8_ColumnCounter].Switch_Pin,DIO_LOW);
    5170:	88 89       	ldd	r24, Y+16	; 0x10
    5172:	88 2f       	mov	r24, r24
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	fc 01       	movw	r30, r24
    517c:	e3 57       	subi	r30, 0x73	; 115
    517e:	fe 4f       	sbci	r31, 0xFE	; 254
    5180:	20 81       	ld	r18, Z
    5182:	88 89       	ldd	r24, Y+16	; 0x10
    5184:	88 2f       	mov	r24, r24
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	88 0f       	add	r24, r24
    518a:	99 1f       	adc	r25, r25
    518c:	fc 01       	movw	r30, r24
    518e:	e2 57       	subi	r30, 0x72	; 114
    5190:	fe 4f       	sbci	r31, 0xFE	; 254
    5192:	90 81       	ld	r25, Z
    5194:	82 2f       	mov	r24, r18
    5196:	69 2f       	mov	r22, r25
    5198:	40 e0       	ldi	r20, 0x00	; 0
    519a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
                DIO_enu_GetPinValue(Keypad_au8_Rows[Local_u8_RowCounter].Switch_Group,Keypad_au8_Rows[Local_u8_RowCounter].Switch_Pin,&Local_u8_RowValue);   
                
                if(Local_u8_RowValue == DIO_LOW)
                {

                    for(Local_u8_ColumnCounter =0; Local_u8_ColumnCounter < KEYPAD_COLUMNS_NUMBER; Local_u8_ColumnCounter++)
    519e:	88 89       	ldd	r24, Y+16	; 0x10
    51a0:	8f 5f       	subi	r24, 0xFF	; 255
    51a2:	88 8b       	std	Y+16, r24	; 0x10
    51a4:	88 89       	ldd	r24, Y+16	; 0x10
    51a6:	84 30       	cpi	r24, 0x04	; 4
    51a8:	08 f4       	brcc	.+2      	; 0x51ac <Keypad_enu_GetButtonPressedValue+0x2e0>
    51aa:	5c cf       	rjmp	.-328    	; 0x5064 <Keypad_enu_GetButtonPressedValue+0x198>

                }
                
            }

            if(Local_bool_FoundFlag)
    51ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    51ae:	88 23       	and	r24, r24
    51b0:	51 f4       	brne	.+20     	; 0x51c6 <Keypad_enu_GetButtonPressedValue+0x2fa>
        Bool Local_bool_FoundFlag = False;

        *Copy_pu8_ButtonValue = KEYPAD_NOT_PRESSED_VALUE;
        

        for(Local_u8_RowCounter = 0; Local_u8_RowCounter < KEYPAD_ROWS_NUMBER; Local_u8_RowCounter++)
    51b2:	89 89       	ldd	r24, Y+17	; 0x11
    51b4:	8f 5f       	subi	r24, 0xFF	; 255
    51b6:	89 8b       	std	Y+17, r24	; 0x11
    51b8:	89 89       	ldd	r24, Y+17	; 0x11
    51ba:	84 30       	cpi	r24, 0x04	; 4
    51bc:	08 f4       	brcc	.+2      	; 0x51c0 <Keypad_enu_GetButtonPressedValue+0x2f4>
    51be:	a2 ce       	rjmp	.-700    	; 0x4f04 <Keypad_enu_GetButtonPressedValue+0x38>
    51c0:	02 c0       	rjmp	.+4      	; 0x51c6 <Keypad_enu_GetButtonPressedValue+0x2fa>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    51c2:	83 e0       	ldi	r24, 0x03	; 3
    51c4:	8a 8b       	std	Y+18, r24	; 0x12
    }


    return Local_u8_ErrorFlag;
    51c6:	8a 89       	ldd	r24, Y+18	; 0x12

}
    51c8:	aa 96       	adiw	r28, 0x2a	; 42
    51ca:	0f b6       	in	r0, 0x3f	; 63
    51cc:	f8 94       	cli
    51ce:	de bf       	out	0x3e, r29	; 62
    51d0:	0f be       	out	0x3f, r0	; 63
    51d2:	cd bf       	out	0x3d, r28	; 61
    51d4:	cf 91       	pop	r28
    51d6:	df 91       	pop	r29
    51d8:	08 95       	ret

000051da <Hexadecoder_enu_Initialization>:
#include "Hexadecoder_Private.h"


//Functions' implementation
extern ErrorState_t Hexadecoder_enu_Initialization(void)
{
    51da:	df 93       	push	r29
    51dc:	cf 93       	push	r28
    51de:	0f 92       	push	r0
    51e0:	cd b7       	in	r28, 0x3d	; 61
    51e2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	89 83       	std	Y+1, r24	; 0x01
        #if HEXADECODER_A_PIN <= DIO_PIN_7 && HEXADECODER_B_PIN <= DIO_PIN_7 && HEXADECODER_C_PIN <= DIO_PIN_7 && HEXADECODER_D_PIN <= DIO_PIN_7 && HEXADECODER_EN1_PIN <= DIO_PIN_7 && HEXADECODER_EN2_PIN <= DIO_PIN_7 && HEXADECODER_DP_PIN <= DIO_PIN_7
        
        switch (HEXADECODER_A_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_A_PIN, DIO_PIN_WRITE);
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	64 e0       	ldi	r22, 0x04	; 4
    51ec:	41 e0       	ldi	r20, 0x01	; 1
    51ee:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_B_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_B_PIN, DIO_PIN_WRITE);
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	65 e0       	ldi	r22, 0x05	; 5
    51f6:	41 e0       	ldi	r20, 0x01	; 1
    51f8:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        }

        switch (HEXADECODER_C_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_C_PIN, DIO_PIN_WRITE);
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	66 e0       	ldi	r22, 0x06	; 6
    5200:	41 e0       	ldi	r20, 0x01	; 1
    5202:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        }
        
        switch (HEXADECODER_D_GROUP)
        {
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_D_PIN, DIO_PIN_WRITE);
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	67 e0       	ldi	r22, 0x07	; 7
    520a:	41 e0       	ldi	r20, 0x01	; 1
    520c:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN1_PIN, DIO_PIN_WRITE);
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	62 e0       	ldi	r22, 0x02	; 2
    5214:	41 e0       	ldi	r20, 0x01	; 1
    5216:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
            case DIO_PIN_GROUP_A:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
            break;

            case DIO_PIN_GROUP_B:
            DIO_enu_SetPinDiretion(DIO_PIN_GROUP_B,HEXADECODER_EN2_PIN, DIO_PIN_WRITE);
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	61 e0       	ldi	r22, 0x01	; 1
    521e:	41 e0       	ldi	r20, 0x01	; 1
    5220:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
            break;
        }
        
        
        
        Local_u8_ErrorFlag =ES_OK;
    5224:	19 82       	std	Y+1, r1	; 0x01
        #endif
    #else
    #error "Out of range values in Hexadecoder Groups"    
    #endif

    return Local_u8_ErrorFlag;
    5226:	89 81       	ldd	r24, Y+1	; 0x01

}
    5228:	0f 90       	pop	r0
    522a:	cf 91       	pop	r28
    522c:	df 91       	pop	r29
    522e:	08 95       	ret

00005230 <Hexadecoder_enu_DisplayNum>:

extern ErrorState_t Hexadecoder_enu_DisplayNum(u8 Copy_u8_Num)
{
    5230:	df 93       	push	r29
    5232:	cf 93       	push	r28
    5234:	00 d0       	rcall	.+0      	; 0x5236 <Hexadecoder_enu_DisplayNum+0x6>
    5236:	cd b7       	in	r28, 0x3d	; 61
    5238:	de b7       	in	r29, 0x3e	; 62
    523a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Num <= HEXADECODER_MAXIMUM_DISPLAYED_NUM)
    5240:	8a 81       	ldd	r24, Y+2	; 0x02
    5242:	8a 30       	cpi	r24, 0x0A	; 10
    5244:	40 f5       	brcc	.+80     	; 0x5296 <Hexadecoder_enu_DisplayNum+0x66>
    {
        // A:
        DIO_enu_SetPinValue(HEXADECODER_A_GROUP,HEXADECODER_A_PIN, (Copy_u8_Num >> 0) & 1);
    5246:	8a 81       	ldd	r24, Y+2	; 0x02
    5248:	98 2f       	mov	r25, r24
    524a:	91 70       	andi	r25, 0x01	; 1
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	64 e0       	ldi	r22, 0x04	; 4
    5250:	49 2f       	mov	r20, r25
    5252:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        // B:
        DIO_enu_SetPinValue(HEXADECODER_B_GROUP,HEXADECODER_B_PIN, (Copy_u8_Num >> 1) & 1);
    5256:	8a 81       	ldd	r24, Y+2	; 0x02
    5258:	86 95       	lsr	r24
    525a:	98 2f       	mov	r25, r24
    525c:	91 70       	andi	r25, 0x01	; 1
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	65 e0       	ldi	r22, 0x05	; 5
    5262:	49 2f       	mov	r20, r25
    5264:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        // C:
        DIO_enu_SetPinValue(HEXADECODER_C_GROUP,HEXADECODER_C_PIN, (Copy_u8_Num >> 2) & 1);
    5268:	8a 81       	ldd	r24, Y+2	; 0x02
    526a:	86 95       	lsr	r24
    526c:	86 95       	lsr	r24
    526e:	98 2f       	mov	r25, r24
    5270:	91 70       	andi	r25, 0x01	; 1
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	66 e0       	ldi	r22, 0x06	; 6
    5276:	49 2f       	mov	r20, r25
    5278:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        // D:
        DIO_enu_SetPinValue(HEXADECODER_D_GROUP,HEXADECODER_D_PIN, (Copy_u8_Num >> 3) & 1);
    527c:	8a 81       	ldd	r24, Y+2	; 0x02
    527e:	86 95       	lsr	r24
    5280:	86 95       	lsr	r24
    5282:	86 95       	lsr	r24
    5284:	98 2f       	mov	r25, r24
    5286:	91 70       	andi	r25, 0x01	; 1
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	67 e0       	ldi	r22, 0x07	; 7
    528c:	49 2f       	mov	r20, r25
    528e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

        Local_u8_ErrorFlag = ES_OK;
    5292:	19 82       	std	Y+1, r1	; 0x01
    5294:	02 c0       	rjmp	.+4      	; 0x529a <Hexadecoder_enu_DisplayNum+0x6a>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5296:	82 e0       	ldi	r24, 0x02	; 2
    5298:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    529a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	cf 91       	pop	r28
    52a2:	df 91       	pop	r29
    52a4:	08 95       	ret

000052a6 <Hexadecoder_enu_EnableSSG>:

extern ErrorState_t Hexadecoder_enu_EnableSSG(u8 Copy_u8_SSGNum)
{
    52a6:	df 93       	push	r29
    52a8:	cf 93       	push	r28
    52aa:	00 d0       	rcall	.+0      	; 0x52ac <Hexadecoder_enu_EnableSSG+0x6>
    52ac:	00 d0       	rcall	.+0      	; 0x52ae <Hexadecoder_enu_EnableSSG+0x8>
    52ae:	cd b7       	in	r28, 0x3d	; 61
    52b0:	de b7       	in	r29, 0x3e	; 62
    52b2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    52b4:	81 e0       	ldi	r24, 0x01	; 1
    52b6:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    52b8:	8a 81       	ldd	r24, Y+2	; 0x02
    52ba:	28 2f       	mov	r18, r24
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	3c 83       	std	Y+4, r19	; 0x04
    52c0:	2b 83       	std	Y+3, r18	; 0x03
    52c2:	8b 81       	ldd	r24, Y+3	; 0x03
    52c4:	9c 81       	ldd	r25, Y+4	; 0x04
    52c6:	00 97       	sbiw	r24, 0x00	; 0
    52c8:	31 f0       	breq	.+12     	; 0x52d6 <Hexadecoder_enu_EnableSSG+0x30>
    52ca:	2b 81       	ldd	r18, Y+3	; 0x03
    52cc:	3c 81       	ldd	r19, Y+4	; 0x04
    52ce:	21 30       	cpi	r18, 0x01	; 1
    52d0:	31 05       	cpc	r19, r1
    52d2:	41 f0       	breq	.+16     	; 0x52e4 <Hexadecoder_enu_EnableSSG+0x3e>
    52d4:	0e c0       	rjmp	.+28     	; 0x52f2 <Hexadecoder_enu_EnableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_HIGH);
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	62 e0       	ldi	r22, 0x02	; 2
    52da:	41 e0       	ldi	r20, 0x01	; 1
    52dc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    52e0:	19 82       	std	Y+1, r1	; 0x01
    52e2:	09 c0       	rjmp	.+18     	; 0x52f6 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_HIGH);
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	61 e0       	ldi	r22, 0x01	; 1
    52e8:	41 e0       	ldi	r20, 0x01	; 1
    52ea:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    52ee:	19 82       	std	Y+1, r1	; 0x01
    52f0:	02 c0       	rjmp	.+4      	; 0x52f6 <Hexadecoder_enu_EnableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    52f2:	82 e0       	ldi	r24, 0x02	; 2
    52f4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    52f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	cf 91       	pop	r28
    5302:	df 91       	pop	r29
    5304:	08 95       	ret

00005306 <Hexadecoder_enu_DisableSSG>:

extern ErrorState_t Hexadecoder_enu_DisableSSG(u8 Copy_u8_SSGNum)
{
    5306:	df 93       	push	r29
    5308:	cf 93       	push	r28
    530a:	00 d0       	rcall	.+0      	; 0x530c <Hexadecoder_enu_DisableSSG+0x6>
    530c:	00 d0       	rcall	.+0      	; 0x530e <Hexadecoder_enu_DisableSSG+0x8>
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
    5312:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_SSGNum)
    5318:	8a 81       	ldd	r24, Y+2	; 0x02
    531a:	28 2f       	mov	r18, r24
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	3c 83       	std	Y+4, r19	; 0x04
    5320:	2b 83       	std	Y+3, r18	; 0x03
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	9c 81       	ldd	r25, Y+4	; 0x04
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	31 f0       	breq	.+12     	; 0x5336 <Hexadecoder_enu_DisableSSG+0x30>
    532a:	2b 81       	ldd	r18, Y+3	; 0x03
    532c:	3c 81       	ldd	r19, Y+4	; 0x04
    532e:	21 30       	cpi	r18, 0x01	; 1
    5330:	31 05       	cpc	r19, r1
    5332:	41 f0       	breq	.+16     	; 0x5344 <Hexadecoder_enu_DisableSSG+0x3e>
    5334:	0e c0       	rjmp	.+28     	; 0x5352 <Hexadecoder_enu_DisableSSG+0x4c>
    {
        case SSG_1:
        DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	62 e0       	ldi	r22, 0x02	; 2
    533a:	40 e0       	ldi	r20, 0x00	; 0
    533c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    5340:	19 82       	std	Y+1, r1	; 0x01
    5342:	09 c0       	rjmp	.+18     	; 0x5356 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        case SSG_2:
        DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	61 e0       	ldi	r22, 0x01	; 1
    5348:	40 e0       	ldi	r20, 0x00	; 0
    534a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
        Local_u8_ErrorFlag = ES_OK;
    534e:	19 82       	std	Y+1, r1	; 0x01
    5350:	02 c0       	rjmp	.+4      	; 0x5356 <Hexadecoder_enu_DisableSSG+0x50>
        break;

        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5352:	82 e0       	ldi	r24, 0x02	; 2
    5354:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    5356:	89 81       	ldd	r24, Y+1	; 0x01
}
    5358:	0f 90       	pop	r0
    535a:	0f 90       	pop	r0
    535c:	0f 90       	pop	r0
    535e:	0f 90       	pop	r0
    5360:	cf 91       	pop	r28
    5362:	df 91       	pop	r29
    5364:	08 95       	ret

00005366 <Hexadecoder_enu_StopDisplay>:

extern ErrorState_t Hexadecoder_enu_StopDisplay(void)
{
    5366:	df 93       	push	r29
    5368:	cf 93       	push	r28
    536a:	0f 92       	push	r0
    536c:	cd b7       	in	r28, 0x3d	; 61
    536e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	89 83       	std	Y+1, r24	; 0x01

    DIO_enu_SetPinValue(HEXADECODER_EN1_GROUP,HEXADECODER_EN1_PIN,DIO_LOW);
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	62 e0       	ldi	r22, 0x02	; 2
    5378:	40 e0       	ldi	r20, 0x00	; 0
    537a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(HEXADECODER_EN2_GROUP,HEXADECODER_EN2_PIN,DIO_LOW);
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	61 e0       	ldi	r22, 0x01	; 1
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>

    return Local_u8_ErrorFlag;
    5388:	89 81       	ldd	r24, Y+1	; 0x01
}
    538a:	0f 90       	pop	r0
    538c:	cf 91       	pop	r28
    538e:	df 91       	pop	r29
    5390:	08 95       	ret

00005392 <Buzzer_enu_Initialization>:
extern Buzzer_t Buzzer_astr_BuzzerList[];

//APIs implementation

extern ErrorState_t Buzzer_enu_Initialization(void)
{
    5392:	df 93       	push	r29
    5394:	cf 93       	push	r28
    5396:	00 d0       	rcall	.+0      	; 0x5398 <Buzzer_enu_Initialization+0x6>
    5398:	cd b7       	in	r28, 0x3d	; 61
    539a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    53a0:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    53a2:	19 82       	std	Y+1, r1	; 0x01
    53a4:	31 c0       	rjmp	.+98     	; 0x5408 <Buzzer_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
    53a8:	88 2f       	mov	r24, r24
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	88 0f       	add	r24, r24
    53ae:	99 1f       	adc	r25, r25
    53b0:	fc 01       	movw	r30, r24
    53b2:	ea 56       	subi	r30, 0x6A	; 106
    53b4:	fe 4f       	sbci	r31, 0xFE	; 254
    53b6:	20 81       	ld	r18, Z
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	88 2f       	mov	r24, r24
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	88 0f       	add	r24, r24
    53c0:	99 1f       	adc	r25, r25
    53c2:	fc 01       	movw	r30, r24
    53c4:	e9 56       	subi	r30, 0x69	; 105
    53c6:	fe 4f       	sbci	r31, 0xFE	; 254
    53c8:	90 81       	ld	r25, Z
    53ca:	82 2f       	mov	r24, r18
    53cc:	69 2f       	mov	r22, r25
    53ce:	41 e0       	ldi	r20, 0x01	; 1
    53d0:	0e 94 66 14 	call	0x28cc	; 0x28cc <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	88 2f       	mov	r24, r24
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	88 0f       	add	r24, r24
    53dc:	99 1f       	adc	r25, r25
    53de:	fc 01       	movw	r30, r24
    53e0:	ea 56       	subi	r30, 0x6A	; 106
    53e2:	fe 4f       	sbci	r31, 0xFE	; 254
    53e4:	20 81       	ld	r18, Z
    53e6:	89 81       	ldd	r24, Y+1	; 0x01
    53e8:	88 2f       	mov	r24, r24
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	88 0f       	add	r24, r24
    53ee:	99 1f       	adc	r25, r25
    53f0:	fc 01       	movw	r30, r24
    53f2:	e9 56       	subi	r30, 0x69	; 105
    53f4:	fe 4f       	sbci	r31, 0xFE	; 254
    53f6:	90 81       	ld	r25, Z
    53f8:	82 2f       	mov	r24, r18
    53fa:	69 2f       	mov	r22, r25
    53fc:	40 e0       	ldi	r20, 0x00	; 0
    53fe:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    5402:	89 81       	ldd	r24, Y+1	; 0x01
    5404:	8f 5f       	subi	r24, 0xFF	; 255
    5406:	89 83       	std	Y+1, r24	; 0x01
    5408:	90 91 95 01 	lds	r25, 0x0195
    540c:	89 81       	ldd	r24, Y+1	; 0x01
    540e:	89 17       	cp	r24, r25
    5410:	50 f2       	brcs	.-108    	; 0x53a6 <Buzzer_enu_Initialization+0x14>
        DIO_enu_SetPinDiretion(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_PIN_WRITE);
        DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group, Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin, DIO_LOW);
    }

    //TO be handled later
    Local_u8_ErrorFlag = ES_OK;
    5412:	1a 82       	std	Y+2, r1	; 0x02




    return Local_u8_ErrorFlag; 
    5414:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5416:	0f 90       	pop	r0
    5418:	0f 90       	pop	r0
    541a:	cf 91       	pop	r28
    541c:	df 91       	pop	r29
    541e:	08 95       	ret

00005420 <Buzzer_enu_TuronOnBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOnBuzzer(u8 Copy_u8_BuzzerNumber)
{
    5420:	df 93       	push	r29
    5422:	cf 93       	push	r28
    5424:	00 d0       	rcall	.+0      	; 0x5426 <Buzzer_enu_TuronOnBuzzer+0x6>
    5426:	cd b7       	in	r28, 0x3d	; 61
    5428:	de b7       	in	r29, 0x3e	; 62
    542a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    5430:	90 91 95 01 	lds	r25, 0x0195
    5434:	8a 81       	ldd	r24, Y+2	; 0x02
    5436:	89 17       	cp	r24, r25
    5438:	c8 f4       	brcc	.+50     	; 0x546c <Buzzer_enu_TuronOnBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_HIGH);
    543a:	8a 81       	ldd	r24, Y+2	; 0x02
    543c:	88 2f       	mov	r24, r24
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	88 0f       	add	r24, r24
    5442:	99 1f       	adc	r25, r25
    5444:	fc 01       	movw	r30, r24
    5446:	ea 56       	subi	r30, 0x6A	; 106
    5448:	fe 4f       	sbci	r31, 0xFE	; 254
    544a:	20 81       	ld	r18, Z
    544c:	8a 81       	ldd	r24, Y+2	; 0x02
    544e:	88 2f       	mov	r24, r24
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	88 0f       	add	r24, r24
    5454:	99 1f       	adc	r25, r25
    5456:	fc 01       	movw	r30, r24
    5458:	e9 56       	subi	r30, 0x69	; 105
    545a:	fe 4f       	sbci	r31, 0xFE	; 254
    545c:	90 81       	ld	r25, Z
    545e:	82 2f       	mov	r24, r18
    5460:	69 2f       	mov	r22, r25
    5462:	41 e0       	ldi	r20, 0x01	; 1
    5464:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    5468:	89 83       	std	Y+1, r24	; 0x01
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <Buzzer_enu_TuronOnBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    546c:	82 e0       	ldi	r24, 0x02	; 2
    546e:	89 83       	std	Y+1, r24	; 0x01





    return Local_u8_ErrorFlag; 
    5470:	89 81       	ldd	r24, Y+1	; 0x01
}
    5472:	0f 90       	pop	r0
    5474:	0f 90       	pop	r0
    5476:	cf 91       	pop	r28
    5478:	df 91       	pop	r29
    547a:	08 95       	ret

0000547c <Buzzer_enu_TuronOffBuzzer>:

extern ErrorState_t Buzzer_enu_TuronOffBuzzer(u8 Copy_u8_BuzzerNumber)
{
    547c:	df 93       	push	r29
    547e:	cf 93       	push	r28
    5480:	00 d0       	rcall	.+0      	; 0x5482 <Buzzer_enu_TuronOffBuzzer+0x6>
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_BuzzerNumber < Buzzer_u8_BuzzerCount)
    548c:	90 91 95 01 	lds	r25, 0x0195
    5490:	8a 81       	ldd	r24, Y+2	; 0x02
    5492:	89 17       	cp	r24, r25
    5494:	c8 f4       	brcc	.+50     	; 0x54c8 <Buzzer_enu_TuronOffBuzzer+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Group,Buzzer_astr_BuzzerList[Copy_u8_BuzzerNumber].Buzzer_Pin,DIO_LOW);
    5496:	8a 81       	ldd	r24, Y+2	; 0x02
    5498:	88 2f       	mov	r24, r24
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	88 0f       	add	r24, r24
    549e:	99 1f       	adc	r25, r25
    54a0:	fc 01       	movw	r30, r24
    54a2:	ea 56       	subi	r30, 0x6A	; 106
    54a4:	fe 4f       	sbci	r31, 0xFE	; 254
    54a6:	20 81       	ld	r18, Z
    54a8:	8a 81       	ldd	r24, Y+2	; 0x02
    54aa:	88 2f       	mov	r24, r24
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	88 0f       	add	r24, r24
    54b0:	99 1f       	adc	r25, r25
    54b2:	fc 01       	movw	r30, r24
    54b4:	e9 56       	subi	r30, 0x69	; 105
    54b6:	fe 4f       	sbci	r31, 0xFE	; 254
    54b8:	90 81       	ld	r25, Z
    54ba:	82 2f       	mov	r24, r18
    54bc:	69 2f       	mov	r22, r25
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
    54c4:	89 83       	std	Y+1, r24	; 0x01
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <Buzzer_enu_TuronOffBuzzer+0x50>
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    54c8:	82 e0       	ldi	r24, 0x02	; 2
    54ca:	89 83       	std	Y+1, r24	; 0x01
    }



    return Local_u8_ErrorFlag; 
    54cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    54ce:	0f 90       	pop	r0
    54d0:	0f 90       	pop	r0
    54d2:	cf 91       	pop	r28
    54d4:	df 91       	pop	r29
    54d6:	08 95       	ret

000054d8 <Buzzer_enu_TurnOnAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    54d8:	df 93       	push	r29
    54da:	cf 93       	push	r28
    54dc:	00 d0       	rcall	.+0      	; 0x54de <Buzzer_enu_TurnOnAllBuzzers+0x6>
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    54e6:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    54e8:	19 82       	std	Y+1, r1	; 0x01
    54ea:	1a c0       	rjmp	.+52     	; 0x5520 <Buzzer_enu_TurnOnAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	88 2f       	mov	r24, r24
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	fc 01       	movw	r30, r24
    54f8:	ea 56       	subi	r30, 0x6A	; 106
    54fa:	fe 4f       	sbci	r31, 0xFE	; 254
    54fc:	20 81       	ld	r18, Z
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	88 0f       	add	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	fc 01       	movw	r30, r24
    550a:	e9 56       	subi	r30, 0x69	; 105
    550c:	fe 4f       	sbci	r31, 0xFE	; 254
    550e:	90 81       	ld	r25, Z
    5510:	82 2f       	mov	r24, r18
    5512:	69 2f       	mov	r22, r25
    5514:	41 e0       	ldi	r20, 0x01	; 1
    5516:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOnAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	8f 5f       	subi	r24, 0xFF	; 255
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	90 91 95 01 	lds	r25, 0x0195
    5524:	89 81       	ldd	r24, Y+1	; 0x01
    5526:	89 17       	cp	r24, r25
    5528:	08 f3       	brcs	.-62     	; 0x54ec <Buzzer_enu_TurnOnAllBuzzers+0x14>

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_HIGH);
        
    }

    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    552a:	82 e0       	ldi	r24, 0x02	; 2
    552c:	8a 83       	std	Y+2, r24	; 0x02



    return Local_u8_ErrorFlag; 
    552e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5530:	0f 90       	pop	r0
    5532:	0f 90       	pop	r0
    5534:	cf 91       	pop	r28
    5536:	df 91       	pop	r29
    5538:	08 95       	ret

0000553a <Buzzer_enu_TurnOffAllBuzzers>:

extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    553a:	df 93       	push	r29
    553c:	cf 93       	push	r28
    553e:	00 d0       	rcall	.+0      	; 0x5540 <Buzzer_enu_TurnOffAllBuzzers+0x6>
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    5548:	19 82       	std	Y+1, r1	; 0x01
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    554a:	19 82       	std	Y+1, r1	; 0x01
    554c:	1a c0       	rjmp	.+52     	; 0x5582 <Buzzer_enu_TurnOffAllBuzzers+0x48>
    {

     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
    554e:	89 81       	ldd	r24, Y+1	; 0x01
    5550:	88 2f       	mov	r24, r24
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	88 0f       	add	r24, r24
    5556:	99 1f       	adc	r25, r25
    5558:	fc 01       	movw	r30, r24
    555a:	ea 56       	subi	r30, 0x6A	; 106
    555c:	fe 4f       	sbci	r31, 0xFE	; 254
    555e:	20 81       	ld	r18, Z
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	88 2f       	mov	r24, r24
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	88 0f       	add	r24, r24
    5568:	99 1f       	adc	r25, r25
    556a:	fc 01       	movw	r30, r24
    556c:	e9 56       	subi	r30, 0x69	; 105
    556e:	fe 4f       	sbci	r31, 0xFE	; 254
    5570:	90 81       	ld	r25, Z
    5572:	82 2f       	mov	r24, r18
    5574:	69 2f       	mov	r22, r25
    5576:	40 e0       	ldi	r20, 0x00	; 0
    5578:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <DIO_enu_SetPinValue>
extern ErrorState_t Buzzer_enu_TurnOffAllBuzzers(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for(Local_u8_Counter = 0; Local_u8_Counter < Buzzer_u8_BuzzerCount; Local_u8_Counter++)
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	8f 5f       	subi	r24, 0xFF	; 255
    5580:	89 83       	std	Y+1, r24	; 0x01
    5582:	90 91 95 01 	lds	r25, 0x0195
    5586:	89 81       	ldd	r24, Y+1	; 0x01
    5588:	89 17       	cp	r24, r25
    558a:	08 f3       	brcs	.-62     	; 0x554e <Buzzer_enu_TurnOffAllBuzzers+0x14>
     DIO_enu_SetPinValue(Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Group,Buzzer_astr_BuzzerList[Local_u8_Counter].Buzzer_Pin,DIO_LOW);
        
    }


    return Local_u8_ErrorFlag; 
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	cf 91       	pop	r28
    5594:	df 91       	pop	r29
    5596:	08 95       	ret

00005598 <Calculator_enu_Initialization>:
static u8 u8_ArithmeticOperator ;
static u8 u8_SecondDigit ;

//APIs' implementation
extern ErrorState_t Calculator_enu_Initialization(void)
{
    5598:	df 93       	push	r29
    559a:	cf 93       	push	r28
    559c:	0f 92       	push	r0
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	89 83       	std	Y+1, r24	; 0x01
    
    //Initializing HALs
    LCD_enu_Initialization();
    55a6:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCD_enu_Initialization>
    Keypad_enu_Initialization();
    55aa:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <Keypad_enu_Initialization>
    
    //Initializing the calculatorto start accepting digits
    u8_CalculationStage = CALCULATOR_FIRST_DIGIT_STATE;
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	80 93 d8 01 	sts	0x01D8, r24
    
    //Places cursor at the start of the screen (Home)
    LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_1, LCD_PAGE_1);
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	61 e0       	ldi	r22, 0x01	; 1
    55b8:	41 e0       	ldi	r20, 0x01	; 1
    55ba:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>

    return Local_u8_ErrorFlag;
    55be:	89 81       	ldd	r24, Y+1	; 0x01
}
    55c0:	0f 90       	pop	r0
    55c2:	cf 91       	pop	r28
    55c4:	df 91       	pop	r29
    55c6:	08 95       	ret

000055c8 <Calculator_enu_Operation>:

extern ErrorState_t Calculator_enu_Operation(void)
{
    55c8:	df 93       	push	r29
    55ca:	cf 93       	push	r28
    55cc:	00 d0       	rcall	.+0      	; 0x55ce <Calculator_enu_Operation+0x6>
    55ce:	00 d0       	rcall	.+0      	; 0x55d0 <Calculator_enu_Operation+0x8>
    55d0:	cd b7       	in	r28, 0x3d	; 61
    55d2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	89 83       	std	Y+1, r24	; 0x01

    u8 Local_u8_UserInput = KEYPAD_NOT_PRESSED_VALUE;
    55d8:	8f ef       	ldi	r24, 0xFF	; 255
    55da:	8a 83       	std	Y+2, r24	; 0x02

    while (1)
    {
        switch (u8_CalculationStage)
    55dc:	80 91 d8 01 	lds	r24, 0x01D8
    55e0:	28 2f       	mov	r18, r24
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	3c 83       	std	Y+4, r19	; 0x04
    55e6:	2b 83       	std	Y+3, r18	; 0x03
    55e8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ea:	9c 81       	ldd	r25, Y+4	; 0x04
    55ec:	84 30       	cpi	r24, 0x04	; 4
    55ee:	91 05       	cpc	r25, r1
    55f0:	a9 f0       	breq	.+42     	; 0x561c <Calculator_enu_Operation+0x54>
    55f2:	2b 81       	ldd	r18, Y+3	; 0x03
    55f4:	3c 81       	ldd	r19, Y+4	; 0x04
    55f6:	25 30       	cpi	r18, 0x05	; 5
    55f8:	31 05       	cpc	r19, r1
    55fa:	2c f4       	brge	.+10     	; 0x5606 <Calculator_enu_Operation+0x3e>
    55fc:	8b 81       	ldd	r24, Y+3	; 0x03
    55fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5600:	99 23       	and	r25, r25
    5602:	84 f0       	brlt	.+32     	; 0x5624 <Calculator_enu_Operation+0x5c>
    5604:	05 c0       	rjmp	.+10     	; 0x5610 <Calculator_enu_Operation+0x48>
    5606:	2b 81       	ldd	r18, Y+3	; 0x03
    5608:	3c 81       	ldd	r19, Y+4	; 0x04
    560a:	25 30       	cpi	r18, 0x05	; 5
    560c:	31 05       	cpc	r19, r1
    560e:	51 f4       	brne	.+20     	; 0x5624 <Calculator_enu_Operation+0x5c>
            case CALCULATOR_OPERATOR_STATE:
            case CALCULATOR_ASSIGNMENT_STATE:
            case CALCULATOR_CLEAR_WAITING_STATE:
                
                //USer input is acquired here (Digit, Operator, or command )
                Local_u8_ErrorFlag = enu_GetUserInput(&Local_u8_UserInput);
    5610:	ce 01       	movw	r24, r28
    5612:	02 96       	adiw	r24, 0x02	; 2
    5614:	0e 94 15 2b 	call	0x562a	; 0x562a <enu_GetUserInput>
    5618:	89 83       	std	Y+1, r24	; 0x01
    561a:	e0 cf       	rjmp	.-64     	; 0x55dc <Calculator_enu_Operation+0x14>

            break;
            
            case CALCULATOR_RESULT_STATE:

                Local_u8_ErrorFlag = enu_CalculateResult();
    561c:	0e 94 1f 2c 	call	0x583e	; 0x583e <enu_CalculateResult>
    5620:	89 83       	std	Y+1, r24	; 0x01
    5622:	dc cf       	rjmp	.-72     	; 0x55dc <Calculator_enu_Operation+0x14>
            
            break;

            default:

                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5624:	82 e0       	ldi	r24, 0x02	; 2
    5626:	89 83       	std	Y+1, r24	; 0x01
    5628:	d9 cf       	rjmp	.-78     	; 0x55dc <Calculator_enu_Operation+0x14>

0000562a <enu_GetUserInput>:
}


//Local functions' implementations
static ErrorState_t enu_GetUserInput(u8* Copy_pu8_UserInput)
{
    562a:	0f 93       	push	r16
    562c:	df 93       	push	r29
    562e:	cf 93       	push	r28
    5630:	00 d0       	rcall	.+0      	; 0x5632 <enu_GetUserInput+0x8>
    5632:	00 d0       	rcall	.+0      	; 0x5634 <enu_GetUserInput+0xa>
    5634:	0f 92       	push	r0
    5636:	cd b7       	in	r28, 0x3d	; 61
    5638:	de b7       	in	r29, 0x3e	; 62
    563a:	9b 83       	std	Y+3, r25	; 0x03
    563c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_UserInput)
    5642:	8a 81       	ldd	r24, Y+2	; 0x02
    5644:	9b 81       	ldd	r25, Y+3	; 0x03
    5646:	00 97       	sbiw	r24, 0x00	; 0
    5648:	09 f4       	brne	.+2      	; 0x564c <enu_GetUserInput+0x22>
    564a:	ed c0       	rjmp	.+474    	; 0x5826 <enu_GetUserInput+0x1fc>
    {    
        switch (u8_CalculationStage)
    564c:	80 91 d8 01 	lds	r24, 0x01D8
    5650:	28 2f       	mov	r18, r24
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	3d 83       	std	Y+5, r19	; 0x05
    5656:	2c 83       	std	Y+4, r18	; 0x04
    5658:	8c 81       	ldd	r24, Y+4	; 0x04
    565a:	9d 81       	ldd	r25, Y+5	; 0x05
    565c:	82 30       	cpi	r24, 0x02	; 2
    565e:	91 05       	cpc	r25, r1
    5660:	09 f4       	brne	.+2      	; 0x5664 <enu_GetUserInput+0x3a>
    5662:	7e c0       	rjmp	.+252    	; 0x5760 <enu_GetUserInput+0x136>
    5664:	2c 81       	ldd	r18, Y+4	; 0x04
    5666:	3d 81       	ldd	r19, Y+5	; 0x05
    5668:	23 30       	cpi	r18, 0x03	; 3
    566a:	31 05       	cpc	r19, r1
    566c:	5c f4       	brge	.+22     	; 0x5684 <enu_GetUserInput+0x5a>
    566e:	8c 81       	ldd	r24, Y+4	; 0x04
    5670:	9d 81       	ldd	r25, Y+5	; 0x05
    5672:	00 97       	sbiw	r24, 0x00	; 0
    5674:	09 f4       	brne	.+2      	; 0x5678 <enu_GetUserInput+0x4e>
    5676:	44 c0       	rjmp	.+136    	; 0x5700 <enu_GetUserInput+0xd6>
    5678:	2c 81       	ldd	r18, Y+4	; 0x04
    567a:	3d 81       	ldd	r19, Y+5	; 0x05
    567c:	21 30       	cpi	r18, 0x01	; 1
    567e:	31 05       	cpc	r19, r1
    5680:	91 f0       	breq	.+36     	; 0x56a6 <enu_GetUserInput+0x7c>
    5682:	ce c0       	rjmp	.+412    	; 0x5820 <enu_GetUserInput+0x1f6>
    5684:	8c 81       	ldd	r24, Y+4	; 0x04
    5686:	9d 81       	ldd	r25, Y+5	; 0x05
    5688:	83 30       	cpi	r24, 0x03	; 3
    568a:	91 05       	cpc	r25, r1
    568c:	09 f4       	brne	.+2      	; 0x5690 <enu_GetUserInput+0x66>
    568e:	96 c0       	rjmp	.+300    	; 0x57bc <enu_GetUserInput+0x192>
    5690:	2c 81       	ldd	r18, Y+4	; 0x04
    5692:	3d 81       	ldd	r19, Y+5	; 0x05
    5694:	25 30       	cpi	r18, 0x05	; 5
    5696:	31 05       	cpc	r19, r1
    5698:	09 f4       	brne	.+2      	; 0x569c <enu_GetUserInput+0x72>
    569a:	ac c0       	rjmp	.+344    	; 0x57f4 <enu_GetUserInput+0x1ca>
    569c:	c1 c0       	rjmp	.+386    	; 0x5820 <enu_GetUserInput+0x1f6>
            {

                while (((*Copy_pu8_UserInput > CALCULATOR_NINE_SYMBOL) || (*Copy_pu8_UserInput < CALCULATOR_ZERO_SYMBOL)) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
                {
                    //Getting keypressed from keypad
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
    569e:	8a 81       	ldd	r24, Y+2	; 0x02
    56a0:	9b 81       	ldd	r25, Y+3	; 0x03
    56a2:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Keypad_enu_GetButtonPressedValue>
        switch (u8_CalculationStage)
        {
            case CALCULATOR_FIRST_DIGIT_STATE:
            {

                while (((*Copy_pu8_UserInput > CALCULATOR_NINE_SYMBOL) || (*Copy_pu8_UserInput < CALCULATOR_ZERO_SYMBOL)) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
    56a6:	ea 81       	ldd	r30, Y+2	; 0x02
    56a8:	fb 81       	ldd	r31, Y+3	; 0x03
    56aa:	80 81       	ld	r24, Z
    56ac:	8a 33       	cpi	r24, 0x3A	; 58
    56ae:	b8 f7       	brcc	.-18     	; 0x569e <enu_GetUserInput+0x74>
    56b0:	ea 81       	ldd	r30, Y+2	; 0x02
    56b2:	fb 81       	ldd	r31, Y+3	; 0x03
    56b4:	80 81       	ld	r24, Z
    56b6:	80 33       	cpi	r24, 0x30	; 48
    56b8:	90 f3       	brcs	.-28     	; 0x569e <enu_GetUserInput+0x74>
    56ba:	ea 81       	ldd	r30, Y+2	; 0x02
    56bc:	fb 81       	ldd	r31, Y+3	; 0x03
    56be:	80 81       	ld	r24, Z
    56c0:	8f 3f       	cpi	r24, 0xFF	; 255
    56c2:	69 f3       	breq	.-38     	; 0x569e <enu_GetUserInput+0x74>
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);

                }

                //Displaying chosen digit on LCD
                LCD_enu_WriteIntegerNum(*Copy_pu8_UserInput - CALCULATOR_ASCII_OFFSET, LCD_ROW_1, LCD_COLUMN_1, LCD_PAGE_1);
    56c4:	ea 81       	ldd	r30, Y+2	; 0x02
    56c6:	fb 81       	ldd	r31, Y+3	; 0x03
    56c8:	80 81       	ld	r24, Z
    56ca:	88 2f       	mov	r24, r24
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	c0 97       	sbiw	r24, 0x30	; 48
    56d0:	aa 27       	eor	r26, r26
    56d2:	97 fd       	sbrc	r25, 7
    56d4:	a0 95       	com	r26
    56d6:	ba 2f       	mov	r27, r26
    56d8:	bc 01       	movw	r22, r24
    56da:	cd 01       	movw	r24, r26
    56dc:	41 e0       	ldi	r20, 0x01	; 1
    56de:	21 e0       	ldi	r18, 0x01	; 1
    56e0:	01 e0       	ldi	r16, 0x01	; 1
    56e2:	0e 94 c3 20 	call	0x4186	; 0x4186 <LCD_enu_WriteIntegerNum>

                //Saves the digit in a global variable
                u8_FirstDigit = *Copy_pu8_UserInput - CALCULATOR_ASCII_OFFSET;
    56e6:	ea 81       	ldd	r30, Y+2	; 0x02
    56e8:	fb 81       	ldd	r31, Y+3	; 0x03
    56ea:	80 81       	ld	r24, Z
    56ec:	80 53       	subi	r24, 0x30	; 48
    56ee:	80 93 d9 01 	sts	0x01D9, r24

                //now it's time to take an arithmetic operator from the user
                u8_CalculationStage = CALCULATOR_OPERATOR_STATE;
    56f2:	10 92 d8 01 	sts	0x01D8, r1
    56f6:	99 c0       	rjmp	.+306    	; 0x582a <enu_GetUserInput+0x200>
            case CALCULATOR_OPERATOR_STATE:
            {
                while ((*Copy_pu8_UserInput != CALCULATOR_ADDITION_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_DIFFERENCE_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_DIVISION_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_MULTIPLICATION_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
                {
                    //Getting keypressed from keypad
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
    56f8:	8a 81       	ldd	r24, Y+2	; 0x02
    56fa:	9b 81       	ldd	r25, Y+3	; 0x03
    56fc:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Keypad_enu_GetButtonPressedValue>

                break;
            }
            case CALCULATOR_OPERATOR_STATE:
            {
                while ((*Copy_pu8_UserInput != CALCULATOR_ADDITION_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_DIFFERENCE_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_DIVISION_SYMBOL && *Copy_pu8_UserInput != CALCULATOR_MULTIPLICATION_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
    5700:	ea 81       	ldd	r30, Y+2	; 0x02
    5702:	fb 81       	ldd	r31, Y+3	; 0x03
    5704:	80 81       	ld	r24, Z
    5706:	8b 32       	cpi	r24, 0x2B	; 43
    5708:	79 f0       	breq	.+30     	; 0x5728 <enu_GetUserInput+0xfe>
    570a:	ea 81       	ldd	r30, Y+2	; 0x02
    570c:	fb 81       	ldd	r31, Y+3	; 0x03
    570e:	80 81       	ld	r24, Z
    5710:	8d 32       	cpi	r24, 0x2D	; 45
    5712:	51 f0       	breq	.+20     	; 0x5728 <enu_GetUserInput+0xfe>
    5714:	ea 81       	ldd	r30, Y+2	; 0x02
    5716:	fb 81       	ldd	r31, Y+3	; 0x03
    5718:	80 81       	ld	r24, Z
    571a:	8f 32       	cpi	r24, 0x2F	; 47
    571c:	29 f0       	breq	.+10     	; 0x5728 <enu_GetUserInput+0xfe>
    571e:	ea 81       	ldd	r30, Y+2	; 0x02
    5720:	fb 81       	ldd	r31, Y+3	; 0x03
    5722:	80 81       	ld	r24, Z
    5724:	88 37       	cpi	r24, 0x78	; 120
    5726:	41 f7       	brne	.-48     	; 0x56f8 <enu_GetUserInput+0xce>
    5728:	ea 81       	ldd	r30, Y+2	; 0x02
    572a:	fb 81       	ldd	r31, Y+3	; 0x03
    572c:	80 81       	ld	r24, Z
    572e:	8f 3f       	cpi	r24, 0xFF	; 255
    5730:	19 f3       	breq	.-58     	; 0x56f8 <enu_GetUserInput+0xce>
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);

                }

                //Displaying arithmetic symbol on LCD
                LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_2, LCD_PAGE_1);
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	62 e0       	ldi	r22, 0x02	; 2
    5736:	41 e0       	ldi	r20, 0x01	; 1
    5738:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>
                LCD_enu_SendData(*Copy_pu8_UserInput);
    573c:	ea 81       	ldd	r30, Y+2	; 0x02
    573e:	fb 81       	ldd	r31, Y+3	; 0x03
    5740:	80 81       	ld	r24, Z
    5742:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <LCD_enu_SendData>

                //Saves the operator in a global variable
                u8_ArithmeticOperator = *Copy_pu8_UserInput;
    5746:	ea 81       	ldd	r30, Y+2	; 0x02
    5748:	fb 81       	ldd	r31, Y+3	; 0x03
    574a:	80 81       	ld	r24, Z
    574c:	80 93 da 01 	sts	0x01DA, r24
                
                //Now it's time to take THE second digit from the user
                u8_CalculationStage = CALCULATOR_SECOND_DIGIT_STATE;
    5750:	82 e0       	ldi	r24, 0x02	; 2
    5752:	80 93 d8 01 	sts	0x01D8, r24
    5756:	69 c0       	rjmp	.+210    	; 0x582a <enu_GetUserInput+0x200>
            {

                while (((*Copy_pu8_UserInput > CALCULATOR_NINE_SYMBOL) || (*Copy_pu8_UserInput < CALCULATOR_ZERO_SYMBOL)) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
                {
                    //Getting keypressed from keypad
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
    5758:	8a 81       	ldd	r24, Y+2	; 0x02
    575a:	9b 81       	ldd	r25, Y+3	; 0x03
    575c:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Keypad_enu_GetButtonPressedValue>
            }

            case CALCULATOR_SECOND_DIGIT_STATE:
            {

                while (((*Copy_pu8_UserInput > CALCULATOR_NINE_SYMBOL) || (*Copy_pu8_UserInput < CALCULATOR_ZERO_SYMBOL)) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
    5760:	ea 81       	ldd	r30, Y+2	; 0x02
    5762:	fb 81       	ldd	r31, Y+3	; 0x03
    5764:	80 81       	ld	r24, Z
    5766:	8a 33       	cpi	r24, 0x3A	; 58
    5768:	b8 f7       	brcc	.-18     	; 0x5758 <enu_GetUserInput+0x12e>
    576a:	ea 81       	ldd	r30, Y+2	; 0x02
    576c:	fb 81       	ldd	r31, Y+3	; 0x03
    576e:	80 81       	ld	r24, Z
    5770:	80 33       	cpi	r24, 0x30	; 48
    5772:	90 f3       	brcs	.-28     	; 0x5758 <enu_GetUserInput+0x12e>
    5774:	ea 81       	ldd	r30, Y+2	; 0x02
    5776:	fb 81       	ldd	r31, Y+3	; 0x03
    5778:	80 81       	ld	r24, Z
    577a:	8f 3f       	cpi	r24, 0xFF	; 255
    577c:	69 f3       	breq	.-38     	; 0x5758 <enu_GetUserInput+0x12e>
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);

                }

                //Displaying chosen digit on LCD
                LCD_enu_WriteIntegerNum(*Copy_pu8_UserInput - CALCULATOR_ASCII_OFFSET, LCD_ROW_1, LCD_COLUMN_3, LCD_PAGE_1);
    577e:	ea 81       	ldd	r30, Y+2	; 0x02
    5780:	fb 81       	ldd	r31, Y+3	; 0x03
    5782:	80 81       	ld	r24, Z
    5784:	88 2f       	mov	r24, r24
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	c0 97       	sbiw	r24, 0x30	; 48
    578a:	aa 27       	eor	r26, r26
    578c:	97 fd       	sbrc	r25, 7
    578e:	a0 95       	com	r26
    5790:	ba 2f       	mov	r27, r26
    5792:	bc 01       	movw	r22, r24
    5794:	cd 01       	movw	r24, r26
    5796:	41 e0       	ldi	r20, 0x01	; 1
    5798:	23 e0       	ldi	r18, 0x03	; 3
    579a:	01 e0       	ldi	r16, 0x01	; 1
    579c:	0e 94 c3 20 	call	0x4186	; 0x4186 <LCD_enu_WriteIntegerNum>

                //Saves the operator in a global variable
                u8_SecondDigit = *Copy_pu8_UserInput - CALCULATOR_ASCII_OFFSET;
    57a0:	ea 81       	ldd	r30, Y+2	; 0x02
    57a2:	fb 81       	ldd	r31, Y+3	; 0x03
    57a4:	80 81       	ld	r24, Z
    57a6:	80 53       	subi	r24, 0x30	; 48
    57a8:	80 93 db 01 	sts	0x01DB, r24

                //now it's time to take the assignmsent operator  from the user
                u8_CalculationStage = CALCULATOR_ASSIGNMENT_STATE;
    57ac:	83 e0       	ldi	r24, 0x03	; 3
    57ae:	80 93 d8 01 	sts	0x01D8, r24
    57b2:	3b c0       	rjmp	.+118    	; 0x582a <enu_GetUserInput+0x200>
            case CALCULATOR_ASSIGNMENT_STATE:
            {
                while((*Copy_pu8_UserInput != CALCULATOR_EQUAL_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
                {
                    //Getting keypressed from keypad
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
    57b4:	8a 81       	ldd	r24, Y+2	; 0x02
    57b6:	9b 81       	ldd	r25, Y+3	; 0x03
    57b8:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Keypad_enu_GetButtonPressedValue>

                break;
            }
            case CALCULATOR_ASSIGNMENT_STATE:
            {
                while((*Copy_pu8_UserInput != CALCULATOR_EQUAL_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
    57bc:	ea 81       	ldd	r30, Y+2	; 0x02
    57be:	fb 81       	ldd	r31, Y+3	; 0x03
    57c0:	80 81       	ld	r24, Z
    57c2:	8d 33       	cpi	r24, 0x3D	; 61
    57c4:	b9 f7       	brne	.-18     	; 0x57b4 <enu_GetUserInput+0x18a>
    57c6:	ea 81       	ldd	r30, Y+2	; 0x02
    57c8:	fb 81       	ldd	r31, Y+3	; 0x03
    57ca:	80 81       	ld	r24, Z
    57cc:	8f 3f       	cpi	r24, 0xFF	; 255
    57ce:	91 f3       	breq	.-28     	; 0x57b4 <enu_GetUserInput+0x18a>
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);

                }

                //Displaying Assignment operator symbol on LCD
                LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_4, LCD_PAGE_1);
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	64 e0       	ldi	r22, 0x04	; 4
    57d4:	41 e0       	ldi	r20, 0x01	; 1
    57d6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>
                LCD_enu_SendData(*Copy_pu8_UserInput);
    57da:	ea 81       	ldd	r30, Y+2	; 0x02
    57dc:	fb 81       	ldd	r31, Y+3	; 0x03
    57de:	80 81       	ld	r24, Z
    57e0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <LCD_enu_SendData>

                //now it's time to take an arithmetic operator from the user
                u8_CalculationStage = CALCULATOR_RESULT_STATE;
    57e4:	84 e0       	ldi	r24, 0x04	; 4
    57e6:	80 93 d8 01 	sts	0x01D8, r24
    57ea:	1f c0       	rjmp	.+62     	; 0x582a <enu_GetUserInput+0x200>

                while((*Copy_pu8_UserInput != CALCULATOR_ON_OR_CLEAR_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
                {

                    //Getting keypressed from keypad
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
    57ec:	8a 81       	ldd	r24, Y+2	; 0x02
    57ee:	9b 81       	ldd	r25, Y+3	; 0x03
    57f0:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Keypad_enu_GetButtonPressedValue>
                break;
            }

            case CALCULATOR_CLEAR_WAITING_STATE:

                while((*Copy_pu8_UserInput != CALCULATOR_ON_OR_CLEAR_SYMBOL) || (*Copy_pu8_UserInput == KEYPAD_NOT_PRESSED_VALUE))
    57f4:	ea 81       	ldd	r30, Y+2	; 0x02
    57f6:	fb 81       	ldd	r31, Y+3	; 0x03
    57f8:	80 81       	ld	r24, Z
    57fa:	83 34       	cpi	r24, 0x43	; 67
    57fc:	b9 f7       	brne	.-18     	; 0x57ec <enu_GetUserInput+0x1c2>
    57fe:	ea 81       	ldd	r30, Y+2	; 0x02
    5800:	fb 81       	ldd	r31, Y+3	; 0x03
    5802:	80 81       	ld	r24, Z
    5804:	8f 3f       	cpi	r24, 0xFF	; 255
    5806:	91 f3       	breq	.-28     	; 0x57ec <enu_GetUserInput+0x1c2>
                    Keypad_enu_GetButtonPressedValue(Copy_pu8_UserInput);
                    
                }

                //Clearing Page
                LCD_enu_ClearPage(LCD_PAGE_1);
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <LCD_enu_ClearPage>
                
                //Resetting Cusrsor
                LCD_enu_GoToPosition(LCD_ROW_1, LCD_COLUMN_1, LCD_PAGE_1);
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	61 e0       	ldi	r22, 0x01	; 1
    5812:	41 e0       	ldi	r20, 0x01	; 1
    5814:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>

                u8_CalculationStage = CALCULATOR_FIRST_DIGIT_STATE;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 d8 01 	sts	0x01D8, r24
    581e:	05 c0       	rjmp	.+10     	; 0x582a <enu_GetUserInput+0x200>


            break;
        
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    5820:	82 e0       	ldi	r24, 0x02	; 2
    5822:	89 83       	std	Y+1, r24	; 0x01
    5824:	02 c0       	rjmp	.+4      	; 0x582a <enu_GetUserInput+0x200>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    5826:	83 e0       	ldi	r24, 0x03	; 3
    5828:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_u8_ErrorFlag;
    582a:	89 81       	ldd	r24, Y+1	; 0x01

}
    582c:	0f 90       	pop	r0
    582e:	0f 90       	pop	r0
    5830:	0f 90       	pop	r0
    5832:	0f 90       	pop	r0
    5834:	0f 90       	pop	r0
    5836:	cf 91       	pop	r28
    5838:	df 91       	pop	r29
    583a:	0f 91       	pop	r16
    583c:	08 95       	ret

0000583e <enu_CalculateResult>:

static ErrorState_t enu_CalculateResult(void)
{
    583e:	ef 92       	push	r14
    5840:	ff 92       	push	r15
    5842:	0f 93       	push	r16
    5844:	1f 93       	push	r17
    5846:	df 93       	push	r29
    5848:	cf 93       	push	r28
    584a:	cd b7       	in	r28, 0x3d	; 61
    584c:	de b7       	in	r29, 0x3e	; 62
    584e:	27 97       	sbiw	r28, 0x07	; 7
    5850:	0f b6       	in	r0, 0x3f	; 63
    5852:	f8 94       	cli
    5854:	de bf       	out	0x3e, r29	; 62
    5856:	0f be       	out	0x3f, r0	; 63
    5858:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8_ErrorFlag = ES_NOK;
    585a:	81 e0       	ldi	r24, 0x01	; 1
    585c:	8d 83       	std	Y+5, r24	; 0x05
    
    switch (u8_ArithmeticOperator)
    585e:	80 91 da 01 	lds	r24, 0x01DA
    5862:	28 2f       	mov	r18, r24
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	3f 83       	std	Y+7, r19	; 0x07
    5868:	2e 83       	std	Y+6, r18	; 0x06
    586a:	4e 81       	ldd	r20, Y+6	; 0x06
    586c:	5f 81       	ldd	r21, Y+7	; 0x07
    586e:	4f 32       	cpi	r20, 0x2F	; 47
    5870:	51 05       	cpc	r21, r1
    5872:	09 f4       	brne	.+2      	; 0x5876 <enu_CalculateResult+0x38>
    5874:	47 c0       	rjmp	.+142    	; 0x5904 <enu_CalculateResult+0xc6>
    5876:	8e 81       	ldd	r24, Y+6	; 0x06
    5878:	9f 81       	ldd	r25, Y+7	; 0x07
    587a:	80 33       	cpi	r24, 0x30	; 48
    587c:	91 05       	cpc	r25, r1
    587e:	5c f4       	brge	.+22     	; 0x5896 <enu_CalculateResult+0x58>
    5880:	2e 81       	ldd	r18, Y+6	; 0x06
    5882:	3f 81       	ldd	r19, Y+7	; 0x07
    5884:	2b 32       	cpi	r18, 0x2B	; 43
    5886:	31 05       	cpc	r19, r1
    5888:	69 f0       	breq	.+26     	; 0x58a4 <enu_CalculateResult+0x66>
    588a:	4e 81       	ldd	r20, Y+6	; 0x06
    588c:	5f 81       	ldd	r21, Y+7	; 0x07
    588e:	4d 32       	cpi	r20, 0x2D	; 45
    5890:	51 05       	cpc	r21, r1
    5892:	f9 f0       	breq	.+62     	; 0x58d2 <enu_CalculateResult+0x94>
    5894:	85 c0       	rjmp	.+266    	; 0x59a0 <enu_CalculateResult+0x162>
    5896:	8e 81       	ldd	r24, Y+6	; 0x06
    5898:	9f 81       	ldd	r25, Y+7	; 0x07
    589a:	88 37       	cpi	r24, 0x78	; 120
    589c:	91 05       	cpc	r25, r1
    589e:	09 f4       	brne	.+2      	; 0x58a2 <enu_CalculateResult+0x64>
    58a0:	62 c0       	rjmp	.+196    	; 0x5966 <enu_CalculateResult+0x128>
    58a2:	7e c0       	rjmp	.+252    	; 0x59a0 <enu_CalculateResult+0x162>
    {
        case CALCULATOR_ADDITION_SYMBOL:
        {
            LCD_enu_WriteIntegerNum(u8_FirstDigit + u8_SecondDigit, LCD_ROW_1, LCD_COLUMN_5, LCD_PAGE_1);
    58a4:	80 91 d9 01 	lds	r24, 0x01D9
    58a8:	28 2f       	mov	r18, r24
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	80 91 db 01 	lds	r24, 0x01DB
    58b0:	88 2f       	mov	r24, r24
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	82 0f       	add	r24, r18
    58b6:	93 1f       	adc	r25, r19
    58b8:	aa 27       	eor	r26, r26
    58ba:	97 fd       	sbrc	r25, 7
    58bc:	a0 95       	com	r26
    58be:	ba 2f       	mov	r27, r26
    58c0:	bc 01       	movw	r22, r24
    58c2:	cd 01       	movw	r24, r26
    58c4:	41 e0       	ldi	r20, 0x01	; 1
    58c6:	25 e0       	ldi	r18, 0x05	; 5
    58c8:	01 e0       	ldi	r16, 0x01	; 1
    58ca:	0e 94 c3 20 	call	0x4186	; 0x4186 <LCD_enu_WriteIntegerNum>

            Local_u8_ErrorFlag = ES_OK;
    58ce:	1d 82       	std	Y+5, r1	; 0x05
    58d0:	69 c0       	rjmp	.+210    	; 0x59a4 <enu_CalculateResult+0x166>
        }

        case CALCULATOR_DIFFERENCE_SYMBOL:
        {

            LCD_enu_WriteIntegerNum(u8_FirstDigit - u8_SecondDigit, LCD_ROW_1, LCD_COLUMN_5, LCD_PAGE_1);
    58d2:	80 91 d9 01 	lds	r24, 0x01D9
    58d6:	28 2f       	mov	r18, r24
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	80 91 db 01 	lds	r24, 0x01DB
    58de:	88 2f       	mov	r24, r24
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	a9 01       	movw	r20, r18
    58e4:	48 1b       	sub	r20, r24
    58e6:	59 0b       	sbc	r21, r25
    58e8:	ca 01       	movw	r24, r20
    58ea:	aa 27       	eor	r26, r26
    58ec:	97 fd       	sbrc	r25, 7
    58ee:	a0 95       	com	r26
    58f0:	ba 2f       	mov	r27, r26
    58f2:	bc 01       	movw	r22, r24
    58f4:	cd 01       	movw	r24, r26
    58f6:	41 e0       	ldi	r20, 0x01	; 1
    58f8:	25 e0       	ldi	r18, 0x05	; 5
    58fa:	01 e0       	ldi	r16, 0x01	; 1
    58fc:	0e 94 c3 20 	call	0x4186	; 0x4186 <LCD_enu_WriteIntegerNum>
            

            Local_u8_ErrorFlag = ES_OK;
    5900:	1d 82       	std	Y+5, r1	; 0x05
    5902:	50 c0       	rjmp	.+160    	; 0x59a4 <enu_CalculateResult+0x166>
            break;
        }

        case CALCULATOR_DIVISION_SYMBOL:
        {
            f32 Local_f32_DivisionResult = ((f32)u8_FirstDigit)/u8_SecondDigit;
    5904:	80 91 d9 01 	lds	r24, 0x01D9
    5908:	88 2f       	mov	r24, r24
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	a0 e0       	ldi	r26, 0x00	; 0
    590e:	b0 e0       	ldi	r27, 0x00	; 0
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    5918:	7b 01       	movw	r14, r22
    591a:	8c 01       	movw	r16, r24
    591c:	80 91 db 01 	lds	r24, 0x01DB
    5920:	88 2f       	mov	r24, r24
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	aa 27       	eor	r26, r26
    5926:	97 fd       	sbrc	r25, 7
    5928:	a0 95       	com	r26
    592a:	ba 2f       	mov	r27, r26
    592c:	bc 01       	movw	r22, r24
    592e:	cd 01       	movw	r24, r26
    5930:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    5934:	9b 01       	movw	r18, r22
    5936:	ac 01       	movw	r20, r24
    5938:	c8 01       	movw	r24, r16
    593a:	b7 01       	movw	r22, r14
    593c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	89 83       	std	Y+1, r24	; 0x01
    5946:	9a 83       	std	Y+2, r25	; 0x02
    5948:	ab 83       	std	Y+3, r26	; 0x03
    594a:	bc 83       	std	Y+4, r27	; 0x04
            
            LCD_enu_WriteFloatNum(Local_f32_DivisionResult, LCD_ROW_1, LCD_COLUMN_5, LCD_PAGE_1);
    594c:	89 81       	ldd	r24, Y+1	; 0x01
    594e:	9a 81       	ldd	r25, Y+2	; 0x02
    5950:	ab 81       	ldd	r26, Y+3	; 0x03
    5952:	bc 81       	ldd	r27, Y+4	; 0x04
    5954:	bc 01       	movw	r22, r24
    5956:	cd 01       	movw	r24, r26
    5958:	41 e0       	ldi	r20, 0x01	; 1
    595a:	25 e0       	ldi	r18, 0x05	; 5
    595c:	01 e0       	ldi	r16, 0x01	; 1
    595e:	0e 94 ad 21 	call	0x435a	; 0x435a <LCD_enu_WriteFloatNum>
            
            Local_u8_ErrorFlag = ES_OK;
    5962:	1d 82       	std	Y+5, r1	; 0x05
    5964:	1f c0       	rjmp	.+62     	; 0x59a4 <enu_CalculateResult+0x166>
            break;
        }
        case CALCULATOR_MULTIPLICATION_SYMBOL:
        {

            LCD_enu_WriteIntegerNum(u8_FirstDigit*u8_SecondDigit, LCD_ROW_1, LCD_COLUMN_5, LCD_PAGE_1);
    5966:	80 91 d9 01 	lds	r24, 0x01D9
    596a:	28 2f       	mov	r18, r24
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	80 91 db 01 	lds	r24, 0x01DB
    5972:	88 2f       	mov	r24, r24
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	ac 01       	movw	r20, r24
    5978:	24 9f       	mul	r18, r20
    597a:	c0 01       	movw	r24, r0
    597c:	25 9f       	mul	r18, r21
    597e:	90 0d       	add	r25, r0
    5980:	34 9f       	mul	r19, r20
    5982:	90 0d       	add	r25, r0
    5984:	11 24       	eor	r1, r1
    5986:	aa 27       	eor	r26, r26
    5988:	97 fd       	sbrc	r25, 7
    598a:	a0 95       	com	r26
    598c:	ba 2f       	mov	r27, r26
    598e:	bc 01       	movw	r22, r24
    5990:	cd 01       	movw	r24, r26
    5992:	41 e0       	ldi	r20, 0x01	; 1
    5994:	25 e0       	ldi	r18, 0x05	; 5
    5996:	01 e0       	ldi	r16, 0x01	; 1
    5998:	0e 94 c3 20 	call	0x4186	; 0x4186 <LCD_enu_WriteIntegerNum>

            Local_u8_ErrorFlag = ES_OK;
    599c:	1d 82       	std	Y+5, r1	; 0x05
    599e:	02 c0       	rjmp	.+4      	; 0x59a4 <enu_CalculateResult+0x166>
            
            break;
        }
    
         default:
         Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    59a0:	82 e0       	ldi	r24, 0x02	; 2
    59a2:	8d 83       	std	Y+5, r24	; 0x05
         break;
    }


    //Advance to the next stage 
    u8_CalculationStage = CALCULATOR_CLEAR_WAITING_STATE;
    59a4:	85 e0       	ldi	r24, 0x05	; 5
    59a6:	80 93 d8 01 	sts	0x01D8, r24


    return Local_u8_ErrorFlag;
    59aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    59ac:	27 96       	adiw	r28, 0x07	; 7
    59ae:	0f b6       	in	r0, 0x3f	; 63
    59b0:	f8 94       	cli
    59b2:	de bf       	out	0x3e, r29	; 62
    59b4:	0f be       	out	0x3f, r0	; 63
    59b6:	cd bf       	out	0x3d, r28	; 61
    59b8:	cf 91       	pop	r28
    59ba:	df 91       	pop	r29
    59bc:	1f 91       	pop	r17
    59be:	0f 91       	pop	r16
    59c0:	ff 90       	pop	r15
    59c2:	ef 90       	pop	r14
    59c4:	08 95       	ret

000059c6 <enu_WrongChoiceSelected>:

static ErrorState_t enu_WrongChoiceSelected(u8 Copy_Page_Number)
{
    59c6:	df 93       	push	r29
    59c8:	cf 93       	push	r28
    59ca:	cd b7       	in	r28, 0x3d	; 61
    59cc:	de b7       	in	r29, 0x3e	; 62
    59ce:	60 97       	sbiw	r28, 0x10	; 16
    59d0:	0f b6       	in	r0, 0x3f	; 63
    59d2:	f8 94       	cli
    59d4:	de bf       	out	0x3e, r29	; 62
    59d6:	0f be       	out	0x3f, r0	; 63
    59d8:	cd bf       	out	0x3d, r28	; 61
    59da:	88 8b       	std	Y+16, r24	; 0x10
    u8 Local_u8_ErrorFlag = ES_NOK;
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	8f 87       	std	Y+15, r24	; 0x0f


    //Displaying 'X' for wrong choice entered
    LCD_enu_GoToPosition(LCD_ROW_2, LCD_COLUMN_16, Copy_Page_Number);
    59e0:	82 e0       	ldi	r24, 0x02	; 2
    59e2:	60 e1       	ldi	r22, 0x10	; 16
    59e4:	48 89       	ldd	r20, Y+16	; 0x10
    59e6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>
    LCD_enu_SendData('X');
    59ea:	88 e5       	ldi	r24, 0x58	; 88
    59ec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <LCD_enu_SendData>
    59f0:	80 e0       	ldi	r24, 0x00	; 0
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	aa ef       	ldi	r26, 0xFA	; 250
    59f6:	b3 e4       	ldi	r27, 0x43	; 67
    59f8:	8b 87       	std	Y+11, r24	; 0x0b
    59fa:	9c 87       	std	Y+12, r25	; 0x0c
    59fc:	ad 87       	std	Y+13, r26	; 0x0d
    59fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	4a e7       	ldi	r20, 0x7A	; 122
    5a0e:	55 e4       	ldi	r21, 0x45	; 69
    5a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	8f 83       	std	Y+7, r24	; 0x07
    5a1a:	98 87       	std	Y+8, r25	; 0x08
    5a1c:	a9 87       	std	Y+9, r26	; 0x09
    5a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a20:	6f 81       	ldd	r22, Y+7	; 0x07
    5a22:	78 85       	ldd	r23, Y+8	; 0x08
    5a24:	89 85       	ldd	r24, Y+9	; 0x09
    5a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a28:	20 e0       	ldi	r18, 0x00	; 0
    5a2a:	30 e0       	ldi	r19, 0x00	; 0
    5a2c:	40 e8       	ldi	r20, 0x80	; 128
    5a2e:	5f e3       	ldi	r21, 0x3F	; 63
    5a30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5a34:	88 23       	and	r24, r24
    5a36:	2c f4       	brge	.+10     	; 0x5a42 <enu_WrongChoiceSelected+0x7c>
		__ticks = 1;
    5a38:	81 e0       	ldi	r24, 0x01	; 1
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	9e 83       	std	Y+6, r25	; 0x06
    5a3e:	8d 83       	std	Y+5, r24	; 0x05
    5a40:	3f c0       	rjmp	.+126    	; 0x5ac0 <enu_WrongChoiceSelected+0xfa>
	else if (__tmp > 65535)
    5a42:	6f 81       	ldd	r22, Y+7	; 0x07
    5a44:	78 85       	ldd	r23, Y+8	; 0x08
    5a46:	89 85       	ldd	r24, Y+9	; 0x09
    5a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	3f ef       	ldi	r19, 0xFF	; 255
    5a4e:	4f e7       	ldi	r20, 0x7F	; 127
    5a50:	57 e4       	ldi	r21, 0x47	; 71
    5a52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5a56:	18 16       	cp	r1, r24
    5a58:	4c f5       	brge	.+82     	; 0x5aac <enu_WrongChoiceSelected+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	40 e2       	ldi	r20, 0x20	; 32
    5a68:	51 e4       	ldi	r21, 0x41	; 65
    5a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6e:	dc 01       	movw	r26, r24
    5a70:	cb 01       	movw	r24, r22
    5a72:	bc 01       	movw	r22, r24
    5a74:	cd 01       	movw	r24, r26
    5a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a7a:	dc 01       	movw	r26, r24
    5a7c:	cb 01       	movw	r24, r22
    5a7e:	9e 83       	std	Y+6, r25	; 0x06
    5a80:	8d 83       	std	Y+5, r24	; 0x05
    5a82:	0f c0       	rjmp	.+30     	; 0x5aa2 <enu_WrongChoiceSelected+0xdc>
    5a84:	80 e9       	ldi	r24, 0x90	; 144
    5a86:	91 e0       	ldi	r25, 0x01	; 1
    5a88:	9c 83       	std	Y+4, r25	; 0x04
    5a8a:	8b 83       	std	Y+3, r24	; 0x03
    5a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	f1 f7       	brne	.-4      	; 0x5a90 <enu_WrongChoiceSelected+0xca>
    5a94:	9c 83       	std	Y+4, r25	; 0x04
    5a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a98:	8d 81       	ldd	r24, Y+5	; 0x05
    5a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a9c:	01 97       	sbiw	r24, 0x01	; 1
    5a9e:	9e 83       	std	Y+6, r25	; 0x06
    5aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    5aa6:	00 97       	sbiw	r24, 0x00	; 0
    5aa8:	69 f7       	brne	.-38     	; 0x5a84 <enu_WrongChoiceSelected+0xbe>
    5aaa:	14 c0       	rjmp	.+40     	; 0x5ad4 <enu_WrongChoiceSelected+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aac:	6f 81       	ldd	r22, Y+7	; 0x07
    5aae:	78 85       	ldd	r23, Y+8	; 0x08
    5ab0:	89 85       	ldd	r24, Y+9	; 0x09
    5ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab8:	dc 01       	movw	r26, r24
    5aba:	cb 01       	movw	r24, r22
    5abc:	9e 83       	std	Y+6, r25	; 0x06
    5abe:	8d 83       	std	Y+5, r24	; 0x05
    5ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ac4:	9a 83       	std	Y+2, r25	; 0x02
    5ac6:	89 83       	std	Y+1, r24	; 0x01
    5ac8:	89 81       	ldd	r24, Y+1	; 0x01
    5aca:	9a 81       	ldd	r25, Y+2	; 0x02
    5acc:	01 97       	sbiw	r24, 0x01	; 1
    5ace:	f1 f7       	brne	.-4      	; 0x5acc <enu_WrongChoiceSelected+0x106>
    5ad0:	9a 83       	std	Y+2, r25	; 0x02
    5ad2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);

    //Erasing x after 500 ms (could be done by counter)                        
    LCD_enu_GoToPosition(LCD_ROW_2,LCD_COLUMN_16,Copy_Page_Number);
    5ad4:	82 e0       	ldi	r24, 0x02	; 2
    5ad6:	60 e1       	ldi	r22, 0x10	; 16
    5ad8:	48 89       	ldd	r20, Y+16	; 0x10
    5ada:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_enu_GoToPosition>
    LCD_enu_SendData(' ');
    5ade:	80 e2       	ldi	r24, 0x20	; 32
    5ae0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <LCD_enu_SendData>

    Local_u8_ErrorFlag = ES_OK;
    5ae4:	1f 86       	std	Y+15, r1	; 0x0f

    return Local_u8_ErrorFlag;
    5ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5ae8:	60 96       	adiw	r28, 0x10	; 16
    5aea:	0f b6       	in	r0, 0x3f	; 63
    5aec:	f8 94       	cli
    5aee:	de bf       	out	0x3e, r29	; 62
    5af0:	0f be       	out	0x3f, r0	; 63
    5af2:	cd bf       	out	0x3d, r28	; 61
    5af4:	cf 91       	pop	r28
    5af6:	df 91       	pop	r29
    5af8:	08 95       	ret

00005afa <main>:
#include "Calculator_Interface.h"

int main(void)
{
    5afa:	df 93       	push	r29
    5afc:	cf 93       	push	r28
    5afe:	cd b7       	in	r28, 0x3d	; 61
    5b00:	de b7       	in	r29, 0x3e	; 62
	//Initializing system
	Calculator_enu_Initialization();
    5b02:	0e 94 cc 2a 	call	0x5598	; 0x5598 <Calculator_enu_Initialization>
	
	//Operating the system
	Calculator_enu_Operation();
    5b06:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <Calculator_enu_Operation>
	return 0;
    5b0a:	80 e0       	ldi	r24, 0x00	; 0
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
}
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	08 95       	ret

00005b14 <__mulsi3>:
    5b14:	62 9f       	mul	r22, r18
    5b16:	d0 01       	movw	r26, r0
    5b18:	73 9f       	mul	r23, r19
    5b1a:	f0 01       	movw	r30, r0
    5b1c:	82 9f       	mul	r24, r18
    5b1e:	e0 0d       	add	r30, r0
    5b20:	f1 1d       	adc	r31, r1
    5b22:	64 9f       	mul	r22, r20
    5b24:	e0 0d       	add	r30, r0
    5b26:	f1 1d       	adc	r31, r1
    5b28:	92 9f       	mul	r25, r18
    5b2a:	f0 0d       	add	r31, r0
    5b2c:	83 9f       	mul	r24, r19
    5b2e:	f0 0d       	add	r31, r0
    5b30:	74 9f       	mul	r23, r20
    5b32:	f0 0d       	add	r31, r0
    5b34:	65 9f       	mul	r22, r21
    5b36:	f0 0d       	add	r31, r0
    5b38:	99 27       	eor	r25, r25
    5b3a:	72 9f       	mul	r23, r18
    5b3c:	b0 0d       	add	r27, r0
    5b3e:	e1 1d       	adc	r30, r1
    5b40:	f9 1f       	adc	r31, r25
    5b42:	63 9f       	mul	r22, r19
    5b44:	b0 0d       	add	r27, r0
    5b46:	e1 1d       	adc	r30, r1
    5b48:	f9 1f       	adc	r31, r25
    5b4a:	bd 01       	movw	r22, r26
    5b4c:	cf 01       	movw	r24, r30
    5b4e:	11 24       	eor	r1, r1
    5b50:	08 95       	ret

00005b52 <__udivmodsi4>:
    5b52:	a1 e2       	ldi	r26, 0x21	; 33
    5b54:	1a 2e       	mov	r1, r26
    5b56:	aa 1b       	sub	r26, r26
    5b58:	bb 1b       	sub	r27, r27
    5b5a:	fd 01       	movw	r30, r26
    5b5c:	0d c0       	rjmp	.+26     	; 0x5b78 <__udivmodsi4_ep>

00005b5e <__udivmodsi4_loop>:
    5b5e:	aa 1f       	adc	r26, r26
    5b60:	bb 1f       	adc	r27, r27
    5b62:	ee 1f       	adc	r30, r30
    5b64:	ff 1f       	adc	r31, r31
    5b66:	a2 17       	cp	r26, r18
    5b68:	b3 07       	cpc	r27, r19
    5b6a:	e4 07       	cpc	r30, r20
    5b6c:	f5 07       	cpc	r31, r21
    5b6e:	20 f0       	brcs	.+8      	; 0x5b78 <__udivmodsi4_ep>
    5b70:	a2 1b       	sub	r26, r18
    5b72:	b3 0b       	sbc	r27, r19
    5b74:	e4 0b       	sbc	r30, r20
    5b76:	f5 0b       	sbc	r31, r21

00005b78 <__udivmodsi4_ep>:
    5b78:	66 1f       	adc	r22, r22
    5b7a:	77 1f       	adc	r23, r23
    5b7c:	88 1f       	adc	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	1a 94       	dec	r1
    5b82:	69 f7       	brne	.-38     	; 0x5b5e <__udivmodsi4_loop>
    5b84:	60 95       	com	r22
    5b86:	70 95       	com	r23
    5b88:	80 95       	com	r24
    5b8a:	90 95       	com	r25
    5b8c:	9b 01       	movw	r18, r22
    5b8e:	ac 01       	movw	r20, r24
    5b90:	bd 01       	movw	r22, r26
    5b92:	cf 01       	movw	r24, r30
    5b94:	08 95       	ret

00005b96 <__divmodsi4>:
    5b96:	97 fb       	bst	r25, 7
    5b98:	09 2e       	mov	r0, r25
    5b9a:	05 26       	eor	r0, r21
    5b9c:	0e d0       	rcall	.+28     	; 0x5bba <__divmodsi4_neg1>
    5b9e:	57 fd       	sbrc	r21, 7
    5ba0:	04 d0       	rcall	.+8      	; 0x5baa <__divmodsi4_neg2>
    5ba2:	d7 df       	rcall	.-82     	; 0x5b52 <__udivmodsi4>
    5ba4:	0a d0       	rcall	.+20     	; 0x5bba <__divmodsi4_neg1>
    5ba6:	00 1c       	adc	r0, r0
    5ba8:	38 f4       	brcc	.+14     	; 0x5bb8 <__divmodsi4_exit>

00005baa <__divmodsi4_neg2>:
    5baa:	50 95       	com	r21
    5bac:	40 95       	com	r20
    5bae:	30 95       	com	r19
    5bb0:	21 95       	neg	r18
    5bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb4:	4f 4f       	sbci	r20, 0xFF	; 255
    5bb6:	5f 4f       	sbci	r21, 0xFF	; 255

00005bb8 <__divmodsi4_exit>:
    5bb8:	08 95       	ret

00005bba <__divmodsi4_neg1>:
    5bba:	f6 f7       	brtc	.-4      	; 0x5bb8 <__divmodsi4_exit>
    5bbc:	90 95       	com	r25
    5bbe:	80 95       	com	r24
    5bc0:	70 95       	com	r23
    5bc2:	61 95       	neg	r22
    5bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bca:	08 95       	ret

00005bcc <__prologue_saves__>:
    5bcc:	2f 92       	push	r2
    5bce:	3f 92       	push	r3
    5bd0:	4f 92       	push	r4
    5bd2:	5f 92       	push	r5
    5bd4:	6f 92       	push	r6
    5bd6:	7f 92       	push	r7
    5bd8:	8f 92       	push	r8
    5bda:	9f 92       	push	r9
    5bdc:	af 92       	push	r10
    5bde:	bf 92       	push	r11
    5be0:	cf 92       	push	r12
    5be2:	df 92       	push	r13
    5be4:	ef 92       	push	r14
    5be6:	ff 92       	push	r15
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	cd b7       	in	r28, 0x3d	; 61
    5bf2:	de b7       	in	r29, 0x3e	; 62
    5bf4:	ca 1b       	sub	r28, r26
    5bf6:	db 0b       	sbc	r29, r27
    5bf8:	0f b6       	in	r0, 0x3f	; 63
    5bfa:	f8 94       	cli
    5bfc:	de bf       	out	0x3e, r29	; 62
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	09 94       	ijmp

00005c04 <__epilogue_restores__>:
    5c04:	2a 88       	ldd	r2, Y+18	; 0x12
    5c06:	39 88       	ldd	r3, Y+17	; 0x11
    5c08:	48 88       	ldd	r4, Y+16	; 0x10
    5c0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c10:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c12:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c14:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c16:	b9 84       	ldd	r11, Y+9	; 0x09
    5c18:	c8 84       	ldd	r12, Y+8	; 0x08
    5c1a:	df 80       	ldd	r13, Y+7	; 0x07
    5c1c:	ee 80       	ldd	r14, Y+6	; 0x06
    5c1e:	fd 80       	ldd	r15, Y+5	; 0x05
    5c20:	0c 81       	ldd	r16, Y+4	; 0x04
    5c22:	1b 81       	ldd	r17, Y+3	; 0x03
    5c24:	aa 81       	ldd	r26, Y+2	; 0x02
    5c26:	b9 81       	ldd	r27, Y+1	; 0x01
    5c28:	ce 0f       	add	r28, r30
    5c2a:	d1 1d       	adc	r29, r1
    5c2c:	0f b6       	in	r0, 0x3f	; 63
    5c2e:	f8 94       	cli
    5c30:	de bf       	out	0x3e, r29	; 62
    5c32:	0f be       	out	0x3f, r0	; 63
    5c34:	cd bf       	out	0x3d, r28	; 61
    5c36:	ed 01       	movw	r28, r26
    5c38:	08 95       	ret

00005c3a <_exit>:
    5c3a:	f8 94       	cli

00005c3c <__stop_program>:
    5c3c:	ff cf       	rjmp	.-2      	; 0x5c3c <__stop_program>
